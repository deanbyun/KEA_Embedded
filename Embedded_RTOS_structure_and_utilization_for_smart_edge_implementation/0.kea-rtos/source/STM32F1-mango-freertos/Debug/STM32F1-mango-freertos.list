
STM32F1-mango-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08005fe0  08005fe0  00006fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006330  08006330  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006338  08006338  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006338  08006338  00007338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800633c  0800633c  0000733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006340  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ac  20000060  080063a0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  080063a0  00008a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018282  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab2  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00023dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f56  00000000  00000000  000251a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aee1  00000000  00000000  000260f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ae2  00000000  00000000  00040fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093efb  00000000  00000000  00058ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec9b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055cc  00000000  00000000  000ec9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  000f1fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fc8 	.word	0x08005fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005fc8 	.word	0x08005fc8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	2000011c 	.word	0x2000011c

08000190 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4a07      	ldr	r2, [pc, #28]	@ (80001bc <vApplicationGetTimerTaskMemory+0x2c>)
 80001a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	4a06      	ldr	r2, [pc, #24]	@ (80001c0 <vApplicationGetTimerTaskMemory+0x30>)
 80001a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	2000031c 	.word	0x2000031c
 80001c0:	200003bc 	.word	0x200003bc

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b5b0      	push	{r4, r5, r7, lr}
 80001c6:	b09c      	sub	sp, #112	@ 0x70
 80001c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ca:	f000 fe25 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f87d 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f000 f9cd 	bl	8000570 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d6:	f000 f8b5 	bl	8000344 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001da:	f000 f905 	bl	80003e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001de:	f000 f94f 	bl	8000480 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 f99b 	bl	800051c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	user_uart_send_msg(&huart1, UART_CONNECT_MSG);
 80001e6:	492e      	ldr	r1, [pc, #184]	@ (80002a0 <main+0xdc>)
 80001e8:	482e      	ldr	r0, [pc, #184]	@ (80002a4 <main+0xe0>)
 80001ea:	f000 fdb7 	bl	8000d5c <user_uart_send_msg>
	user_uart_send_msg(&huart1, "[Done] Devices Init.");
 80001ee:	492e      	ldr	r1, [pc, #184]	@ (80002a8 <main+0xe4>)
 80001f0:	482c      	ldr	r0, [pc, #176]	@ (80002a4 <main+0xe0>)
 80001f2:	f000 fdb3 	bl	8000d5c <user_uart_send_msg>
	user_gpio_led_off_all();
 80001f6:	f000 fbeb 	bl	80009d0 <user_gpio_led_off_all>
	user_uart_send_msg(&huart1, "[Done] user_gpio_led_off_all.");
 80001fa:	492c      	ldr	r1, [pc, #176]	@ (80002ac <main+0xe8>)
 80001fc:	4829      	ldr	r0, [pc, #164]	@ (80002a4 <main+0xe0>)
 80001fe:	f000 fdad 	bl	8000d5c <user_uart_send_msg>
	//HAL_TIM_Base_Start_IT(&htim1);
	//HAL_TIM_Base_Start_IT(&htim2);
	//HAL_TIM_Base_Start_IT(&htim3);
	//user_uart_send_msg(&huart1, "[Done] Timer Interrupt Start.");

	sprintf((char*)buf, "main() addr = %p", &main);		// Code
 8000202:	f107 031c 	add.w	r3, r7, #28
 8000206:	4a2a      	ldr	r2, [pc, #168]	@ (80002b0 <main+0xec>)
 8000208:	492a      	ldr	r1, [pc, #168]	@ (80002b4 <main+0xf0>)
 800020a:	4618      	mov	r0, r3
 800020c:	f005 f9d6 	bl	80055bc <siprintf>
	user_uart_send_msg(&huart1, buf);
 8000210:	f107 031c 	add.w	r3, r7, #28
 8000214:	4619      	mov	r1, r3
 8000216:	4823      	ldr	r0, [pc, #140]	@ (80002a4 <main+0xe0>)
 8000218:	f000 fda0 	bl	8000d5c <user_uart_send_msg>

	sprintf((char*)buf, "TaskHandle addr = %p", defaultTaskHandle);	// Global
 800021c:	4b26      	ldr	r3, [pc, #152]	@ (80002b8 <main+0xf4>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	f107 031c 	add.w	r3, r7, #28
 8000224:	4925      	ldr	r1, [pc, #148]	@ (80002bc <main+0xf8>)
 8000226:	4618      	mov	r0, r3
 8000228:	f005 f9c8 	bl	80055bc <siprintf>
	user_uart_send_msg(&huart1, buf);
 800022c:	f107 031c 	add.w	r3, r7, #28
 8000230:	4619      	mov	r1, r3
 8000232:	481c      	ldr	r0, [pc, #112]	@ (80002a4 <main+0xe0>)
 8000234:	f000 fd92 	bl	8000d5c <user_uart_send_msg>

	sprintf((char*)buf, "user_var addr = %p", &user_var);		// Stadck
 8000238:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800023c:	f107 031c 	add.w	r3, r7, #28
 8000240:	491f      	ldr	r1, [pc, #124]	@ (80002c0 <main+0xfc>)
 8000242:	4618      	mov	r0, r3
 8000244:	f005 f9ba 	bl	80055bc <siprintf>
	user_uart_send_msg(&huart1, buf);
 8000248:	f107 031c 	add.w	r3, r7, #28
 800024c:	4619      	mov	r1, r3
 800024e:	4815      	ldr	r0, [pc, #84]	@ (80002a4 <main+0xe0>)
 8000250:	f000 fd84 	bl	8000d5c <user_uart_send_msg>

	sprintf((char*)buf, "TIM2 addr = %p", TIM2);		// device addr
 8000254:	f107 031c 	add.w	r3, r7, #28
 8000258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800025c:	4919      	ldr	r1, [pc, #100]	@ (80002c4 <main+0x100>)
 800025e:	4618      	mov	r0, r3
 8000260:	f005 f9ac 	bl	80055bc <siprintf>
	user_uart_send_msg(&huart1, buf);
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	4619      	mov	r1, r3
 800026a:	480e      	ldr	r0, [pc, #56]	@ (80002a4 <main+0xe0>)
 800026c:	f000 fd76 	bl	8000d5c <user_uart_send_msg>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000270:	4b15      	ldr	r3, [pc, #84]	@ (80002c8 <main+0x104>)
 8000272:	463c      	mov	r4, r7
 8000274:	461d      	mov	r5, r3
 8000276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000282:	463b      	mov	r3, r7
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 facd 	bl	8002826 <osThreadCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <main+0xf4>)
 8000290:	6013      	str	r3, [r2, #0]
  //defaultTaskHandle2 = osThreadCreate(osThread(defaultTask2), NULL);


  /* USER CODE BEGIN RTOS_THREADS */
  //task01_thread_create();
  task02_thread_create();		//Thread
 8000292:	f000 fd2f 	bl	8000cf4 <task02_thread_create>
  //task07_thread_create();		//Message Queue
  //task08_thread_create();		//Timer
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000296:	f002 faaf 	bl	80027f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029a:	bf00      	nop
 800029c:	e7fd      	b.n	800029a <main+0xd6>
 800029e:	bf00      	nop
 80002a0:	08005fe0 	.word	0x08005fe0
 80002a4:	20000894 	.word	0x20000894
 80002a8:	08005ff0 	.word	0x08005ff0
 80002ac:	08006008 	.word	0x08006008
 80002b0:	080001c5 	.word	0x080001c5
 80002b4:	08006028 	.word	0x08006028
 80002b8:	200008dc 	.word	0x200008dc
 80002bc:	0800603c 	.word	0x0800603c
 80002c0:	08006054 	.word	0x08006054
 80002c4:	08006068 	.word	0x08006068
 80002c8:	08006084 	.word	0x08006084

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	@ 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	@ 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f005 f98e 	bl	80055fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f8c6 	bl	8001494 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030e:	f000 f9c3 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fb34 	bl	8001998 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000336:	f000 f9af 	bl	8000698 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	@ 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000360:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <MX_TIM1_Init+0xa0>)
 8000364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 8000366:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 8000368:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800036c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000374:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 8000376:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800037a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038e:	4814      	ldr	r0, [pc, #80]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 8000390:	f001 fc90 	bl	8001cb4 <HAL_TIM_Base_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800039a:	f000 f97d 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a4:	f107 0308 	add.w	r3, r7, #8
 80003a8:	4619      	mov	r1, r3
 80003aa:	480d      	ldr	r0, [pc, #52]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 80003ac:	f001 fdd9 	bl	8001f62 <HAL_TIM_ConfigClockSource>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80003b6:	f000 f96f 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c2:	463b      	mov	r3, r7
 80003c4:	4619      	mov	r1, r3
 80003c6:	4806      	ldr	r0, [pc, #24]	@ (80003e0 <MX_TIM1_Init+0x9c>)
 80003c8:	f001 ffae 	bl	8002328 <HAL_TIMEx_MasterConfigSynchronization>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80003d2:	f000 f961 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200007bc 	.word	0x200007bc
 80003e4:	40012c00 	.word	0x40012c00

080003e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000404:	4b1d      	ldr	r3, [pc, #116]	@ (800047c <MX_TIM2_Init+0x94>)
 8000406:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800040a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 800040c:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <MX_TIM2_Init+0x94>)
 800040e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b19      	ldr	r3, [pc, #100]	@ (800047c <MX_TIM2_Init+0x94>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800041a:	4b18      	ldr	r3, [pc, #96]	@ (800047c <MX_TIM2_Init+0x94>)
 800041c:	2264      	movs	r2, #100	@ 0x64
 800041e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b16      	ldr	r3, [pc, #88]	@ (800047c <MX_TIM2_Init+0x94>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b15      	ldr	r3, [pc, #84]	@ (800047c <MX_TIM2_Init+0x94>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800042c:	4813      	ldr	r0, [pc, #76]	@ (800047c <MX_TIM2_Init+0x94>)
 800042e:	f001 fc41 	bl	8001cb4 <HAL_TIM_Base_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000438:	f000 f92e 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000440:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	4619      	mov	r1, r3
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <MX_TIM2_Init+0x94>)
 800044a:	f001 fd8a 	bl	8001f62 <HAL_TIM_ConfigClockSource>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000454:	f000 f920 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_TIM2_Init+0x94>)
 8000466:	f001 ff5f 	bl	8002328 <HAL_TIMEx_MasterConfigSynchronization>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000470:	f000 f912 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000804 	.word	0x20000804

08000480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000494:	463b      	mov	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049c:	4b1d      	ldr	r3, [pc, #116]	@ (8000514 <MX_TIM3_Init+0x94>)
 800049e:	4a1e      	ldr	r2, [pc, #120]	@ (8000518 <MX_TIM3_Init+0x98>)
 80004a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80004a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80004a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 80004b0:	4b18      	ldr	r3, [pc, #96]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004b2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80004b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004c4:	4813      	ldr	r0, [pc, #76]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004c6:	f001 fbf5 	bl	8001cb4 <HAL_TIM_Base_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80004d0:	f000 f8e2 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	4619      	mov	r1, r3
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004e2:	f001 fd3e 	bl	8001f62 <HAL_TIM_ConfigClockSource>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80004ec:	f000 f8d4 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004f8:	463b      	mov	r3, r7
 80004fa:	4619      	mov	r1, r3
 80004fc:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_TIM3_Init+0x94>)
 80004fe:	f001 ff13 	bl	8002328 <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000508:	f000 f8c6 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000084c 	.word	0x2000084c
 8000518:	40000400 	.word	0x40000400

0800051c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	@ (800056c <MX_USART1_UART_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000554:	f001 ff58 	bl	8002408 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800055e:	f000 f89b 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000894 	.word	0x20000894
 800056c:	40013800 	.word	0x40013800

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000584:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <MX_GPIO_Init+0xf0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a35      	ldr	r2, [pc, #212]	@ (8000660 <MX_GPIO_Init+0xf0>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b33      	ldr	r3, [pc, #204]	@ (8000660 <MX_GPIO_Init+0xf0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0310 	and.w	r3, r3, #16
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b30      	ldr	r3, [pc, #192]	@ (8000660 <MX_GPIO_Init+0xf0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000660 <MX_GPIO_Init+0xf0>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <MX_GPIO_Init+0xf0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <MX_GPIO_Init+0xf0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a29      	ldr	r2, [pc, #164]	@ (8000660 <MX_GPIO_Init+0xf0>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <MX_GPIO_Init+0xf0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005cc:	2200      	movs	r2, #0
 80005ce:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80005d2:	4824      	ldr	r0, [pc, #144]	@ (8000664 <MX_GPIO_Init+0xf4>)
 80005d4:	f000 ff14 	bl	8001400 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80005de:	4822      	ldr	r0, [pc, #136]	@ (8000668 <MX_GPIO_Init+0xf8>)
 80005e0:	f000 ff0e 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005e4:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80005e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4819      	ldr	r0, [pc, #100]	@ (8000664 <MX_GPIO_Init+0xf4>)
 80005fe:	f000 fd7b 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000602:	2303      	movs	r3, #3
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_GPIO_Init+0xfc>)
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4816      	ldr	r0, [pc, #88]	@ (8000670 <MX_GPIO_Init+0x100>)
 8000616:	f000 fd6f 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800061a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	@ (8000668 <MX_GPIO_Init+0xf8>)
 8000634:	f000 fd60 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2105      	movs	r1, #5
 800063c:	2006      	movs	r0, #6
 800063e:	f000 fd24 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000642:	2006      	movs	r0, #6
 8000644:	f000 fd3d 	bl	80010c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2105      	movs	r1, #5
 800064c:	2007      	movs	r0, #7
 800064e:	f000 fd1c 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000652:	2007      	movs	r0, #7
 8000654:	f000 fd35 	bl	80010c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	40011000 	.word	0x40011000
 8000668:	40010c00 	.word	0x40010c00
 800066c:	10110000 	.word	0x10110000
 8000670:	40010800 	.word	0x40010800

08000674 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <StartDefaultTask+0x20>)
 8000682:	f000 fed5 	bl	8001430 <HAL_GPIO_TogglePin>
	  //user_uart_send_msg(&huart1, "[Task00] PB8 LED3 Blue.");
	  osDelay(1000);	//1000ms
 8000686:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068a:	f002 f918 	bl	80028be <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800068e:	bf00      	nop
 8000690:	e7f4      	b.n	800067c <StartDefaultTask+0x8>
 8000692:	bf00      	nop
 8000694:	40010c00 	.word	0x40010c00

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	210f      	movs	r1, #15
 80006de:	f06f 0001 	mvn.w	r0, #1
 80006e2:	f000 fcd2 	bl	800108a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a33      	ldr	r2, [pc, #204]	@ (80007d0 <HAL_TIM_Base_MspInit+0xdc>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000706:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a32      	ldr	r2, [pc, #200]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 800070c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b30      	ldr	r3, [pc, #192]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2105      	movs	r1, #5
 8000722:	2018      	movs	r0, #24
 8000724:	f000 fcb1 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000728:	2018      	movs	r0, #24
 800072a:	f000 fcca 	bl	80010c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2105      	movs	r1, #5
 8000732:	2019      	movs	r0, #25
 8000734:	f000 fca9 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000738:	2019      	movs	r0, #25
 800073a:	f000 fcc2 	bl	80010c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2105      	movs	r1, #5
 8000742:	201a      	movs	r0, #26
 8000744:	f000 fca1 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000748:	201a      	movs	r0, #26
 800074a:	f000 fcba 	bl	80010c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2105      	movs	r1, #5
 8000752:	201b      	movs	r0, #27
 8000754:	f000 fc99 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000758:	201b      	movs	r0, #27
 800075a:	f000 fcb2 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800075e:	e032      	b.n	80007c6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000768:	d114      	bne.n	8000794 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	201c      	movs	r0, #28
 8000788:	f000 fc7f 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800078c:	201c      	movs	r0, #28
 800078e:	f000 fc98 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 8000792:	e018      	b.n	80007c6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <HAL_TIM_Base_MspInit+0xe4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d113      	bne.n	80007c6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_TIM_Base_MspInit+0xe0>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2105      	movs	r1, #5
 80007ba:	201d      	movs	r0, #29
 80007bc:	f000 fc65 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007c0:	201d      	movs	r0, #29
 80007c2:	f000 fc7e 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40012c00 	.word	0x40012c00
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40000400 	.word	0x40000400

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <HAL_UART_MspInit+0x8c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d131      	bne.n	8000860 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <HAL_UART_MspInit+0x90>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a1a      	ldr	r2, [pc, #104]	@ (800086c <HAL_UART_MspInit+0x90>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <HAL_UART_MspInit+0x90>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HAL_UART_MspInit+0x90>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a14      	ldr	r2, [pc, #80]	@ (800086c <HAL_UART_MspInit+0x90>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_UART_MspInit+0x90>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800082c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <HAL_UART_MspInit+0x94>)
 8000842:	f000 fc59 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <HAL_UART_MspInit+0x94>)
 800085c:	f000 fc4c 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40013800 	.word	0x40013800
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 fafa 	bl	8000ea4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008b0:	f003 fea4 	bl	80045fc <xTaskGetSchedulerState>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d001      	beq.n	80008be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ba:	f004 fc1d 	bl	80050f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fdcc 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008d4:	2002      	movs	r0, #2
 80008d6:	f000 fdc5 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <TIM1_BRK_IRQHandler+0x10>)
 80008e6:	f001 fa34 	bl	8001d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200007bc 	.word	0x200007bc

080008f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <TIM1_UP_IRQHandler+0x10>)
 80008fa:	f001 fa2a 	bl	8001d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200007bc 	.word	0x200007bc

08000908 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <TIM1_TRG_COM_IRQHandler+0x10>)
 800090e:	f001 fa20 	bl	8001d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200007bc 	.word	0x200007bc

0800091c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <TIM1_CC_IRQHandler+0x10>)
 8000922:	f001 fa16 	bl	8001d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200007bc 	.word	0x200007bc

08000930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM2_IRQHandler+0x10>)
 8000936:	f001 fa0c 	bl	8001d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000804 	.word	0x20000804

08000944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <TIM3_IRQHandler+0x10>)
 800094a:	f001 fa02 	bl	8001d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000084c 	.word	0x2000084c

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f004 fe96 	bl	80056b8 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20005000 	.word	0x20005000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200008e0 	.word	0x200008e0
 80009c0:	20001a10 	.word	0x20001a10

080009c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <user_gpio_led_off_all>:

#include "user-gpio.h"


void user_gpio_led_off_all(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	/* GPIO pins : PB5(GPIO_PIN_5), PB8(GPIO_PIN_8), PB9(GPIO_PIN_9) */
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_1Y, USER_GPIO_LED_OFF);		//Yellow, Off
 80009d4:	2201      	movs	r2, #1
 80009d6:	2120      	movs	r1, #32
 80009d8:	4808      	ldr	r0, [pc, #32]	@ (80009fc <user_gpio_led_off_all+0x2c>)
 80009da:	f000 fd11 	bl	8001400 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_2R, USER_GPIO_LED_OFF);		//Red, Off
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <user_gpio_led_off_all+0x2c>)
 80009e6:	f000 fd0b 	bl	8001400 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_3B, USER_GPIO_LED_OFF); 		//Blue, Off
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <user_gpio_led_off_all+0x2c>)
 80009f2:	f000 fd05 	bl	8001400 <HAL_GPIO_WritePin>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <user_gpio_led_off_yellow>:
{
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_1Y, USER_GPIO_LED_ON);
}

void user_gpio_led_off_yellow(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_1Y, USER_GPIO_LED_OFF);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2120      	movs	r1, #32
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <user_gpio_led_off_yellow+0x14>)
 8000a0a:	f000 fcf9 	bl	8001400 <HAL_GPIO_WritePin>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <user_gpio_led_off_red>:
{
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_2R, USER_GPIO_LED_ON);
}

void user_gpio_led_off_red(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_2R, USER_GPIO_LED_OFF);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a22:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <user_gpio_led_off_red+0x14>)
 8000a24:	f000 fcec 	bl	8001400 <HAL_GPIO_WritePin>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <user_gpio_fnd_clear>:
	//FND Anode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, USER_GPIO_LED_OFF);		//FND_A_DP
}

void user_gpio_fnd_clear(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	//FND Anode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, USER_GPIO_LED_ON);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <user_gpio_fnd_clear+0x20>)
 8000a3c:	f000 fce0 	bl	8001400 <HAL_GPIO_WritePin>

	/* GPIO pins : PC0 ~ PC8 */
	//GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
	//GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_ALL, USER_GPIO_LED_OFF);
 8000a40:	2201      	movs	r2, #1
 8000a42:	21ff      	movs	r1, #255	@ 0xff
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <user_gpio_fnd_clear+0x20>)
 8000a46:	f000 fcdb 	bl	8001400 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40011000 	.word	0x40011000

08000a54 <user_gpio_fnd_digit>:
	HAL_Delay(1000);
	user_gpio_fnd_on_0();
}

void user_gpio_fnd_digit(int digit)
{
 8000a54:	b5b0      	push	{r4, r5, r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint16_t fnd_digit[] = { USER_GPIO_PIN_FND_0, USER_GPIO_PIN_FND_1, USER_GPIO_PIN_FND_2, USER_GPIO_PIN_FND_3
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <user_gpio_fnd_digit+0x40>)
 8000a5e:	f107 0408 	add.w	r4, r7, #8
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a6c:	6020      	str	r0, [r4, #0]
 8000a6e:	3404      	adds	r4, #4
 8000a70:	8021      	strh	r1, [r4, #0]
			, USER_GPIO_PIN_FND_4, USER_GPIO_PIN_FND_5, USER_GPIO_PIN_FND_6, USER_GPIO_PIN_FND_7
			, USER_GPIO_PIN_FND_8, USER_GPIO_PIN_FND_9, USER_GPIO_PIN_FND_ALL };

	user_gpio_fnd_clear();
 8000a72:	f7ff ffdd 	bl	8000a30 <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, fnd_digit[digit], USER_GPIO_LED_ON);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <user_gpio_fnd_digit+0x44>)
 8000a88:	f000 fcba 	bl	8001400 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bdb0      	pop	{r4, r5, r7, pc}
 8000a94:	080060bc 	.word	0x080060bc
 8000a98:	40011000 	.word	0x40011000

08000a9c <HAL_GPIO_EXTI_Callback>:
		//HAL_UART_Transmit(huart, UartRxData, Size, 10);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
	if (sw_count_flag < 10)		//100ms x 10 == 1000ms
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	dd1f      	ble.n	8000aee <HAL_GPIO_EXTI_Callback+0x52>
	//if (sw_count_flag < 50)			//DEAN 50ms x 10 == 500ms
		return;

	if (GPIO_Pin == GPIO_PIN_0) {
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d107      	bne.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_1Y);
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	4811      	ldr	r0, [pc, #68]	@ (8000afc <HAL_GPIO_EXTI_Callback+0x60>)
 8000ab8:	f000 fcba 	bl	8001430 <HAL_GPIO_TogglePin>
		//user_gpio_fnd_on_1();
		user_uart_send_msg(&huart1, "[GPIO0 Interrupt] PB5 LED1 Yellow.");
 8000abc:	4910      	ldr	r1, [pc, #64]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x64>)
 8000abe:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ac0:	f000 f94c 	bl	8000d5c <user_uart_send_msg>
	}

	if (GPIO_Pin == GPIO_PIN_1) {
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10d      	bne.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x4a>
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_2R);
 8000aca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ace:	480b      	ldr	r0, [pc, #44]	@ (8000afc <HAL_GPIO_EXTI_Callback+0x60>)
 8000ad0:	f000 fcae 	bl	8001430 <HAL_GPIO_TogglePin>
		//user_gpio_fnd_on_2();
		user_uart_send_msg(&huart1, "[GPIO1 Interrupt] PB9 LED2 Red.");
 8000ad4:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ad6:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ad8:	f000 f940 	bl	8000d5c <user_uart_send_msg>

		//user-task04.c
		osSemaphoreRelease(osSemaphoreISR);
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x70>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 ff01 	bl	80028e8 <osSemaphoreRelease>
	}

	sw_count_flag = 0;
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_EXTI_Callback+0x54>
		return;
 8000aee:	bf00      	nop
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200008e4 	.word	0x200008e4
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	08006114 	.word	0x08006114
 8000b04:	20000894 	.word	0x20000894
 8000b08:	08006138 	.word	0x08006138
 8000b0c:	20000994 	.word	0x20000994

08000b10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    static uint32_t cnt=0;

    //SYSCLK == HCLK == 8Mhz
    //Prescaler == 8000, Period == HCLK / Prescaler == 1KHz(1ms)
    //Counter == 1000, Interval Time == Period * Counter == 1ms x 1000 == 1s
    if (htim->Instance == TIM1) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d118      	bne.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x44>
    	user_gpio_fnd_digit(cnt++);
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	491c      	ldr	r1, [pc, #112]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b2a:	600a      	str	r2, [r1, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff91 	bl	8000a54 <user_gpio_fnd_digit>
    	user_uart_send_msg(&huart1, "[Timer1 Interrupt] Running...");
 8000b32:	491b      	ldr	r1, [pc, #108]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b34:	481b      	ldr	r0, [pc, #108]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b36:	f000 f911 	bl	8000d5c <user_uart_send_msg>
    	cnt %= 10;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b40:	fba3 2301 	umull	r2, r3, r3, r1
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	1aca      	subs	r2, r1, r3
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b52:	601a      	str	r2, [r3, #0]
    }

    if (htim->Instance == TIM2) {	//10ms	//DEAN -> 100ms
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b5c:	d109      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x62>
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_2R);	//Red	//DEAN
 8000b5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b62:	4812      	ldr	r0, [pc, #72]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b64:	f000 fc64 	bl	8001430 <HAL_GPIO_TogglePin>
    	//user_uart_send_msg(&huart1, "[Timer2 Interrupt] Running...");
		sw_count_flag++;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b70:	6013      	str	r3, [r2, #0]
	}

    if (htim->Instance == TIM3) {		//DEAN -> 3000ms
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d108      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_3B);	//Blue	//DEAN
 8000b7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b80:	480a      	ldr	r0, [pc, #40]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b82:	f000 fc55 	bl	8001430 <HAL_GPIO_TogglePin>
		user_uart_send_msg(&huart1, "[Timer3 Interrupt] Running...");
 8000b86:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000b88:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b8a:	f000 f8e7 	bl	8000d5c <user_uart_send_msg>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	200008e8 	.word	0x200008e8
 8000ba0:	08006158 	.word	0x08006158
 8000ba4:	20000894 	.word	0x20000894
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	200008e4 	.word	0x200008e4
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	08006178 	.word	0x08006178

08000bbc <LED_Thread1>:
static char StringBuf[UART_BUF_SIZE];

osThreadId LEDThread1Handle, LEDThread2Handle;

static void LED_Thread1(void const *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
	(void) argument;

	for(;;)
	{
		count = osKernelSysTick() + 5000;
 8000bc8:	f001 fe1d 	bl	8002806 <osKernelSysTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	60fb      	str	r3, [r7, #12]
		user_uart_send_msg(&huart1, "[LED Thread1] Starting...");
 8000bd6:	4923      	ldr	r1, [pc, #140]	@ (8000c64 <LED_Thread1+0xa8>)
 8000bd8:	4823      	ldr	r0, [pc, #140]	@ (8000c68 <LED_Thread1+0xac>)
 8000bda:	f000 f8bf 	bl	8000d5c <user_uart_send_msg>

		/* Toggle LED1 every 200 ms for 5 s */
		while (count >= osKernelSysTick()) {
 8000bde:	e016      	b.n	8000c0e <LED_Thread1+0x52>
			uint32_t tick;		//DEAN
			HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_1Y);
 8000be0:	2120      	movs	r1, #32
 8000be2:	4822      	ldr	r0, [pc, #136]	@ (8000c6c <LED_Thread1+0xb0>)
 8000be4:	f000 fc24 	bl	8001430 <HAL_GPIO_TogglePin>
			user_uart_send_msg(&huart1, "[LED Thread1] LED1 Toggle each 200ms.");
 8000be8:	4921      	ldr	r1, [pc, #132]	@ (8000c70 <LED_Thread1+0xb4>)
 8000bea:	481f      	ldr	r0, [pc, #124]	@ (8000c68 <LED_Thread1+0xac>)
 8000bec:	f000 f8b6 	bl	8000d5c <user_uart_send_msg>
			osDelay(200);
 8000bf0:	20c8      	movs	r0, #200	@ 0xc8
 8000bf2:	f001 fe64 	bl	80028be <osDelay>
			//DEAN Add tick
			tick = osKernelSysTick();
 8000bf6:	f001 fe06 	bl	8002806 <osKernelSysTick>
 8000bfa:	60b8      	str	r0, [r7, #8]
			sprintf((char*)StringBuf, "tick = %u", tick);
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	491d      	ldr	r1, [pc, #116]	@ (8000c74 <LED_Thread1+0xb8>)
 8000c00:	481d      	ldr	r0, [pc, #116]	@ (8000c78 <LED_Thread1+0xbc>)
 8000c02:	f004 fcdb 	bl	80055bc <siprintf>
			user_uart_send_msg(&huart1, StringBuf);
 8000c06:	491c      	ldr	r1, [pc, #112]	@ (8000c78 <LED_Thread1+0xbc>)
 8000c08:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <LED_Thread1+0xac>)
 8000c0a:	f000 f8a7 	bl	8000d5c <user_uart_send_msg>
		while (count >= osKernelSysTick()) {
 8000c0e:	f001 fdfa 	bl	8002806 <osKernelSysTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d2e2      	bcs.n	8000be0 <LED_Thread1+0x24>
		}

		/* Turn off LED1 */
		user_gpio_led_off_yellow();
 8000c1a:	f7ff fef1 	bl	8000a00 <user_gpio_led_off_yellow>

		/* Suspend Thread 1 */
		osThreadSuspend(NULL);		//NULL = itself
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f001 fe98 	bl	8002954 <osThreadSuspend>

		count = osKernelSysTick() + 5000;
 8000c24:	f001 fdef 	bl	8002806 <osKernelSysTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000c2e:	3308      	adds	r3, #8
 8000c30:	60fb      	str	r3, [r7, #12]

		/* Toggle LED1 every 400 ms for 5 s */
		while (count >= osKernelSysTick()) {
 8000c32:	e00b      	b.n	8000c4c <LED_Thread1+0x90>
			HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_1Y);
 8000c34:	2120      	movs	r1, #32
 8000c36:	480d      	ldr	r0, [pc, #52]	@ (8000c6c <LED_Thread1+0xb0>)
 8000c38:	f000 fbfa 	bl	8001430 <HAL_GPIO_TogglePin>
			user_uart_send_msg(&huart1, "[LED Thread1] LED1 Yellow Toggle each 400ms.");
 8000c3c:	490f      	ldr	r1, [pc, #60]	@ (8000c7c <LED_Thread1+0xc0>)
 8000c3e:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <LED_Thread1+0xac>)
 8000c40:	f000 f88c 	bl	8000d5c <user_uart_send_msg>
			osDelay(400);
 8000c44:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000c48:	f001 fe39 	bl	80028be <osDelay>
		while (count >= osKernelSysTick()) {
 8000c4c:	f001 fddb 	bl	8002806 <osKernelSysTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d2ed      	bcs.n	8000c34 <LED_Thread1+0x78>
		}

		/* Resume Thread 2*/
		osThreadResume(LEDThread2Handle);
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <LED_Thread1+0xc4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fe85 	bl	800296c <osThreadResume>
		count = osKernelSysTick() + 5000;
 8000c62:	e7b1      	b.n	8000bc8 <LED_Thread1+0xc>
 8000c64:	08006198 	.word	0x08006198
 8000c68:	20000894 	.word	0x20000894
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	080061b4 	.word	0x080061b4
 8000c74:	080061dc 	.word	0x080061dc
 8000c78:	200008ec 	.word	0x200008ec
 8000c7c:	080061e8 	.word	0x080061e8
 8000c80:	20000990 	.word	0x20000990

08000c84 <LED_Thread2>:
	}
}

static void LED_Thread2(void const *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint32_t count;
	(void) argument;

	for(;;)
	{
		count = osKernelSysTick() + 10000;
 8000c8c:	f001 fdbb 	bl	8002806 <osKernelSysTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000c96:	3310      	adds	r3, #16
 8000c98:	60fb      	str	r3, [r7, #12]
		user_uart_send_msg(&huart1, "[LED Thread2] Starting...");
 8000c9a:	4911      	ldr	r1, [pc, #68]	@ (8000ce0 <LED_Thread2+0x5c>)
 8000c9c:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <LED_Thread2+0x60>)
 8000c9e:	f000 f85d 	bl	8000d5c <user_uart_send_msg>

		/* Toggle LED2 every 500 ms for 10 s */
		while (count >= osKernelSysTick()) {
 8000ca2:	e00c      	b.n	8000cbe <LED_Thread2+0x3a>
			HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_2R);
 8000ca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca8:	480f      	ldr	r0, [pc, #60]	@ (8000ce8 <LED_Thread2+0x64>)
 8000caa:	f000 fbc1 	bl	8001430 <HAL_GPIO_TogglePin>
			user_uart_send_msg(&huart1, "[LED Thread2] LED2 Red Toggle each 500ms.");
 8000cae:	490f      	ldr	r1, [pc, #60]	@ (8000cec <LED_Thread2+0x68>)
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LED_Thread2+0x60>)
 8000cb2:	f000 f853 	bl	8000d5c <user_uart_send_msg>
			osDelay(500);
 8000cb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cba:	f001 fe00 	bl	80028be <osDelay>
		while (count >= osKernelSysTick()) {
 8000cbe:	f001 fda2 	bl	8002806 <osKernelSysTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d2ec      	bcs.n	8000ca4 <LED_Thread2+0x20>
		}

		/* Turn off LED2 */
		user_gpio_led_off_red();
 8000cca:	f7ff fea5 	bl	8000a18 <user_gpio_led_off_red>

		/* Resume Thread 1 */
		osThreadResume(LEDThread1Handle);
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <LED_Thread2+0x6c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fe4a 	bl	800296c <osThreadResume>

		/* Suspend Thread 2 */
		osThreadSuspend(NULL);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f001 fe3b 	bl	8002954 <osThreadSuspend>
		count = osKernelSysTick() + 10000;
 8000cde:	e7d5      	b.n	8000c8c <LED_Thread2+0x8>
 8000ce0:	08006218 	.word	0x08006218
 8000ce4:	20000894 	.word	0x20000894
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	08006234 	.word	0x08006234
 8000cf0:	2000098c 	.word	0x2000098c

08000cf4 <task02_thread_create>:
	}
}

void task02_thread_create(void)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b08e      	sub	sp, #56	@ 0x38
 8000cf8:	af00      	add	r7, sp, #0
	/* Thread 1 definition */
	osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <task02_thread_create+0x58>)
 8000cfc:	f107 041c 	add.w	r4, r7, #28
 8000d00:	461d      	mov	r5, r3
 8000d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/*  Thread 2 definition */
	osThreadDef(LED2, LED_Thread2, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <task02_thread_create+0x5c>)
 8000d10:	463c      	mov	r4, r7
 8000d12:	461d      	mov	r5, r3
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/* Start thread 1 */
	LEDThread1Handle = osThreadCreate (osThread(LED1), NULL);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fd7d 	bl	8002826 <osThreadCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <task02_thread_create+0x60>)
 8000d30:	6013      	str	r3, [r2, #0]

	/* Start thread 2 */
	LEDThread2Handle = osThreadCreate (osThread(LED2), NULL);
 8000d32:	463b      	mov	r3, r7
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fd75 	bl	8002826 <osThreadCreate>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <task02_thread_create+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3738      	adds	r7, #56	@ 0x38
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08006268 	.word	0x08006268
 8000d50:	0800628c 	.word	0x0800628c
 8000d54:	2000098c 	.word	0x2000098c
 8000d58:	20000990 	.word	0x20000990

08000d5c <user_uart_send_msg>:
    	HAL_UART_Transmit(huart, (const uint8_t *)UART_ENTER, 1, UART_TIMEOUT);
}


void user_uart_send_msg(UART_HandleTypeDef *huart, const char *msg)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
    uint32_t len;

    len = strlen((const char *)msg);
 8000d66:	6838      	ldr	r0, [r7, #0]
 8000d68:	f7ff f9f2 	bl	8000150 <strlen>
 8000d6c:	60f8      	str	r0, [r7, #12]
    if (msg[len-1] == '\r') {
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b0d      	cmp	r3, #13
 8000d7a:	d109      	bne.n	8000d90 <user_uart_send_msg+0x34>
        sprintf((char *)UartBuf, "%s%s", msg, UART_ENTER);
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <user_uart_send_msg+0x60>)
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	490f      	ldr	r1, [pc, #60]	@ (8000dc0 <user_uart_send_msg+0x64>)
 8000d82:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <user_uart_send_msg+0x68>)
 8000d84:	f004 fc1a 	bl	80055bc <siprintf>
        len += 1;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e008      	b.n	8000da2 <user_uart_send_msg+0x46>
    } else {
        sprintf((char *)UartBuf, "%s%s", msg, UART_NEWLINE);
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <user_uart_send_msg+0x6c>)
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	490a      	ldr	r1, [pc, #40]	@ (8000dc0 <user_uart_send_msg+0x64>)
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <user_uart_send_msg+0x68>)
 8000d98:	f004 fc10 	bl	80055bc <siprintf>
        len += 2;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit(huart, (const uint8_t *)UartBuf, len, UART_TIMEOUT);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000daa:	4906      	ldr	r1, [pc, #24]	@ (8000dc4 <user_uart_send_msg+0x68>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f001 fb7b 	bl	80024a8 <HAL_UART_Transmit>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	080062a8 	.word	0x080062a8
 8000dc0:	080062ac 	.word	0x080062ac
 8000dc4:	20000998 	.word	0x20000998
 8000dc8:	080062b4 	.word	0x080062b4

08000dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dcc:	f7ff fdfa 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dd2:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000de8:	4c09      	ldr	r4, [pc, #36]	@ (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f004 fc65 	bl	80056c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff f9e3 	bl	80001c4 <main>
  bx lr
 8000dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e08:	08006340 	.word	0x08006340
  ldr r2, =_sbss
 8000e0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e10:	20001a0c 	.word	0x20001a0c

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f923 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fc36 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f93b 	bl	80010de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f903 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a03      	ldr	r2, [pc, #12]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000a38 	.word	0x20000a38

08000ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	@ (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000a38 	.word	0x20000a38

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4906      	ldr	r1, [pc, #24]	@ (8000f74 <__NVIC_EnableIRQ+0x34>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff90 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2d 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff42 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff35 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	@ 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e169      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8158 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4a9a      	ldr	r2, [pc, #616]	@ (8001398 <HAL_GPIO_Init+0x2a0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d05e      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001134:	4a98      	ldr	r2, [pc, #608]	@ (8001398 <HAL_GPIO_Init+0x2a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d875      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800113a:	4a98      	ldr	r2, [pc, #608]	@ (800139c <HAL_GPIO_Init+0x2a4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d058      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001140:	4a96      	ldr	r2, [pc, #600]	@ (800139c <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d86f      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001146:	4a96      	ldr	r2, [pc, #600]	@ (80013a0 <HAL_GPIO_Init+0x2a8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d052      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 800114c:	4a94      	ldr	r2, [pc, #592]	@ (80013a0 <HAL_GPIO_Init+0x2a8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d869      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001152:	4a94      	ldr	r2, [pc, #592]	@ (80013a4 <HAL_GPIO_Init+0x2ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04c      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001158:	4a92      	ldr	r2, [pc, #584]	@ (80013a4 <HAL_GPIO_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d863      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800115e:	4a92      	ldr	r2, [pc, #584]	@ (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d046      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001164:	4a90      	ldr	r2, [pc, #576]	@ (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d85d      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d82a      	bhi.n	80011c4 <HAL_GPIO_Init+0xcc>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d859      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001172:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <HAL_GPIO_Init+0x80>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011df 	.word	0x080011df
 8001184:	08001221 	.word	0x08001221
 8001188:	08001227 	.word	0x08001227
 800118c:	08001227 	.word	0x08001227
 8001190:	08001227 	.word	0x08001227
 8001194:	08001227 	.word	0x08001227
 8001198:	08001227 	.word	0x08001227
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001227 	.word	0x08001227
 80011a4:	08001227 	.word	0x08001227
 80011a8:	08001227 	.word	0x08001227
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001227 	.word	0x08001227
 80011b4:	08001227 	.word	0x08001227
 80011b8:	08001227 	.word	0x08001227
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	4a79      	ldr	r2, [pc, #484]	@ (80013ac <HAL_GPIO_Init+0x2b4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e029      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e024      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01f      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e01a      	b.n	8001228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e013      	b.n	8001228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e009      	b.n	8001228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e003      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x130>
          break;
 8001226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	@ 0xff
 800122c:	d801      	bhi.n	8001232 <HAL_GPIO_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_Init+0x13e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	@ 0xff
 800123c:	d802      	bhi.n	8001244 <HAL_GPIO_Init+0x14c>
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x152>
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	3b08      	subs	r3, #8
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	210f      	movs	r1, #15
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80b1 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a4c      	ldr	r2, [pc, #304]	@ (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001290:	4a48      	ldr	r2, [pc, #288]	@ (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <HAL_GPIO_Init+0x2c0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a3f      	ldr	r2, [pc, #252]	@ (80013bc <HAL_GPIO_Init+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3e      	ldr	r2, [pc, #248]	@ (80013c0 <HAL_GPIO_Init+0x2c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3d      	ldr	r2, [pc, #244]	@ (80013c4 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012d8:	2304      	movs	r3, #4
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	492f      	ldr	r1, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	492c      	ldr	r1, [pc, #176]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4928      	ldr	r1, [pc, #160]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	4922      	ldr	r1, [pc, #136]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	491e      	ldr	r1, [pc, #120]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4918      	ldr	r1, [pc, #96]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4914      	ldr	r1, [pc, #80]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	490e      	ldr	r1, [pc, #56]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e021      	b.n	80013da <HAL_GPIO_Init+0x2e2>
 8001396:	bf00      	nop
 8001398:	10320000 	.word	0x10320000
 800139c:	10310000 	.word	0x10310000
 80013a0:	10220000 	.word	0x10220000
 80013a4:	10210000 	.word	0x10210000
 80013a8:	10120000 	.word	0x10120000
 80013ac:	10110000 	.word	0x10110000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40010800 	.word	0x40010800
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40011400 	.word	0x40011400
 80013c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4909      	ldr	r1, [pc, #36]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae8e 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	372c      	adds	r7, #44	@ 0x2c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43d9      	mvns	r1, r3
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	400b      	ands	r3, r1
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb0a 	bl	8000a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e272      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8087 	beq.w	80015c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b4:	4b92      	ldr	r3, [pc, #584]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d00c      	beq.n	80014da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d112      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
 80014cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d8:	d10b      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014da:	4b89      	ldr	r3, [pc, #548]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d06c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x12c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d168      	bne.n	80015c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e24c      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x76>
 80014fc:	4b80      	ldr	r3, [pc, #512]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a7f      	ldr	r2, [pc, #508]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e02e      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b7b      	ldr	r3, [pc, #492]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a7a      	ldr	r2, [pc, #488]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a77      	ldr	r2, [pc, #476]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001524:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0xbc>
 8001536:	4b72      	ldr	r3, [pc, #456]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a71      	ldr	r2, [pc, #452]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b6f      	ldr	r3, [pc, #444]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6e      	ldr	r2, [pc, #440]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 8001550:	4b6b      	ldr	r3, [pc, #428]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6a      	ldr	r2, [pc, #424]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b68      	ldr	r3, [pc, #416]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a67      	ldr	r2, [pc, #412]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fcaa 	bl	8000ec8 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fca6 	bl	8000ec8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	@ 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e200      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b5d      	ldr	r3, [pc, #372]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xe4>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fc96 	bl	8000ec8 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fc92 	bl	8000ec8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	@ 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1ec      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x10c>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015da:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x18c>
 80015e6:	4b46      	ldr	r3, [pc, #280]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b43      	ldr	r3, [pc, #268]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1c0      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4939      	ldr	r1, [pc, #228]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fc4b 	bl	8000ec8 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fc47 	bl	8000ec8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1a1      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4927      	ldr	r1, [pc, #156]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fc2a 	bl	8000ec8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc26 	bl	8000ec8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e180      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03a      	beq.n	8001718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fc0a 	bl	8000ec8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc06 	bl	8000ec8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e160      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f000 face 	bl	8001c78 <RCC_Delay>
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_RCC_OscConfig+0x274>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fbf0 	bl	8000ec8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ea:	e00f      	b.n	800170c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fbec 	bl	8000ec8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d908      	bls.n	800170c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e146      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	42420000 	.word	0x42420000
 8001708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b92      	ldr	r3, [pc, #584]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e9      	bne.n	80016ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a6 	beq.w	8001872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b8b      	ldr	r3, [pc, #556]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b88      	ldr	r3, [pc, #544]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a87      	ldr	r2, [pc, #540]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b85      	ldr	r3, [pc, #532]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b82      	ldr	r3, [pc, #520]	@ (800195c <HAL_RCC_OscConfig+0x4c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b7f      	ldr	r3, [pc, #508]	@ (800195c <HAL_RCC_OscConfig+0x4c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7e      	ldr	r2, [pc, #504]	@ (800195c <HAL_RCC_OscConfig+0x4c8>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fbad 	bl	8000ec8 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fba9 	bl	8000ec8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	@ 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e103      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b75      	ldr	r3, [pc, #468]	@ (800195c <HAL_RCC_OscConfig+0x4c8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x312>
 8001798:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e02d      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x334>
 80017ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a69      	ldr	r2, [pc, #420]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6213      	str	r3, [r2, #32]
 80017ba:	4b67      	ldr	r3, [pc, #412]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a66      	ldr	r2, [pc, #408]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	e01c      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x356>
 80017d0:	4b61      	ldr	r3, [pc, #388]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a60      	ldr	r2, [pc, #384]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	4b58      	ldr	r3, [pc, #352]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a57      	ldr	r2, [pc, #348]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fb5d 	bl	8000ec8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fb59 	bl	8000ec8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0b1      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ee      	beq.n	8001812 <HAL_RCC_OscConfig+0x37e>
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fb47 	bl	8000ec8 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fb43 	bl	8000ec8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e09b      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b3c      	ldr	r3, [pc, #240]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a3b      	ldr	r2, [pc, #236]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8087 	beq.w	800198a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d061      	beq.n	800194c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d146      	bne.n	800191e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fb17 	bl	8000ec8 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fb13 	bl	8000ec8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e06d      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	4b29      	ldr	r3, [pc, #164]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c6:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4921      	ldr	r1, [pc, #132]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a19      	ldr	r1, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	430b      	orrs	r3, r1
 80018ea:	491b      	ldr	r1, [pc, #108]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fae7 	bl	8000ec8 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff fae3 	bl	8000ec8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e03d      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x46a>
 800191c:	e035      	b.n	800198a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_RCC_OscConfig+0x4cc>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fad0 	bl	8000ec8 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff facc 	bl	8000ec8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e026      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x498>
 800194a:	e01e      	b.n	800198a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d107      	bne.n	8001964 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e019      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
 8001958:	40021000 	.word	0x40021000
 800195c:	40007000 	.word	0x40007000
 8001960:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_OscConfig+0x500>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	429a      	cmp	r2, r3
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0d0      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b67      	ldr	r3, [pc, #412]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4965      	ldr	r1, [pc, #404]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b63      	ldr	r3, [pc, #396]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b8      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a58      	ldr	r2, [pc, #352]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a52      	ldr	r2, [pc, #328]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	494d      	ldr	r1, [pc, #308]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d040      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d115      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e073      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06b      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f023 0203 	bic.w	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4936      	ldr	r1, [pc, #216]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7ff fa1e 	bl	8000ec8 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7ff fa1a 	bl	8000ec8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e053      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 020c 	and.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1eb      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d210      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e032      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4916      	ldr	r1, [pc, #88]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490e      	ldr	r1, [pc, #56]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b26:	f000 f821 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490a      	ldr	r1, [pc, #40]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_RCC_ClockConfig+0x1cc>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_RCC_ClockConfig+0x1d0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f97c 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	080062d0 	.word	0x080062d0
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x30>
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x36>
 8001b9a:	e027      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9e:	613b      	str	r3, [r7, #16]
      break;
 8001ba0:	e027      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d010      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0c5b      	lsrs	r3, r3, #17
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bce:	fb03 f202 	mul.w	r2, r3, r2
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e004      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	613b      	str	r3, [r7, #16]
      break;
 8001bea:	e002      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bee:	613b      	str	r3, [r7, #16]
      break;
 8001bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf2:	693b      	ldr	r3, [r7, #16]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	007a1200 	.word	0x007a1200
 8001c08:	080062e8 	.word	0x080062e8
 8001c0c:	080062f8 	.word	0x080062f8
 8001c10:	003d0900 	.word	0x003d0900

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b02      	ldr	r3, [pc, #8]	@ (8001c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000000 	.word	0x20000000

08001c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c2c:	f7ff fff2 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	4903      	ldr	r1, [pc, #12]	@ (8001c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	080062e0 	.word	0x080062e0

08001c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c54:	f7ff ffde 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	0adb      	lsrs	r3, r3, #11
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4903      	ldr	r1, [pc, #12]	@ (8001c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080062e0 	.word	0x080062e0

08001c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c80:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <RCC_Delay+0x34>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <RCC_Delay+0x38>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0a5b      	lsrs	r3, r3, #9
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c94:	bf00      	nop
  }
  while (Delay --);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	60fa      	str	r2, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f9      	bne.n	8001c94 <RCC_Delay+0x1c>
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	10624dd3 	.word	0x10624dd3

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e041      	b.n	8001d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fd0a 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 fa20 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d122      	bne.n	8001dae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d11b      	bne.n	8001dae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0202 	mvn.w	r2, #2
 8001d7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f9b4 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
 8001d9a:	e005      	b.n	8001da8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f9a7 	bl	80020f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f9b6 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d122      	bne.n	8001e02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d11b      	bne.n	8001e02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f06f 0204 	mvn.w	r2, #4
 8001dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f98a 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
 8001dee:	e005      	b.n	8001dfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f97d 	bl	80020f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f98c 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d122      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11b      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0208 	mvn.w	r2, #8
 8001e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f960 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
 8001e42:	e005      	b.n	8001e50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f953 	bl	80020f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f962 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d122      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d11b      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0210 	mvn.w	r2, #16
 8001e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2208      	movs	r2, #8
 8001e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f936 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
 8001e96:	e005      	b.n	8001ea4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f929 	bl	80020f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f938 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d10e      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0201 	mvn.w	r2, #1
 8001ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe fe1d 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	2b80      	cmp	r3, #128	@ 0x80
 8001ee2:	d10e      	bne.n	8001f02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b80      	cmp	r3, #128	@ 0x80
 8001ef0:	d107      	bne.n	8001f02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fa7a 	bl	80023f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0c:	2b40      	cmp	r3, #64	@ 0x40
 8001f0e:	d10e      	bne.n	8001f2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1a:	2b40      	cmp	r3, #64	@ 0x40
 8001f1c:	d107      	bne.n	8001f2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8fc 	bl	8002126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d10e      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d107      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0220 	mvn.w	r2, #32
 8001f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fa45 	bl	80023e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_ConfigClockSource+0x1c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0b4      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x186>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fa4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb6:	d03e      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0xd4>
 8001fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fbc:	f200 8087 	bhi.w	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc4:	f000 8086 	beq.w	80020d4 <HAL_TIM_ConfigClockSource+0x172>
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fcc:	d87f      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001fce:	2b70      	cmp	r3, #112	@ 0x70
 8001fd0:	d01a      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0xa6>
 8001fd2:	2b70      	cmp	r3, #112	@ 0x70
 8001fd4:	d87b      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001fd6:	2b60      	cmp	r3, #96	@ 0x60
 8001fd8:	d050      	beq.n	800207c <HAL_TIM_ConfigClockSource+0x11a>
 8001fda:	2b60      	cmp	r3, #96	@ 0x60
 8001fdc:	d877      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001fde:	2b50      	cmp	r3, #80	@ 0x50
 8001fe0:	d03c      	beq.n	800205c <HAL_TIM_ConfigClockSource+0xfa>
 8001fe2:	2b50      	cmp	r3, #80	@ 0x50
 8001fe4:	d873      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001fe6:	2b40      	cmp	r3, #64	@ 0x40
 8001fe8:	d058      	beq.n	800209c <HAL_TIM_ConfigClockSource+0x13a>
 8001fea:	2b40      	cmp	r3, #64	@ 0x40
 8001fec:	d86f      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001fee:	2b30      	cmp	r3, #48	@ 0x30
 8001ff0:	d064      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0x15a>
 8001ff2:	2b30      	cmp	r3, #48	@ 0x30
 8001ff4:	d86b      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d060      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0x15a>
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d867      	bhi.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d05c      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0x15a>
 8002002:	2b10      	cmp	r3, #16
 8002004:	d05a      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0x15a>
 8002006:	e062      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002018:	f000 f967 	bl	80022ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800202a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
      break;
 8002034:	e04f      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002046:	f000 f950 	bl	80022ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002058:	609a      	str	r2, [r3, #8]
      break;
 800205a:	e03c      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002068:	461a      	mov	r2, r3
 800206a:	f000 f8c7 	bl	80021fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2150      	movs	r1, #80	@ 0x50
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f91e 	bl	80022b6 <TIM_ITRx_SetConfig>
      break;
 800207a:	e02c      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002088:	461a      	mov	r2, r3
 800208a:	f000 f8e5 	bl	8002258 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2160      	movs	r1, #96	@ 0x60
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f90e 	bl	80022b6 <TIM_ITRx_SetConfig>
      break;
 800209a:	e01c      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a8:	461a      	mov	r2, r3
 80020aa:	f000 f8a7 	bl	80021fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2140      	movs	r1, #64	@ 0x40
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f8fe 	bl	80022b6 <TIM_ITRx_SetConfig>
      break;
 80020ba:	e00c      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 f8f5 	bl	80022b6 <TIM_ITRx_SetConfig>
      break;
 80020cc:	e003      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
      break;
 80020d2:	e000      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <TIM_Base_SetConfig+0xb8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0x30>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0x30>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a26      	ldr	r2, [pc, #152]	@ (80021f4 <TIM_Base_SetConfig+0xbc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0x30>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <TIM_Base_SetConfig+0xc0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <TIM_Base_SetConfig+0xb8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00b      	beq.n	800219a <TIM_Base_SetConfig+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002188:	d007      	beq.n	800219a <TIM_Base_SetConfig+0x62>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <TIM_Base_SetConfig+0xbc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <TIM_Base_SetConfig+0x62>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <TIM_Base_SetConfig+0xc0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d108      	bne.n	80021ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <TIM_Base_SetConfig+0xb8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	615a      	str	r2, [r3, #20]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800

080021fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0201 	bic.w	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f023 030a 	bic.w	r3, r3, #10
 8002238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	621a      	str	r2, [r3, #32]
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f023 0210 	bic.w	r2, r3, #16
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	031b      	lsls	r3, r3, #12
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002294:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	621a      	str	r2, [r3, #32]
}
 80022ac:	bf00      	nop
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f043 0307 	orr.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	609a      	str	r2, [r3, #8]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b087      	sub	sp, #28
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002304:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	021a      	lsls	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	431a      	orrs	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	609a      	str	r2, [r3, #8]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800233c:	2302      	movs	r3, #2
 800233e:	e046      	b.n	80023ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a16      	ldr	r2, [pc, #88]	@ (80023d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800238c:	d009      	beq.n	80023a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a10      	ldr	r2, [pc, #64]	@ (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10c      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800

080023e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e042      	b.n	80024a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe f9d4 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	@ 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800244a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f91d 	bl	800268c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d16d      	bne.n	80025a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_Transmit+0x2c>
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e066      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	@ 0x21
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fcef 	bl	8000ec8 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002500:	d108      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e003      	b.n	800251c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800251c:	e02a      	b.n	8002574 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f840 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e036      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3302      	adds	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e007      	b.n	8002566 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1cf      	bne.n	800251e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	2140      	movs	r1, #64	@ 0x40
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f810 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e006      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b090      	sub	sp, #64	@ 0x40
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	e050      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d04c      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
 80025ce:	f7fe fc7b 	bl	8000ec8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025da:	429a      	cmp	r2, r3
 80025dc:	d241      	bcs.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80025f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e5      	bne.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	613b      	str	r3, [r7, #16]
   return(result);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	63bb      	str	r3, [r7, #56]	@ 0x38
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002632:	623a      	str	r2, [r7, #32]
 8002634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e5      	bne.n	8002612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e00f      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d09f      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3740      	adds	r7, #64	@ 0x40
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026c6:	f023 030c 	bic.w	r3, r3, #12
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <UART_SetConfig+0x114>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff faac 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	e002      	b.n	8002702 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026fc:	f7ff fa94 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8002700:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	4a22      	ldr	r2, [pc, #136]	@ (80027a4 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	0119      	lsls	r1, r3, #4
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	441a      	add	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fbb2 f2f3 	udiv	r2, r2, r3
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <UART_SetConfig+0x118>)
 800273a:	fba3 0302 	umull	r0, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2064      	movs	r0, #100	@ 0x64
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	3332      	adds	r3, #50	@ 0x32
 800274c:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <UART_SetConfig+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002758:	4419      	add	r1, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009a      	lsls	r2, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <UART_SetConfig+0x118>)
 8002772:	fba3 0302 	umull	r0, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2064      	movs	r0, #100	@ 0x64
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	3332      	adds	r3, #50	@ 0x32
 8002784:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <UART_SetConfig+0x118>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	440a      	add	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013800 	.word	0x40013800
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ba:	2b84      	cmp	r3, #132	@ 0x84
 80027bc:	d005      	beq.n	80027ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	3303      	adds	r3, #3
 80027c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027dc:	f3ef 8305 	mrs	r3, IPSR
 80027e0:	607b      	str	r3, [r7, #4]
  return(result);
 80027e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027fc:	f001 fa86 	bl	8003d0c <vTaskStartScheduler>
  
  return osOK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}

08002806 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800280a:	f7ff ffe4 	bl	80027d6 <inHandlerMode>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002814:	f001 fba4 	bl	8003f60 <xTaskGetTickCountFromISR>
 8002818:	4603      	mov	r3, r0
 800281a:	e002      	b.n	8002822 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800281c:	f001 fb92 	bl	8003f44 <xTaskGetTickCount>
 8002820:	4603      	mov	r3, r0
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}

08002826 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002828:	b089      	sub	sp, #36	@ 0x24
 800282a:	af04      	add	r7, sp, #16
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <osThreadCreate+0x54>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01c      	beq.n	800287a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685c      	ldr	r4, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691e      	ldr	r6, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ffa8 	bl	80027a8 <makeFreeRtosPriority>
 8002858:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002862:	9202      	str	r2, [sp, #8]
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	9100      	str	r1, [sp, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4632      	mov	r2, r6
 800286c:	4629      	mov	r1, r5
 800286e:	4620      	mov	r0, r4
 8002870:	f000 fed0 	bl	8003614 <xTaskCreateStatic>
 8002874:	4603      	mov	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e01c      	b.n	80028b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685c      	ldr	r4, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002886:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff8a 	bl	80027a8 <makeFreeRtosPriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	9200      	str	r2, [sp, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	4632      	mov	r2, r6
 80028a2:	4629      	mov	r1, r5
 80028a4:	4620      	mov	r0, r4
 80028a6:	f000 ff14 	bl	80036d2 <xTaskCreate>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <osDelay+0x16>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	e000      	b.n	80028d6 <osDelay+0x18>
 80028d4:	2301      	movs	r3, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 f842 	bl	8003960 <vTaskDelay>
  
  return osOK;
 80028dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80028f8:	f7ff ff6d 	bl	80027d6 <inHandlerMode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fba4 	bl	8003056 <xQueueGiveFromISR>
 800290e:	4603      	mov	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002914:	23ff      	movs	r3, #255	@ 0xff
 8002916:	e017      	b.n	8002948 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <osSemaphoreRelease+0x5e>
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <osSemaphoreRelease+0x68>)
 8002920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	e00a      	b.n	8002946 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002930:	2300      	movs	r3, #0
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f9f0 	bl	8002d1c <xQueueGenericSend>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002942:	23ff      	movs	r3, #255	@ 0xff
 8002944:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	e000ed04 	.word	0xe000ed04

08002954 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f001 f835 	bl	80039cc <vTaskSuspend>
  
  return osOK;
 8002962:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8002974:	f7ff ff2f 	bl	80027d6 <inHandlerMode>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00e      	beq.n	800299c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f001 f952 	bl	8003c28 <xTaskResumeFromISR>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10b      	bne.n	80029a2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <osThreadResume+0x40>)
 800298c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	e002      	b.n	80029a2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f001 f8e5 	bl	8003b6c <vTaskResume>
  }
  return osOK;
 80029a2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f103 0208 	add.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f103 0208 	add.w	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0208 	add.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d103      	bne.n	8002a6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e00c      	b.n	8002a86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e002      	b.n	8002a7a <vListInsert+0x2e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d2f6      	bcs.n	8002a74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6892      	ldr	r2, [r2, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6852      	ldr	r2, [r2, #4]
 8002adc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d103      	bne.n	8002af0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b3c:	f002 fa5e 	bl	8004ffc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	441a      	add	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	441a      	add	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	22ff      	movs	r2, #255	@ 0xff
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d114      	bne.n	8002bbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01a      	beq.n	8002bd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3310      	adds	r3, #16
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fb62 	bl	8004268 <xTaskRemoveFromEventList>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <xQueueGenericReset+0xd0>)
 8002bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	e009      	b.n	8002bd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3310      	adds	r3, #16
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fef5 	bl	80029b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3324      	adds	r3, #36	@ 0x24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fef0 	bl	80029b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bd0:	f002 fa44 	bl	800505c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	@ 0x38
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <xQueueGenericCreateStatic+0x56>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <xQueueGenericCreateStatic+0x5a>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <xQueueGenericCreateStatic+0x5c>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10b      	bne.n	8002c5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	623b      	str	r3, [r7, #32]
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <xQueueGenericCreateStatic+0x84>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <xQueueGenericCreateStatic+0x88>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <xQueueGenericCreateStatic+0x8a>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	61fb      	str	r3, [r7, #28]
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	e7fd      	b.n	8002c86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c8a:	2348      	movs	r3, #72	@ 0x48
 8002c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b48      	cmp	r3, #72	@ 0x48
 8002c92:	d00b      	beq.n	8002cac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	61bb      	str	r3, [r7, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cbe:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f805 	bl	8002cdc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3730      	adds	r7, #48	@ 0x30
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e002      	b.n	8002cfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	69b8      	ldr	r0, [r7, #24]
 8002d0e:	f7ff feff 	bl	8002b10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	@ 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <xQueueGenericSend+0x34>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x42>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x46>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x48>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xQueueGenericSend+0x64>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x72>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0x76>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0x78>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <xQueueGenericSend+0x94>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	623b      	str	r3, [r7, #32]
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002db0:	f001 fc24 	bl	80045fc <xTaskGetSchedulerState>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <xQueueGenericSend+0xa4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xQueueGenericSend+0xa8>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <xQueueGenericSend+0xaa>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61fb      	str	r3, [r7, #28]
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	e7fd      	b.n	8002dde <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002de2:	f002 f90b 	bl	8004ffc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <xQueueGenericSend+0xdc>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d129      	bne.n	8002e4c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfe:	f000 fa9d 	bl	800333c <prvCopyDataToQueue>
 8002e02:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	3324      	adds	r3, #36	@ 0x24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 fa29 	bl	8004268 <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	e00a      	b.n	8002e44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b39      	ldr	r3, [pc, #228]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e44:	f002 f90a 	bl	800505c <vPortExitCritical>
				return pdPASS;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e063      	b.n	8002f14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e52:	f002 f903 	bl	800505c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e05c      	b.n	8002f14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fa63 	bl	8004330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6e:	f002 f8f5 	bl	800505c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e72:	f000 ffbb 	bl	8003dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e76:	f002 f8c1 	bl	8004ffc <vPortEnterCritical>
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <xQueueGenericSend+0x174>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d103      	bne.n	8002ea6 <xQueueGenericSend+0x18a>
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ea6:	f002 f8d9 	bl	800505c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eaa:	1d3a      	adds	r2, r7, #4
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fa52 	bl	800435c <xTaskCheckForTimeOut>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d124      	bne.n	8002f08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ec0:	f000 fb34 	bl	800352c <prvIsQueueFull>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	3310      	adds	r3, #16
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 f976 	bl	80041c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eda:	f000 fabf 	bl	800345c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ede:	f000 ff93 	bl	8003e08 <xTaskResumeAll>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af7c 	bne.w	8002de2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	e772      	b.n	8002de2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002efe:	f000 faad 	bl	800345c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f02:	f000 ff81 	bl	8003e08 <xTaskResumeAll>
 8002f06:	e76c      	b.n	8002de2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0a:	f000 faa7 	bl	800345c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0e:	f000 ff7b 	bl	8003e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f12:	2300      	movs	r3, #0
		}
	}
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3738      	adds	r7, #56	@ 0x38
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	@ 0x38
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSendFromISR+0x3e>
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSendFromISR+0x42>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSendFromISR+0x44>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	623b      	str	r3, [r7, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSendFromISR+0x6e>
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <xQueueGenericSendFromISR+0x72>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueGenericSendFromISR+0x74>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	61fb      	str	r3, [r7, #28]
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fb0:	f002 f8e6 	bl	8005180 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61ba      	str	r2, [r7, #24]
 8002fca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <xQueueGenericSendFromISR+0xc2>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d12c      	bne.n	800303c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ff2:	f000 f9a3 	bl	800333c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ff6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d112      	bne.n	8003026 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300a:	3324      	adds	r3, #36	@ 0x24
 800300c:	4618      	mov	r0, r3
 800300e:	f001 f92b 	bl	8004268 <xTaskRemoveFromEventList>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e007      	b.n	8003036 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003026:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800302a:	3301      	adds	r3, #1
 800302c:	b2db      	uxtb	r3, r3
 800302e:	b25a      	sxtb	r2, r3
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003036:	2301      	movs	r3, #1
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800303a:	e001      	b.n	8003040 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800303c:	2300      	movs	r3, #0
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800304a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800304e:	4618      	mov	r0, r3
 8003050:	3738      	adds	r7, #56	@ 0x38
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b08e      	sub	sp, #56	@ 0x38
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	623b      	str	r3, [r7, #32]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61fb      	str	r3, [r7, #28]
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <xQueueGiveFromISR+0x5c>
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <xQueueGiveFromISR+0x60>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <xQueueGiveFromISR+0x62>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	61bb      	str	r3, [r7, #24]
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d4:	f002 f854 	bl	8005180 <vPortValidateInterruptPriority>
	__asm volatile
 80030d8:	f3ef 8211 	mrs	r2, BASEPRI
 80030dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	617a      	str	r2, [r7, #20]
 80030ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80030f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003100:	429a      	cmp	r2, r3
 8003102:	d22b      	bcs.n	800315c <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003106:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800310a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800310e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003116:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d112      	bne.n	8003146 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	3324      	adds	r3, #36	@ 0x24
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f89b 	bl	8004268 <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800314a:	3301      	adds	r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	b25a      	sxtb	r2, r3
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003156:	2301      	movs	r3, #1
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
 800315a:	e001      	b.n	8003160 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800315c:	2300      	movs	r3, #0
 800315e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f383 8811 	msr	BASEPRI, r3
}
 800316a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800316e:	4618      	mov	r0, r3
 8003170:	3738      	adds	r7, #56	@ 0x38
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	@ 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <xQueueReceive+0x32>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	623b      	str	r3, [r7, #32]
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	e7fd      	b.n	80031a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <xQueueReceive+0x40>
 80031b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <xQueueReceive+0x44>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <xQueueReceive+0x46>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <xQueueReceive+0x62>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	61fb      	str	r3, [r7, #28]
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	e7fd      	b.n	80031d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031da:	f001 fa0f 	bl	80045fc <xTaskGetSchedulerState>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <xQueueReceive+0x72>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <xQueueReceive+0x76>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <xQueueReceive+0x78>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <xQueueReceive+0x94>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	61bb      	str	r3, [r7, #24]
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800320c:	f001 fef6 	bl	8004ffc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01f      	beq.n	800325c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003220:	f000 f8f6 	bl	8003410 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	1e5a      	subs	r2, r3, #1
 8003228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00f      	beq.n	8003254 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	3310      	adds	r3, #16
 8003238:	4618      	mov	r0, r3
 800323a:	f001 f815 	bl	8004268 <xTaskRemoveFromEventList>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003244:	4b3c      	ldr	r3, [pc, #240]	@ (8003338 <xQueueReceive+0x1c0>)
 8003246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003254:	f001 ff02 	bl	800505c <vPortExitCritical>
				return pdPASS;
 8003258:	2301      	movs	r3, #1
 800325a:	e069      	b.n	8003330 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003262:	f001 fefb 	bl	800505c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003266:	2300      	movs	r3, #0
 8003268:	e062      	b.n	8003330 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d106      	bne.n	800327e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f85b 	bl	8004330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800327e:	f001 feed 	bl	800505c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003282:	f000 fdb3 	bl	8003dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003286:	f001 feb9 	bl	8004ffc <vPortEnterCritical>
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003290:	b25b      	sxtb	r3, r3
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d103      	bne.n	80032a0 <xQueueReceive+0x128>
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d103      	bne.n	80032b6 <xQueueReceive+0x13e>
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b6:	f001 fed1 	bl	800505c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ba:	1d3a      	adds	r2, r7, #4
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f84a 	bl	800435c <xTaskCheckForTimeOut>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d123      	bne.n	8003316 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032d0:	f000 f916 	bl	8003500 <prvIsQueueEmpty>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d017      	beq.n	800330a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	3324      	adds	r3, #36	@ 0x24
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ff6e 	bl	80041c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ea:	f000 f8b7 	bl	800345c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032ee:	f000 fd8b 	bl	8003e08 <xTaskResumeAll>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d189      	bne.n	800320c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <xQueueReceive+0x1c0>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	e780      	b.n	800320c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800330a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800330c:	f000 f8a6 	bl	800345c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003310:	f000 fd7a 	bl	8003e08 <xTaskResumeAll>
 8003314:	e77a      	b.n	800320c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003318:	f000 f8a0 	bl	800345c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800331c:	f000 fd74 	bl	8003e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003322:	f000 f8ed 	bl	8003500 <prvIsQueueEmpty>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f43f af6f 	beq.w	800320c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800332e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003330:	4618      	mov	r0, r3
 8003332:	3730      	adds	r7, #48	@ 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d14d      	bne.n	80033fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f001 f966 	bl	8004638 <xTaskPriorityDisinherit>
 800336c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	e043      	b.n	80033fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d119      	bne.n	80033b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6898      	ldr	r0, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	461a      	mov	r2, r3
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	f002 f9c2 	bl	8005710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	441a      	add	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d32b      	bcc.n	80033fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	e026      	b.n	80033fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68d8      	ldr	r0, [r3, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	461a      	mov	r2, r3
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	f002 f9a8 	bl	8005710 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	425b      	negs	r3, r3
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d207      	bcs.n	80033ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	425b      	negs	r3, r3
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d105      	bne.n	80033fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003406:	697b      	ldr	r3, [r7, #20]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d303      	bcc.n	8003444 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68d9      	ldr	r1, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	461a      	mov	r2, r3
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f002 f95e 	bl	8005710 <memcpy>
	}
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003464:	f001 fdca 	bl	8004ffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800346e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003470:	e011      	b.n	8003496 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d012      	beq.n	80034a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3324      	adds	r3, #36	@ 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fef2 	bl	8004268 <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800348a:	f000 ffcb 	bl	8004424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3b01      	subs	r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	dce9      	bgt.n	8003472 <prvUnlockQueue+0x16>
 800349e:	e000      	b.n	80034a2 <prvUnlockQueue+0x46>
					break;
 80034a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	22ff      	movs	r2, #255	@ 0xff
 80034a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80034aa:	f001 fdd7 	bl	800505c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ae:	f001 fda5 	bl	8004ffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ba:	e011      	b.n	80034e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3310      	adds	r3, #16
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fecd 	bl	8004268 <xTaskRemoveFromEventList>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034d4:	f000 ffa6 	bl	8004424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034d8:	7bbb      	ldrb	r3, [r7, #14]
 80034da:	3b01      	subs	r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	dce9      	bgt.n	80034bc <prvUnlockQueue+0x60>
 80034e8:	e000      	b.n	80034ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	22ff      	movs	r2, #255	@ 0xff
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034f4:	f001 fdb2 	bl	800505c <vPortExitCritical>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003508:	f001 fd78 	bl	8004ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fd9d 	bl	800505c <vPortExitCritical>

	return xReturn;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003534:	f001 fd62 	bl	8004ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003540:	429a      	cmp	r2, r3
 8003542:	d102      	bne.n	800354a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e001      	b.n	800354e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800354e:	f001 fd85 	bl	800505c <vPortExitCritical>

	return xReturn;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e014      	b.n	8003596 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800356c:	4a0e      	ldr	r2, [pc, #56]	@ (80035a8 <vQueueAddToRegistry+0x4c>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003578:	490b      	ldr	r1, [pc, #44]	@ (80035a8 <vQueueAddToRegistry+0x4c>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003582:	4a09      	ldr	r2, [pc, #36]	@ (80035a8 <vQueueAddToRegistry+0x4c>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800358e:	e006      	b.n	800359e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b07      	cmp	r3, #7
 800359a:	d9e7      	bls.n	800356c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	20000a3c 	.word	0x20000a3c

080035ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035bc:	f001 fd1e 	bl	8004ffc <vPortEnterCritical>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035c6:	b25b      	sxtb	r3, r3
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d103      	bne.n	80035d6 <vQueueWaitForMessageRestricted+0x2a>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d103      	bne.n	80035ec <vQueueWaitForMessageRestricted+0x40>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ec:	f001 fd36 	bl	800505c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3324      	adds	r3, #36	@ 0x24
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe05 	bl	8004210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff28 	bl	800345c <prvUnlockQueue>
	}
 800360c:	bf00      	nop
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	@ 0x38
 8003618:	af04      	add	r7, sp, #16
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	623b      	str	r3, [r7, #32]
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	61fb      	str	r3, [r7, #28]
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	e7fd      	b.n	800365a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800365e:	23a0      	movs	r3, #160	@ 0xa0
 8003660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2ba0      	cmp	r3, #160	@ 0xa0
 8003666:	d00b      	beq.n	8003680 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61bb      	str	r3, [r7, #24]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01e      	beq.n	80036c4 <xTaskCreateStatic+0xb0>
 8003686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	2202      	movs	r2, #2
 800369a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800369e:	2300      	movs	r3, #0
 80036a0:	9303      	str	r3, [sp, #12]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f850 	bl	800375c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036be:	f000 f8e5 	bl	800388c <prvAddNewTaskToReadyList>
 80036c2:	e001      	b.n	80036c8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c8:	697b      	ldr	r3, [r7, #20]
	}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	@ 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08c      	sub	sp, #48	@ 0x30
 80036d6:	af04      	add	r7, sp, #16
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fd8a 	bl	8005200 <pvPortMalloc>
 80036ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036f4:	20a0      	movs	r0, #160	@ 0xa0
 80036f6:	f001 fd83 	bl	8005200 <pvPortMalloc>
 80036fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
 8003708:	e005      	b.n	8003716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f001 fe40 	bl	8005390 <vPortFree>
 8003710:	e001      	b.n	8003716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	2300      	movs	r3, #0
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f80e 	bl	800375c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003740:	69f8      	ldr	r0, [r7, #28]
 8003742:	f000 f8a3 	bl	800388c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e002      	b.n	8003752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003752:	69bb      	ldr	r3, [r7, #24]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003774:	3b01      	subs	r3, #1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f023 0307 	bic.w	r3, r3, #7
 8003782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	617b      	str	r3, [r7, #20]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e012      	b.n	80037d2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	7819      	ldrb	r1, [r3, #0]
 80037b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	3334      	adds	r3, #52	@ 0x34
 80037bc:	460a      	mov	r2, r1
 80037be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b0f      	cmp	r3, #15
 80037d6:	d9e9      	bls.n	80037ac <prvInitialiseNewTask+0x50>
 80037d8:	e000      	b.n	80037dc <prvInitialiseNewTask+0x80>
		{
			break;
 80037da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d901      	bls.n	80037ee <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037ea:	2306      	movs	r3, #6
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	3304      	adds	r3, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f8f2 	bl	80029ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	3318      	adds	r3, #24
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f8ed 	bl	80029ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003818:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	f1c3 0207 	rsb	r2, r3, #7
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003828:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	2200      	movs	r2, #0
 800382e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	2200      	movs	r2, #0
 8003836:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	334c      	adds	r3, #76	@ 0x4c
 800383e:	224c      	movs	r2, #76	@ 0x4c
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f001 feda 	bl	80055fc <memset>
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	4a0d      	ldr	r2, [pc, #52]	@ (8003880 <prvInitialiseNewTask+0x124>)
 800384c:	651a      	str	r2, [r3, #80]	@ 0x50
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	4a0c      	ldr	r2, [pc, #48]	@ (8003884 <prvInitialiseNewTask+0x128>)
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <prvInitialiseNewTask+0x12c>)
 8003858:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	69b8      	ldr	r0, [r7, #24]
 8003860:	f001 fadc 	bl	8004e1c <pxPortInitialiseStack>
 8003864:	4602      	mov	r2, r0
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800386a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200018c4 	.word	0x200018c4
 8003884:	2000192c 	.word	0x2000192c
 8003888:	20001994 	.word	0x20001994

0800388c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003894:	f001 fbb2 	bl	8004ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003898:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <prvAddNewTaskToReadyList+0xb8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a29      	ldr	r2, [pc, #164]	@ (8003944 <prvAddNewTaskToReadyList+0xb8>)
 80038a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038a2:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038aa:	4a27      	ldr	r2, [pc, #156]	@ (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038b0:	4b24      	ldr	r3, [pc, #144]	@ (8003944 <prvAddNewTaskToReadyList+0xb8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d110      	bne.n	80038da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038b8:	f000 fdd8 	bl	800446c <prvInitialiseTaskLists>
 80038bc:	e00d      	b.n	80038da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038be:	4b23      	ldr	r3, [pc, #140]	@ (800394c <prvAddNewTaskToReadyList+0xc0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d802      	bhi.n	80038da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038da:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <prvAddNewTaskToReadyList+0xc4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <prvAddNewTaskToReadyList+0xc4>)
 80038e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	2201      	movs	r2, #1
 80038ea:	409a      	lsls	r2, r3
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a15      	ldr	r2, [pc, #84]	@ (8003958 <prvAddNewTaskToReadyList+0xcc>)
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7ff f87a 	bl	8002a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003912:	f001 fba3 	bl	800505c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <prvAddNewTaskToReadyList+0xc0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800391e:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <prvAddNewTaskToReadyList+0xbc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	429a      	cmp	r2, r3
 800392a:	d207      	bcs.n	800393c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <prvAddNewTaskToReadyList+0xd0>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000b7c 	.word	0x20000b7c
 8003948:	20000a7c 	.word	0x20000a7c
 800394c:	20000b88 	.word	0x20000b88
 8003950:	20000b98 	.word	0x20000b98
 8003954:	20000b84 	.word	0x20000b84
 8003958:	20000a80 	.word	0x20000a80
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <vTaskDelay+0x64>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <vTaskDelay+0x32>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60bb      	str	r3, [r7, #8]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003992:	f000 fa2b 	bl	8003dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003996:	2100      	movs	r1, #0
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fed5 	bl	8004748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800399e:	f000 fa33 	bl	8003e08 <xTaskResumeAll>
 80039a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039aa:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <vTaskDelay+0x68>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000ba4 	.word	0x20000ba4
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80039d4:	f001 fb12 	bl	8004ffc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <vTaskSuspend+0x18>
 80039de:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad4 <vTaskSuspend+0x108>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	e000      	b.n	80039e6 <vTaskSuspend+0x1a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff f865 	bl	8002abc <uxListRemove>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d115      	bne.n	8003a24 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	4936      	ldr	r1, [pc, #216]	@ (8003ad8 <vTaskSuspend+0x10c>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <vTaskSuspend+0x58>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	2201      	movs	r2, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	4b30      	ldr	r3, [pc, #192]	@ (8003adc <vTaskSuspend+0x110>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	4a2e      	ldr	r2, [pc, #184]	@ (8003adc <vTaskSuspend+0x110>)
 8003a22:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3318      	adds	r3, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff f843 	bl	8002abc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4828      	ldr	r0, [pc, #160]	@ (8003ae0 <vTaskSuspend+0x114>)
 8003a3e:	f7fe ffe2 	bl	8002a06 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d103      	bne.n	8003a56 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003a56:	f001 fb01 	bl	800505c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003a5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <vTaskSuspend+0x118>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003a62:	f001 facb 	bl	8004ffc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003a66:	f000 fda5 	bl	80045b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003a6a:	f001 faf7 	bl	800505c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003a6e:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <vTaskSuspend+0x108>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d128      	bne.n	8003aca <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8003a78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <vTaskSuspend+0x118>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <vTaskSuspend+0x11c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <vTaskSuspend+0xd4>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60bb      	str	r3, [r7, #8]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003aa0:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <vTaskSuspend+0x120>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ab0:	e00b      	b.n	8003aca <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <vTaskSuspend+0x114>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <vTaskSuspend+0x124>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d103      	bne.n	8003ac6 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <vTaskSuspend+0x108>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
	}
 8003ac4:	e001      	b.n	8003aca <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8003ac6:	f000 fb1b 	bl	8004100 <vTaskSwitchContext>
	}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000a7c 	.word	0x20000a7c
 8003ad8:	20000a80 	.word	0x20000a80
 8003adc:	20000b84 	.word	0x20000b84
 8003ae0:	20000b68 	.word	0x20000b68
 8003ae4:	20000b88 	.word	0x20000b88
 8003ae8:	20000ba4 	.word	0x20000ba4
 8003aec:	e000ed04 	.word	0xe000ed04
 8003af0:	20000b7c 	.word	0x20000b7c

08003af4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	60fb      	str	r3, [r7, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	e7fd      	b.n	8003b1e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <prvTaskIsTaskSuspended+0x70>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <prvTaskIsTaskSuspended+0x3c>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <prvTaskIsTaskSuspended+0x3e>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00f      	beq.n	8003b56 <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <prvTaskIsTaskSuspended+0x74>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00a      	beq.n	8003b56 <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <prvTaskIsTaskSuspended+0x58>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <prvTaskIsTaskSuspended+0x5a>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b56:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000b68 	.word	0x20000b68
 8003b68:	20000b3c 	.word	0x20000b3c

08003b6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <vTaskResume+0x2a>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	e7fd      	b.n	8003b92 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d039      	beq.n	8003c10 <vTaskResume+0xa4>
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c18 <vTaskResume+0xac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d034      	beq.n	8003c10 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8003ba6:	f001 fa29 	bl	8004ffc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff ffa2 	bl	8003af4 <prvTaskIsTaskSuspended>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02a      	beq.n	8003c0c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe ff7e 	bl	8002abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <vTaskResume+0xb0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	4a13      	ldr	r2, [pc, #76]	@ (8003c1c <vTaskResume+0xb0>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a10      	ldr	r2, [pc, #64]	@ (8003c20 <vTaskResume+0xb4>)
 8003be0:	441a      	add	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f7fe ff0c 	bl	8002a06 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf2:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <vTaskResume+0xac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d307      	bcc.n	8003c0c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <vTaskResume+0xb8>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003c0c:	f001 fa26 	bl	800505c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000a7c 	.word	0x20000a7c
 8003c1c:	20000b84 	.word	0x20000b84
 8003c20:	20000a80 	.word	0x20000a80
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <xTaskResumeFromISR+0x2e>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	61bb      	str	r3, [r7, #24]
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	e7fd      	b.n	8003c52 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c56:	f001 fa93 	bl	8005180 <vPortValidateInterruptPriority>
	__asm volatile
 8003c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	617a      	str	r2, [r7, #20]
 8003c70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003c72:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c74:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c76:	6a38      	ldr	r0, [r7, #32]
 8003c78:	f7ff ff3c 	bl	8003af4 <prvTaskIsTaskSuspended>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02f      	beq.n	8003ce2 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <xTaskResumeFromISR+0xd0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d125      	bne.n	8003cd6 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <xTaskResumeFromISR+0xd4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d301      	bcc.n	8003c9c <xTaskResumeFromISR+0x74>
					{
						xYieldRequired = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe ff0b 	bl	8002abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	2201      	movs	r2, #1
 8003cac:	409a      	lsls	r2, r3
 8003cae:	4b14      	ldr	r3, [pc, #80]	@ (8003d00 <xTaskResumeFromISR+0xd8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <xTaskResumeFromISR+0xd8>)
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d04 <xTaskResumeFromISR+0xdc>)
 8003cc6:	441a      	add	r2, r3
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7fe fe99 	bl	8002a06 <vListInsertEnd>
 8003cd4:	e005      	b.n	8003ce2 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	3318      	adds	r3, #24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480a      	ldr	r0, [pc, #40]	@ (8003d08 <xTaskResumeFromISR+0xe0>)
 8003cde:	f7fe fe92 	bl	8002a06 <vListInsertEnd>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f383 8811 	msr	BASEPRI, r3
}
 8003cec:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3728      	adds	r7, #40	@ 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000ba4 	.word	0x20000ba4
 8003cfc:	20000a7c 	.word	0x20000a7c
 8003d00:	20000b84 	.word	0x20000b84
 8003d04:	20000a80 	.word	0x20000a80
 8003d08:	20000b3c 	.word	0x20000b3c

08003d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d1a:	463a      	mov	r2, r7
 8003d1c:	1d39      	adds	r1, r7, #4
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fa1c 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	9202      	str	r2, [sp, #8]
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	2300      	movs	r3, #0
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	460a      	mov	r2, r1
 8003d3a:	4924      	ldr	r1, [pc, #144]	@ (8003dcc <vTaskStartScheduler+0xc0>)
 8003d3c:	4824      	ldr	r0, [pc, #144]	@ (8003dd0 <vTaskStartScheduler+0xc4>)
 8003d3e:	f7ff fc69 	bl	8003614 <xTaskCreateStatic>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <vTaskStartScheduler+0xc8>)
 8003d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d48:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <vTaskStartScheduler+0xc8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e001      	b.n	8003d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d60:	f000 fd58 	bl	8004814 <xTimerCreateTimerTask>
 8003d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d11b      	bne.n	8003da4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	613b      	str	r3, [r7, #16]
}
 8003d7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d80:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <vTaskStartScheduler+0xcc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	334c      	adds	r3, #76	@ 0x4c
 8003d86:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <vTaskStartScheduler+0xd0>)
 8003d88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <vTaskStartScheduler+0xd4>)
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d92:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <vTaskStartScheduler+0xd8>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d98:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <vTaskStartScheduler+0xdc>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d9e:	f001 f8bb 	bl	8004f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003da2:	e00f      	b.n	8003dc4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d10b      	bne.n	8003dc4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <vTaskStartScheduler+0xb4>
}
 8003dc4:	bf00      	nop
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	080062b8 	.word	0x080062b8
 8003dd0:	0800443d 	.word	0x0800443d
 8003dd4:	20000ba0 	.word	0x20000ba0
 8003dd8:	20000a7c 	.word	0x20000a7c
 8003ddc:	20000010 	.word	0x20000010
 8003de0:	20000b9c 	.word	0x20000b9c
 8003de4:	20000b88 	.word	0x20000b88
 8003de8:	20000b80 	.word	0x20000b80

08003dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <vTaskSuspendAll+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a03      	ldr	r2, [pc, #12]	@ (8003e04 <vTaskSuspendAll+0x18>)
 8003df8:	6013      	str	r3, [r2, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000ba4 	.word	0x20000ba4

08003e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e16:	4b42      	ldr	r3, [pc, #264]	@ (8003f20 <xTaskResumeAll+0x118>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xTaskResumeAll+0x2e>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	603b      	str	r3, [r7, #0]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e36:	f001 f8e1 	bl	8004ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e3a:	4b39      	ldr	r3, [pc, #228]	@ (8003f20 <xTaskResumeAll+0x118>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	4a37      	ldr	r2, [pc, #220]	@ (8003f20 <xTaskResumeAll+0x118>)
 8003e42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e44:	4b36      	ldr	r3, [pc, #216]	@ (8003f20 <xTaskResumeAll+0x118>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d161      	bne.n	8003f10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e4c:	4b35      	ldr	r3, [pc, #212]	@ (8003f24 <xTaskResumeAll+0x11c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05d      	beq.n	8003f10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e54:	e02e      	b.n	8003eb4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e56:	4b34      	ldr	r3, [pc, #208]	@ (8003f28 <xTaskResumeAll+0x120>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3318      	adds	r3, #24
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fe2a 	bl	8002abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe fe25 	bl	8002abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f2c <xTaskResumeAll+0x124>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <xTaskResumeAll+0x124>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4a27      	ldr	r2, [pc, #156]	@ (8003f30 <xTaskResumeAll+0x128>)
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fe fdb3 	bl	8002a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea4:	4b23      	ldr	r3, [pc, #140]	@ (8003f34 <xTaskResumeAll+0x12c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003eae:	4b22      	ldr	r3, [pc, #136]	@ (8003f38 <xTaskResumeAll+0x130>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f28 <xTaskResumeAll+0x120>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1cc      	bne.n	8003e56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ec2:	f000 fb77 	bl	80045b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <xTaskResumeAll+0x134>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d010      	beq.n	8003ef4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ed2:	f000 f857 	bl	8003f84 <xTaskIncrementTick>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003edc:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <xTaskResumeAll+0x130>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f1      	bne.n	8003ed2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003eee:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <xTaskResumeAll+0x134>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <xTaskResumeAll+0x130>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f00:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <xTaskResumeAll+0x138>)
 8003f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f10:	f001 f8a4 	bl	800505c <vPortExitCritical>

	return xAlreadyYielded;
 8003f14:	68bb      	ldr	r3, [r7, #8]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000ba4 	.word	0x20000ba4
 8003f24:	20000b7c 	.word	0x20000b7c
 8003f28:	20000b3c 	.word	0x20000b3c
 8003f2c:	20000b84 	.word	0x20000b84
 8003f30:	20000a80 	.word	0x20000a80
 8003f34:	20000a7c 	.word	0x20000a7c
 8003f38:	20000b90 	.word	0x20000b90
 8003f3c:	20000b8c 	.word	0x20000b8c
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f4a:	4b04      	ldr	r3, [pc, #16]	@ (8003f5c <xTaskGetTickCount+0x18>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f50:	687b      	ldr	r3, [r7, #4]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	20000b80 	.word	0x20000b80

08003f60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f66:	f001 f90b 	bl	8005180 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <xTaskGetTickCountFromISR+0x20>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f74:	683b      	ldr	r3, [r7, #0]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000b80 	.word	0x20000b80

08003f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f8e:	4b51      	ldr	r3, [pc, #324]	@ (80040d4 <xTaskIncrementTick+0x150>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 808e 	bne.w	80040b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f98:	4b4f      	ldr	r3, [pc, #316]	@ (80040d8 <xTaskIncrementTick+0x154>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80040d8 <xTaskIncrementTick+0x154>)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d121      	bne.n	8003ff0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fac:	4b4b      	ldr	r3, [pc, #300]	@ (80040dc <xTaskIncrementTick+0x158>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <xTaskIncrementTick+0x4a>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	603b      	str	r3, [r7, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <xTaskIncrementTick+0x46>
 8003fce:	4b43      	ldr	r3, [pc, #268]	@ (80040dc <xTaskIncrementTick+0x158>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <xTaskIncrementTick+0x15c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a40      	ldr	r2, [pc, #256]	@ (80040dc <xTaskIncrementTick+0x158>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4a40      	ldr	r2, [pc, #256]	@ (80040e0 <xTaskIncrementTick+0x15c>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <xTaskIncrementTick+0x160>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a3e      	ldr	r2, [pc, #248]	@ (80040e4 <xTaskIncrementTick+0x160>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	f000 fae2 	bl	80045b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <xTaskIncrementTick+0x164>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d34d      	bcc.n	8004096 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffa:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <xTaskIncrementTick+0x158>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <xTaskIncrementTick+0x84>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <xTaskIncrementTick+0x86>
 8004008:	2300      	movs	r3, #0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800400e:	4b36      	ldr	r3, [pc, #216]	@ (80040e8 <xTaskIncrementTick+0x164>)
 8004010:	f04f 32ff 	mov.w	r2, #4294967295
 8004014:	601a      	str	r2, [r3, #0]
					break;
 8004016:	e03e      	b.n	8004096 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004018:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <xTaskIncrementTick+0x158>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d203      	bcs.n	8004038 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004030:	4a2d      	ldr	r2, [pc, #180]	@ (80040e8 <xTaskIncrementTick+0x164>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6013      	str	r3, [r2, #0]
						break;
 8004036:	e02e      	b.n	8004096 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fd3d 	bl	8002abc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3318      	adds	r3, #24
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fd34 	bl	8002abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	4b23      	ldr	r3, [pc, #140]	@ (80040ec <xTaskIncrementTick+0x168>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <xTaskIncrementTick+0x168>)
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <xTaskIncrementTick+0x16c>)
 8004074:	441a      	add	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe fcc2 	bl	8002a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <xTaskIncrementTick+0x170>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	429a      	cmp	r2, r3
 800408e:	d3b4      	bcc.n	8003ffa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004094:	e7b1      	b.n	8003ffa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004096:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <xTaskIncrementTick+0x170>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409c:	4914      	ldr	r1, [pc, #80]	@ (80040f0 <xTaskIncrementTick+0x16c>)
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d907      	bls.n	80040be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e004      	b.n	80040be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040b4:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <xTaskIncrementTick+0x174>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a0f      	ldr	r2, [pc, #60]	@ (80040f8 <xTaskIncrementTick+0x174>)
 80040bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040be:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <xTaskIncrementTick+0x178>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040ca:	697b      	ldr	r3, [r7, #20]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000ba4 	.word	0x20000ba4
 80040d8:	20000b80 	.word	0x20000b80
 80040dc:	20000b34 	.word	0x20000b34
 80040e0:	20000b38 	.word	0x20000b38
 80040e4:	20000b94 	.word	0x20000b94
 80040e8:	20000b9c 	.word	0x20000b9c
 80040ec:	20000b84 	.word	0x20000b84
 80040f0:	20000a80 	.word	0x20000a80
 80040f4:	20000a7c 	.word	0x20000a7c
 80040f8:	20000b8c 	.word	0x20000b8c
 80040fc:	20000b90 	.word	0x20000b90

08004100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004106:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <vTaskSwitchContext+0xac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800410e:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <vTaskSwitchContext+0xb0>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004114:	e045      	b.n	80041a2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004116:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <vTaskSwitchContext+0xb0>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800411c:	4b25      	ldr	r3, [pc, #148]	@ (80041b4 <vTaskSwitchContext+0xb4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	f1c3 031f 	rsb	r3, r3, #31
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	4921      	ldr	r1, [pc, #132]	@ (80041b8 <vTaskSwitchContext+0xb8>)
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	607b      	str	r3, [r7, #4]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <vTaskSwitchContext+0x5a>
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <vTaskSwitchContext+0xb8>)
 800416a:	4413      	add	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3308      	adds	r3, #8
 8004180:	429a      	cmp	r2, r3
 8004182:	d104      	bne.n	800418e <vTaskSwitchContext+0x8e>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <vTaskSwitchContext+0xbc>)
 8004196:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <vTaskSwitchContext+0xbc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	334c      	adds	r3, #76	@ 0x4c
 800419e:	4a08      	ldr	r2, [pc, #32]	@ (80041c0 <vTaskSwitchContext+0xc0>)
 80041a0:	6013      	str	r3, [r2, #0]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000ba4 	.word	0x20000ba4
 80041b0:	20000b90 	.word	0x20000b90
 80041b4:	20000b84 	.word	0x20000b84
 80041b8:	20000a80 	.word	0x20000a80
 80041bc:	20000a7c 	.word	0x20000a7c
 80041c0:	20000010 	.word	0x20000010

080041c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <vTaskPlaceOnEventList+0x48>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3318      	adds	r3, #24
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fe fc29 	bl	8002a4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041fa:	2101      	movs	r1, #1
 80041fc:	6838      	ldr	r0, [r7, #0]
 80041fe:	f000 faa3 	bl	8004748 <prvAddCurrentTaskToDelayedList>
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000a7c 	.word	0x20000a7c

08004210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	617b      	str	r3, [r7, #20]
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800423a:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <vTaskPlaceOnEventListRestricted+0x54>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3318      	adds	r3, #24
 8004240:	4619      	mov	r1, r3
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7fe fbdf 	bl	8002a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	68b8      	ldr	r0, [r7, #8]
 8004258:	f000 fa76 	bl	8004748 <prvAddCurrentTaskToDelayedList>
	}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000a7c 	.word	0x20000a7c

08004268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	60fb      	str	r3, [r7, #12]
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	3318      	adds	r3, #24
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fc0e 	bl	8002abc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <xTaskRemoveFromEventList+0xb0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11c      	bne.n	80042e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe fc05 	bl	8002abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	2201      	movs	r2, #1
 80042b8:	409a      	lsls	r2, r3
 80042ba:	4b18      	ldr	r3, [pc, #96]	@ (800431c <xTaskRemoveFromEventList+0xb4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	4a16      	ldr	r2, [pc, #88]	@ (800431c <xTaskRemoveFromEventList+0xb4>)
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4a13      	ldr	r2, [pc, #76]	@ (8004320 <xTaskRemoveFromEventList+0xb8>)
 80042d2:	441a      	add	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7fe fb93 	bl	8002a06 <vListInsertEnd>
 80042e0:	e005      	b.n	80042ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3318      	adds	r3, #24
 80042e6:	4619      	mov	r1, r3
 80042e8:	480e      	ldr	r0, [pc, #56]	@ (8004324 <xTaskRemoveFromEventList+0xbc>)
 80042ea:	f7fe fb8c 	bl	8002a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <xTaskRemoveFromEventList+0xc0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d905      	bls.n	8004308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <xTaskRemoveFromEventList+0xc4>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e001      	b.n	800430c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000ba4 	.word	0x20000ba4
 800431c:	20000b84 	.word	0x20000b84
 8004320:	20000a80 	.word	0x20000a80
 8004324:	20000b3c 	.word	0x20000b3c
 8004328:	20000a7c 	.word	0x20000a7c
 800432c:	20000b90 	.word	0x20000b90

08004330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <vTaskInternalSetTimeOutState+0x24>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <vTaskInternalSetTimeOutState+0x28>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000b94 	.word	0x20000b94
 8004358:	20000b80 	.word	0x20000b80

0800435c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	613b      	str	r3, [r7, #16]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60fb      	str	r3, [r7, #12]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80043a2:	f000 fe2b 	bl	8004ffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043a6:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <xTaskCheckForTimeOut+0xc0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d102      	bne.n	80043c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e023      	b.n	800440e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <xTaskCheckForTimeOut+0xc4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d007      	beq.n	80043e2 <xTaskCheckForTimeOut+0x86>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e015      	b.n	800440e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d20b      	bcs.n	8004404 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff99 	bl	8004330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e004      	b.n	800440e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800440e:	f000 fe25 	bl	800505c <vPortExitCritical>

	return xReturn;
 8004412:	69fb      	ldr	r3, [r7, #28]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000b80 	.word	0x20000b80
 8004420:	20000b94 	.word	0x20000b94

08004424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004428:	4b03      	ldr	r3, [pc, #12]	@ (8004438 <vTaskMissedYield+0x14>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000b90 	.word	0x20000b90

0800443c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004444:	f000 f852 	bl	80044ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004448:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <prvIdleTask+0x28>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d9f9      	bls.n	8004444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <prvIdleTask+0x2c>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004460:	e7f0      	b.n	8004444 <prvIdleTask+0x8>
 8004462:	bf00      	nop
 8004464:	20000a80 	.word	0x20000a80
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	e00c      	b.n	8004492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <prvInitialiseTaskLists+0x60>)
 8004484:	4413      	add	r3, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fa92 	bl	80029b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3301      	adds	r3, #1
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b06      	cmp	r3, #6
 8004496:	d9ef      	bls.n	8004478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004498:	480d      	ldr	r0, [pc, #52]	@ (80044d0 <prvInitialiseTaskLists+0x64>)
 800449a:	f7fe fa89 	bl	80029b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800449e:	480d      	ldr	r0, [pc, #52]	@ (80044d4 <prvInitialiseTaskLists+0x68>)
 80044a0:	f7fe fa86 	bl	80029b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a4:	480c      	ldr	r0, [pc, #48]	@ (80044d8 <prvInitialiseTaskLists+0x6c>)
 80044a6:	f7fe fa83 	bl	80029b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044aa:	480c      	ldr	r0, [pc, #48]	@ (80044dc <prvInitialiseTaskLists+0x70>)
 80044ac:	f7fe fa80 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044b0:	480b      	ldr	r0, [pc, #44]	@ (80044e0 <prvInitialiseTaskLists+0x74>)
 80044b2:	f7fe fa7d 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <prvInitialiseTaskLists+0x78>)
 80044b8:	4a05      	ldr	r2, [pc, #20]	@ (80044d0 <prvInitialiseTaskLists+0x64>)
 80044ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <prvInitialiseTaskLists+0x7c>)
 80044be:	4a05      	ldr	r2, [pc, #20]	@ (80044d4 <prvInitialiseTaskLists+0x68>)
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000a80 	.word	0x20000a80
 80044d0:	20000b0c 	.word	0x20000b0c
 80044d4:	20000b20 	.word	0x20000b20
 80044d8:	20000b3c 	.word	0x20000b3c
 80044dc:	20000b50 	.word	0x20000b50
 80044e0:	20000b68 	.word	0x20000b68
 80044e4:	20000b34 	.word	0x20000b34
 80044e8:	20000b38 	.word	0x20000b38

080044ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f2:	e019      	b.n	8004528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044f4:	f000 fd82 	bl	8004ffc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044f8:	4b10      	ldr	r3, [pc, #64]	@ (800453c <prvCheckTasksWaitingTermination+0x50>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fad9 	bl	8002abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <prvCheckTasksWaitingTermination+0x54>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a0b      	ldr	r2, [pc, #44]	@ (8004540 <prvCheckTasksWaitingTermination+0x54>)
 8004512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <prvCheckTasksWaitingTermination+0x58>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3b01      	subs	r3, #1
 800451a:	4a0a      	ldr	r2, [pc, #40]	@ (8004544 <prvCheckTasksWaitingTermination+0x58>)
 800451c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800451e:	f000 fd9d 	bl	800505c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f810 	bl	8004548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <prvCheckTasksWaitingTermination+0x58>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e1      	bne.n	80044f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000b50 	.word	0x20000b50
 8004540:	20000b7c 	.word	0x20000b7c
 8004544:	20000b64 	.word	0x20000b64

08004548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	334c      	adds	r3, #76	@ 0x4c
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f859 	bl	800560c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004568:	4618      	mov	r0, r3
 800456a:	f000 ff11 	bl	8005390 <vPortFree>
				vPortFree( pxTCB );
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 ff0e 	bl	8005390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004574:	e019      	b.n	80045aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800457c:	2b01      	cmp	r3, #1
 800457e:	d103      	bne.n	8004588 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 ff05 	bl	8005390 <vPortFree>
	}
 8004586:	e010      	b.n	80045aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800458e:	2b02      	cmp	r3, #2
 8004590:	d00b      	beq.n	80045aa <prvDeleteTCB+0x62>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60fb      	str	r3, [r7, #12]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <prvDeleteTCB+0x5e>
	}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ba:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <prvResetNextTaskUnblockTime+0x40>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <prvResetNextTaskUnblockTime+0x14>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <prvResetNextTaskUnblockTime+0x16>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ce:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <prvResetNextTaskUnblockTime+0x44>)
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d6:	e008      	b.n	80045ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045d8:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <prvResetNextTaskUnblockTime+0x40>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <prvResetNextTaskUnblockTime+0x44>)
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	20000b34 	.word	0x20000b34
 80045f8:	20000b9c 	.word	0x20000b9c

080045fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <xTaskGetSchedulerState+0x34>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800460a:	2301      	movs	r3, #1
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e008      	b.n	8004622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <xTaskGetSchedulerState+0x38>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004618:	2302      	movs	r3, #2
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	e001      	b.n	8004622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004622:	687b      	ldr	r3, [r7, #4]
	}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000b88 	.word	0x20000b88
 8004634:	20000ba4 	.word	0x20000ba4

08004638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d070      	beq.n	8004730 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800464e:	4b3b      	ldr	r3, [pc, #236]	@ (800473c <xTaskPriorityDisinherit+0x104>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d00b      	beq.n	8004670 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60fb      	str	r3, [r7, #12]
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	60bb      	str	r3, [r7, #8]
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004694:	1e5a      	subs	r2, r3, #1
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d044      	beq.n	8004730 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d140      	bne.n	8004730 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe fa02 	bl	8002abc <uxListRemove>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d115      	bne.n	80046ea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c2:	491f      	ldr	r1, [pc, #124]	@ (8004740 <xTaskPriorityDisinherit+0x108>)
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <xTaskPriorityDisinherit+0xb2>
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	2201      	movs	r2, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43da      	mvns	r2, r3
 80046e0:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <xTaskPriorityDisinherit+0x10c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4013      	ands	r3, r2
 80046e6:	4a17      	ldr	r2, [pc, #92]	@ (8004744 <xTaskPriorityDisinherit+0x10c>)
 80046e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	f1c3 0207 	rsb	r2, r3, #7
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	2201      	movs	r2, #1
 8004704:	409a      	lsls	r2, r3
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <xTaskPriorityDisinherit+0x10c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	4a0d      	ldr	r2, [pc, #52]	@ (8004744 <xTaskPriorityDisinherit+0x10c>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4a08      	ldr	r2, [pc, #32]	@ (8004740 <xTaskPriorityDisinherit+0x108>)
 800471e:	441a      	add	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f7fe f96d 	bl	8002a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800472c:	2301      	movs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004730:	697b      	ldr	r3, [r7, #20]
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000a7c 	.word	0x20000a7c
 8004740:	20000a80 	.word	0x20000a80
 8004744:	20000b84 	.word	0x20000b84

08004748 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004752:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004758:	4b28      	ldr	r3, [pc, #160]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe f9ac 	bl	8002abc <uxListRemove>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800476a:	4b24      	ldr	r3, [pc, #144]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	2201      	movs	r2, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	4b21      	ldr	r3, [pc, #132]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4013      	ands	r3, r2
 800477e:	4a20      	ldr	r2, [pc, #128]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d10a      	bne.n	80047a0 <prvAddCurrentTaskToDelayedList+0x58>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004790:	4b1a      	ldr	r3, [pc, #104]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	481a      	ldr	r0, [pc, #104]	@ (8004804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800479a:	f7fe f934 	bl	8002a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800479e:	e026      	b.n	80047ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047a8:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d209      	bcs.n	80047cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b0f      	ldr	r3, [pc, #60]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7fe f941 	bl	8002a4c <vListInsert>
}
 80047ca:	e010      	b.n	80047ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047cc:	4b0f      	ldr	r3, [pc, #60]	@ (800480c <prvAddCurrentTaskToDelayedList+0xc4>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe f937 	bl	8002a4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047de:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d202      	bcs.n	80047ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047e8:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6013      	str	r3, [r2, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000b80 	.word	0x20000b80
 80047fc:	20000a7c 	.word	0x20000a7c
 8004800:	20000b84 	.word	0x20000b84
 8004804:	20000b68 	.word	0x20000b68
 8004808:	20000b38 	.word	0x20000b38
 800480c:	20000b34 	.word	0x20000b34
 8004810:	20000b9c 	.word	0x20000b9c

08004814 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	@ 0x28
 8004818:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800481e:	f000 fabd 	bl	8004d9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004822:	4b1d      	ldr	r3, [pc, #116]	@ (8004898 <xTimerCreateTimerTask+0x84>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d021      	beq.n	800486e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004832:	1d3a      	adds	r2, r7, #4
 8004834:	f107 0108 	add.w	r1, r7, #8
 8004838:	f107 030c 	add.w	r3, r7, #12
 800483c:	4618      	mov	r0, r3
 800483e:	f7fb fca7 	bl	8000190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	9202      	str	r2, [sp, #8]
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	2302      	movs	r3, #2
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	460a      	mov	r2, r1
 8004854:	4911      	ldr	r1, [pc, #68]	@ (800489c <xTimerCreateTimerTask+0x88>)
 8004856:	4812      	ldr	r0, [pc, #72]	@ (80048a0 <xTimerCreateTimerTask+0x8c>)
 8004858:	f7fe fedc 	bl	8003614 <xTaskCreateStatic>
 800485c:	4603      	mov	r3, r0
 800485e:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <xTimerCreateTimerTask+0x90>)
 8004860:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <xTimerCreateTimerTask+0x90>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800486a:	2301      	movs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	613b      	str	r3, [r7, #16]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800488c:	697b      	ldr	r3, [r7, #20]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000bd8 	.word	0x20000bd8
 800489c:	080062c0 	.word	0x080062c0
 80048a0:	080049c9 	.word	0x080049c9
 80048a4:	20000bdc 	.word	0x20000bdc

080048a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	@ 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	623b      	str	r3, [r7, #32]
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048d8:	4b19      	ldr	r3, [pc, #100]	@ (8004940 <xTimerGenericCommand+0x98>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d02a      	beq.n	8004936 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	dc18      	bgt.n	8004924 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048f2:	f7ff fe83 	bl	80045fc <xTaskGetSchedulerState>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d109      	bne.n	8004910 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048fc:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <xTimerGenericCommand+0x98>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	f107 0114 	add.w	r1, r7, #20
 8004904:	2300      	movs	r3, #0
 8004906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004908:	f7fe fa08 	bl	8002d1c <xQueueGenericSend>
 800490c:	6278      	str	r0, [r7, #36]	@ 0x24
 800490e:	e012      	b.n	8004936 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004910:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <xTimerGenericCommand+0x98>)
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	f107 0114 	add.w	r1, r7, #20
 8004918:	2300      	movs	r3, #0
 800491a:	2200      	movs	r2, #0
 800491c:	f7fe f9fe 	bl	8002d1c <xQueueGenericSend>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24
 8004922:	e008      	b.n	8004936 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <xTimerGenericCommand+0x98>)
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	f107 0114 	add.w	r1, r7, #20
 800492c:	2300      	movs	r3, #0
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	f7fe faf6 	bl	8002f20 <xQueueGenericSendFromISR>
 8004934:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	@ 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000bd8 	.word	0x20000bd8

08004944 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800494e:	4b1d      	ldr	r3, [pc, #116]	@ (80049c4 <prvProcessExpiredTimer+0x80>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe f8ad 	bl	8002abc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d123      	bne.n	80049b2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	18d1      	adds	r1, r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f000 f8cc 	bl	8004b14 <prvInsertTimerInActiveList>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d017      	beq.n	80049b2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004982:	2300      	movs	r3, #0
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	2100      	movs	r1, #0
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7ff ff8b 	bl	80048a8 <xTimerGenericCommand>
 8004992:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	60fb      	str	r3, [r7, #12]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	4798      	blx	r3
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000bd0 	.word	0x20000bd0

080049c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049d0:	f107 0308 	add.w	r3, r7, #8
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f859 	bl	8004a8c <prvGetNextExpireTime>
 80049da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4619      	mov	r1, r3
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f805 	bl	80049f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049e6:	f000 f8d7 	bl	8004b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049ea:	bf00      	nop
 80049ec:	e7f0      	b.n	80049d0 <prvTimerTask+0x8>
	...

080049f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049fa:	f7ff f9f7 	bl	8003dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049fe:	f107 0308 	add.w	r3, r7, #8
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f866 	bl	8004ad4 <prvSampleTimeNow>
 8004a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d130      	bne.n	8004a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <prvProcessTimerOrBlockTask+0x3c>
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d806      	bhi.n	8004a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a1e:	f7ff f9f3 	bl	8003e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ff8d 	bl	8004944 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a2a:	e024      	b.n	8004a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a32:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <prvProcessTimerOrBlockTask+0x90>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a44:	4b0f      	ldr	r3, [pc, #60]	@ (8004a84 <prvProcessTimerOrBlockTask+0x94>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f7fe fdab 	bl	80035ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a56:	f7ff f9d7 	bl	8003e08 <xTaskResumeAll>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a60:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <prvProcessTimerOrBlockTask+0x98>)
 8004a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
}
 8004a70:	e001      	b.n	8004a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a72:	f7ff f9c9 	bl	8003e08 <xTaskResumeAll>
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000bd4 	.word	0x20000bd4
 8004a84:	20000bd8 	.word	0x20000bd8
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <prvGetNextExpireTime+0x44>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <prvGetNextExpireTime+0x44>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e001      	b.n	8004ac2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000bd0 	.word	0x20000bd0

08004ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004adc:	f7ff fa32 	bl	8003f44 <xTaskGetTickCount>
 8004ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <prvSampleTimeNow+0x3c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d205      	bcs.n	8004af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004aec:	f000 f8f4 	bl	8004cd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e002      	b.n	8004afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004afe:	4a04      	ldr	r2, [pc, #16]	@ (8004b10 <prvSampleTimeNow+0x3c>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000be0 	.word	0x20000be0

08004b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d812      	bhi.n	8004b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e01b      	b.n	8004b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b4e:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <prvInsertTimerInActiveList+0x7c>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7fd ff77 	bl	8002a4c <vListInsert>
 8004b5e:	e012      	b.n	8004b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d206      	bcs.n	8004b76 <prvInsertTimerInActiveList+0x62>
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b70:	2301      	movs	r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e007      	b.n	8004b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b76:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <prvInsertTimerInActiveList+0x80>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f7fd ff63 	bl	8002a4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b86:	697b      	ldr	r3, [r7, #20]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000bd4 	.word	0x20000bd4
 8004b94:	20000bd0 	.word	0x20000bd0

08004b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08c      	sub	sp, #48	@ 0x30
 8004b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b9e:	e087      	b.n	8004cb0 <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f2c0 8084 	blt.w	8004cb0 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd ff7f 	bl	8002abc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ff87 	bl	8004ad4 <prvSampleTimeNow>
 8004bc6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	d86b      	bhi.n	8004ca6 <prvProcessReceivedCommands+0x10e>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <prvProcessReceivedCommands+0x3c>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004bfd 	.word	0x08004bfd
 8004be0:	08004ca7 	.word	0x08004ca7
 8004be4:	08004c5b 	.word	0x08004c5b
 8004be8:	08004c95 	.word	0x08004c95
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004bfd 	.word	0x08004bfd
 8004bf4:	08004ca7 	.word	0x08004ca7
 8004bf8:	08004c5b 	.word	0x08004c5b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	18d1      	adds	r1, r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a3a      	ldr	r2, [r7, #32]
 8004c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c0a:	f7ff ff83 	bl	8004b14 <prvInsertTimerInActiveList>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d04a      	beq.n	8004caa <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d142      	bne.n	8004caa <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	441a      	add	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	2100      	movs	r1, #0
 8004c34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c36:	f7ff fe37 	bl	80048a8 <xTimerGenericCommand>
 8004c3a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d133      	bne.n	8004caa <prvProcessReceivedCommands+0x112>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	61bb      	str	r3, [r7, #24]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	617b      	str	r3, [r7, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	699a      	ldr	r2, [r3, #24]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	18d1      	adds	r1, r2, r3
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	6a3a      	ldr	r2, [r7, #32]
 8004c8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c8e:	f7ff ff41 	bl	8004b14 <prvInsertTimerInActiveList>
					break;
 8004c92:	e00d      	b.n	8004cb0 <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d107      	bne.n	8004cae <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 8004c9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca0:	f000 fb76 	bl	8005390 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ca4:	e003      	b.n	8004cae <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <prvProcessReceivedCommands+0x118>
					break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <prvProcessReceivedCommands+0x118>
					break;
 8004cae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cb0:	4b08      	ldr	r3, [pc, #32]	@ (8004cd4 <prvProcessReceivedCommands+0x13c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f107 0108 	add.w	r1, r7, #8
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fa5c 	bl	8003178 <xQueueReceive>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f47f af6c 	bne.w	8004ba0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	3728      	adds	r7, #40	@ 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000bd8 	.word	0x20000bd8

08004cd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cde:	e046      	b.n	8004d6e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d94 <prvSwitchTimerLists+0xbc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cea:	4b2a      	ldr	r3, [pc, #168]	@ (8004d94 <prvSwitchTimerLists+0xbc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fd fedf 	bl	8002abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d12f      	bne.n	8004d6e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d90e      	bls.n	8004d3e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d2c:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <prvSwitchTimerLists+0xbc>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fd fe88 	bl	8002a4c <vListInsert>
 8004d3c:	e017      	b.n	8004d6e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	2100      	movs	r1, #0
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff fdad 	bl	80048a8 <xTimerGenericCommand>
 8004d4e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <prvSwitchTimerLists+0x96>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	603b      	str	r3, [r7, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	e7fd      	b.n	8004d6a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d6e:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <prvSwitchTimerLists+0xbc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1b3      	bne.n	8004ce0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d78:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <prvSwitchTimerLists+0xbc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <prvSwitchTimerLists+0xc0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a04      	ldr	r2, [pc, #16]	@ (8004d94 <prvSwitchTimerLists+0xbc>)
 8004d84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d86:	4a04      	ldr	r2, [pc, #16]	@ (8004d98 <prvSwitchTimerLists+0xc0>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6013      	str	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000bd0 	.word	0x20000bd0
 8004d98:	20000bd4 	.word	0x20000bd4

08004d9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004da2:	f000 f92b 	bl	8004ffc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <prvCheckForValidListAndQueue+0x60>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d120      	bne.n	8004df0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dae:	4814      	ldr	r0, [pc, #80]	@ (8004e00 <prvCheckForValidListAndQueue+0x64>)
 8004db0:	f7fd fdfe 	bl	80029b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004db4:	4813      	ldr	r0, [pc, #76]	@ (8004e04 <prvCheckForValidListAndQueue+0x68>)
 8004db6:	f7fd fdfb 	bl	80029b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dba:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <prvCheckForValidListAndQueue+0x6c>)
 8004dbc:	4a10      	ldr	r2, [pc, #64]	@ (8004e00 <prvCheckForValidListAndQueue+0x64>)
 8004dbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004dc0:	4b12      	ldr	r3, [pc, #72]	@ (8004e0c <prvCheckForValidListAndQueue+0x70>)
 8004dc2:	4a10      	ldr	r2, [pc, #64]	@ (8004e04 <prvCheckForValidListAndQueue+0x68>)
 8004dc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <prvCheckForValidListAndQueue+0x74>)
 8004dcc:	4a11      	ldr	r2, [pc, #68]	@ (8004e14 <prvCheckForValidListAndQueue+0x78>)
 8004dce:	210c      	movs	r1, #12
 8004dd0:	200a      	movs	r0, #10
 8004dd2:	f7fd ff07 	bl	8002be4 <xQueueGenericCreateStatic>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <prvCheckForValidListAndQueue+0x60>)
 8004dda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ddc:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <prvCheckForValidListAndQueue+0x60>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004de4:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <prvCheckForValidListAndQueue+0x60>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	490b      	ldr	r1, [pc, #44]	@ (8004e18 <prvCheckForValidListAndQueue+0x7c>)
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fbb6 	bl	800355c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004df0:	f000 f934 	bl	800505c <vPortExitCritical>
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000bd8 	.word	0x20000bd8
 8004e00:	20000ba8 	.word	0x20000ba8
 8004e04:	20000bbc 	.word	0x20000bbc
 8004e08:	20000bd0 	.word	0x20000bd0
 8004e0c:	20000bd4 	.word	0x20000bd4
 8004e10:	20000c5c 	.word	0x20000c5c
 8004e14:	20000be4 	.word	0x20000be4
 8004e18:	080062c8 	.word	0x080062c8

08004e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b04      	subs	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e4c:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <pxPortInitialiseStack+0x54>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b14      	subs	r3, #20
 8004e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b20      	subs	r3, #32
 8004e62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	08004e75 	.word	0x08004e75

08004e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <prvTaskExitError+0x54>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d00b      	beq.n	8004ea0 <prvTaskExitError+0x2c>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	e7fd      	b.n	8004e9c <prvTaskExitError+0x28>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60bb      	str	r3, [r7, #8]
}
 8004eb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eb4:	bf00      	nop
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0fc      	beq.n	8004eb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	2000000c 	.word	0x2000000c
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <pxCurrentTCBConst2>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	6808      	ldr	r0, [r1, #0]
 8004ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004eda:	f380 8809 	msr	PSP, r0
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8811 	msr	BASEPRI, r0
 8004eea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004eee:	4770      	bx	lr

08004ef0 <pxCurrentTCBConst2>:
 8004ef0:	20000a7c 	.word	0x20000a7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ef8:	4806      	ldr	r0, [pc, #24]	@ (8004f14 <prvPortStartFirstTask+0x1c>)
 8004efa:	6800      	ldr	r0, [r0, #0]
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f380 8808 	msr	MSP, r0
 8004f02:	b662      	cpsie	i
 8004f04:	b661      	cpsie	f
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	df00      	svc	0
 8004f10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f12:	bf00      	nop
 8004f14:	e000ed08 	.word	0xe000ed08

08004f18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f1e:	4b32      	ldr	r3, [pc, #200]	@ (8004fe8 <xPortStartScheduler+0xd0>)
 8004f20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	22ff      	movs	r2, #255	@ 0xff
 8004f2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4b2a      	ldr	r3, [pc, #168]	@ (8004fec <xPortStartScheduler+0xd4>)
 8004f44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f48:	2207      	movs	r2, #7
 8004f4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f4c:	e009      	b.n	8004f62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4a26      	ldr	r2, [pc, #152]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6a:	2b80      	cmp	r3, #128	@ 0x80
 8004f6c:	d0ef      	beq.n	8004f4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1c3 0307 	rsb	r3, r3, #7
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d00b      	beq.n	8004f92 <xPortStartScheduler+0x7a>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60bb      	str	r3, [r7, #8]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f92:	4b17      	ldr	r3, [pc, #92]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fa4:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <xPortStartScheduler+0xd8>)
 8004fa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <xPortStartScheduler+0xdc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff4 <xPortStartScheduler+0xdc>)
 8004fb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <xPortStartScheduler+0xdc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ff4 <xPortStartScheduler+0xdc>)
 8004fc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fc8:	f000 f8b8 	bl	800513c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <xPortStartScheduler+0xe0>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fd2:	f7ff ff91 	bl	8004ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fd6:	f7ff f893 	bl	8004100 <vTaskSwitchContext>
	prvTaskExitError();
 8004fda:	f7ff ff4b 	bl	8004e74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	e000e400 	.word	0xe000e400
 8004fec:	20000ca4 	.word	0x20000ca4
 8004ff0:	20000ca8 	.word	0x20000ca8
 8004ff4:	e000ed20 	.word	0xe000ed20
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	607b      	str	r3, [r7, #4]
}
 8005014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005016:	4b0f      	ldr	r3, [pc, #60]	@ (8005054 <vPortEnterCritical+0x58>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	4a0d      	ldr	r2, [pc, #52]	@ (8005054 <vPortEnterCritical+0x58>)
 800501e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005020:	4b0c      	ldr	r3, [pc, #48]	@ (8005054 <vPortEnterCritical+0x58>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d110      	bne.n	800504a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005028:	4b0b      	ldr	r3, [pc, #44]	@ (8005058 <vPortEnterCritical+0x5c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <vPortEnterCritical+0x4e>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	603b      	str	r3, [r7, #0]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <vPortEnterCritical+0x4a>
	}
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	2000000c 	.word	0x2000000c
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005062:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <vPortExitCritical+0x50>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <vPortExitCritical+0x26>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	607b      	str	r3, [r7, #4]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <vPortExitCritical+0x50>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3b01      	subs	r3, #1
 8005088:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <vPortExitCritical+0x50>)
 800508a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <vPortExitCritical+0x50>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <vPortExitCritical+0x44>
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	2000000c 	.word	0x2000000c

080050b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050b0:	f3ef 8009 	mrs	r0, PSP
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <pxCurrentTCBConst>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050c0:	6010      	str	r0, [r2, #0]
 80050c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80050c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050ca:	f380 8811 	msr	BASEPRI, r0
 80050ce:	f7ff f817 	bl	8004100 <vTaskSwitchContext>
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	6808      	ldr	r0, [r1, #0]
 80050e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050e6:	f380 8809 	msr	PSP, r0
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	4770      	bx	lr

080050f0 <pxCurrentTCBConst>:
 80050f0:	20000a7c 	.word	0x20000a7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005112:	f7fe ff37 	bl	8003f84 <xTaskIncrementTick>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800511c:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <xPortSysTickHandler+0x40>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005140:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <vPortSetupTimerInterrupt+0x30>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005146:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800514c:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <vPortSetupTimerInterrupt+0x38>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a09      	ldr	r2, [pc, #36]	@ (8005178 <vPortSetupTimerInterrupt+0x3c>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	4a08      	ldr	r2, [pc, #32]	@ (800517c <vPortSetupTimerInterrupt+0x40>)
 800515a:	3b01      	subs	r3, #1
 800515c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800515e:	4b03      	ldr	r3, [pc, #12]	@ (800516c <vPortSetupTimerInterrupt+0x30>)
 8005160:	2207      	movs	r2, #7
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	e000e010 	.word	0xe000e010
 8005170:	e000e018 	.word	0xe000e018
 8005174:	20000000 	.word	0x20000000
 8005178:	10624dd3 	.word	0x10624dd3
 800517c:	e000e014 	.word	0xe000e014

08005180 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005186:	f3ef 8305 	mrs	r3, IPSR
 800518a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b0f      	cmp	r3, #15
 8005190:	d915      	bls.n	80051be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005192:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <vPortValidateInterruptPriority+0x70>)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800519c:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <vPortValidateInterruptPriority+0x74>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	7afa      	ldrb	r2, [r7, #11]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d20b      	bcs.n	80051be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	607b      	str	r3, [r7, #4]
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051be:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <vPortValidateInterruptPriority+0x78>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <vPortValidateInterruptPriority+0x7c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d90b      	bls.n	80051e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	603b      	str	r3, [r7, #0]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <vPortValidateInterruptPriority+0x62>
	}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	e000e3f0 	.word	0xe000e3f0
 80051f4:	20000ca4 	.word	0x20000ca4
 80051f8:	e000ed0c 	.word	0xe000ed0c
 80051fc:	20000ca8 	.word	0x20000ca8

08005200 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	@ 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800520c:	f7fe fdee 	bl	8003dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005210:	4b5a      	ldr	r3, [pc, #360]	@ (800537c <pvPortMalloc+0x17c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005218:	f000 f916 	bl	8005448 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800521c:	4b58      	ldr	r3, [pc, #352]	@ (8005380 <pvPortMalloc+0x180>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	f040 8090 	bne.w	800534a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01e      	beq.n	800526e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005230:	2208      	movs	r2, #8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	2b00      	cmp	r3, #0
 8005240:	d015      	beq.n	800526e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f023 0307 	bic.w	r3, r3, #7
 8005248:	3308      	adds	r3, #8
 800524a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <pvPortMalloc+0x6e>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	617b      	str	r3, [r7, #20]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d06a      	beq.n	800534a <pvPortMalloc+0x14a>
 8005274:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <pvPortMalloc+0x184>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d865      	bhi.n	800534a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800527e:	4b42      	ldr	r3, [pc, #264]	@ (8005388 <pvPortMalloc+0x188>)
 8005280:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005282:	4b41      	ldr	r3, [pc, #260]	@ (8005388 <pvPortMalloc+0x188>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005288:	e004      	b.n	8005294 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <pvPortMalloc+0xa6>
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f1      	bne.n	800528a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052a6:	4b35      	ldr	r3, [pc, #212]	@ (800537c <pvPortMalloc+0x17c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d04c      	beq.n	800534a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2208      	movs	r2, #8
 80052b6:	4413      	add	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	2308      	movs	r3, #8
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d920      	bls.n	8005314 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4413      	add	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <pvPortMalloc+0xfc>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	613b      	str	r3, [r7, #16]
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	1ad2      	subs	r2, r2, r3
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800530e:	69b8      	ldr	r0, [r7, #24]
 8005310:	f000 f8fc 	bl	800550c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005314:	4b1b      	ldr	r3, [pc, #108]	@ (8005384 <pvPortMalloc+0x184>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	4a19      	ldr	r2, [pc, #100]	@ (8005384 <pvPortMalloc+0x184>)
 8005320:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005322:	4b18      	ldr	r3, [pc, #96]	@ (8005384 <pvPortMalloc+0x184>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b19      	ldr	r3, [pc, #100]	@ (800538c <pvPortMalloc+0x18c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d203      	bcs.n	8005336 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800532e:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <pvPortMalloc+0x184>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a16      	ldr	r2, [pc, #88]	@ (800538c <pvPortMalloc+0x18c>)
 8005334:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	4b11      	ldr	r3, [pc, #68]	@ (8005380 <pvPortMalloc+0x180>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	431a      	orrs	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800534a:	f7fe fd5d 	bl	8003e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <pvPortMalloc+0x170>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <pvPortMalloc+0x16c>
	return pvReturn;
 8005370:	69fb      	ldr	r3, [r7, #28]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3728      	adds	r7, #40	@ 0x28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200018b4 	.word	0x200018b4
 8005380:	200018c0 	.word	0x200018c0
 8005384:	200018b8 	.word	0x200018b8
 8005388:	200018ac 	.word	0x200018ac
 800538c:	200018bc 	.word	0x200018bc

08005390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d04a      	beq.n	8005438 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053a2:	2308      	movs	r3, #8
 80053a4:	425b      	negs	r3, r3
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4b22      	ldr	r3, [pc, #136]	@ (8005440 <vPortFree+0xb0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <vPortFree+0x46>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60fb      	str	r3, [r7, #12]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <vPortFree+0x66>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60bb      	str	r3, [r7, #8]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	4b11      	ldr	r3, [pc, #68]	@ (8005440 <vPortFree+0xb0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d019      	beq.n	8005438 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <vPortFree+0xb0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	43db      	mvns	r3, r3
 8005416:	401a      	ands	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800541c:	f7fe fce6 	bl	8003dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <vPortFree+0xb4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4413      	add	r3, r2
 800542a:	4a06      	ldr	r2, [pc, #24]	@ (8005444 <vPortFree+0xb4>)
 800542c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800542e:	6938      	ldr	r0, [r7, #16]
 8005430:	f000 f86c 	bl	800550c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005434:	f7fe fce8 	bl	8003e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200018c0 	.word	0x200018c0
 8005444:	200018b8 	.word	0x200018b8

08005448 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800544e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005452:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005454:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <prvHeapInit+0xac>)
 8005456:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00c      	beq.n	800547c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3307      	adds	r3, #7
 8005466:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <prvHeapInit+0xac>)
 8005478:	4413      	add	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005480:	4a1d      	ldr	r2, [pc, #116]	@ (80054f8 <prvHeapInit+0xb0>)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005486:	4b1c      	ldr	r3, [pc, #112]	@ (80054f8 <prvHeapInit+0xb0>)
 8005488:	2200      	movs	r2, #0
 800548a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005494:	2208      	movs	r2, #8
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <prvHeapInit+0xb4>)
 80054a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054aa:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <prvHeapInit+0xb4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <prvHeapInit+0xb4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054c8:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <prvHeapInit+0xb4>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005500 <prvHeapInit+0xb8>)
 80054d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a09      	ldr	r2, [pc, #36]	@ (8005504 <prvHeapInit+0xbc>)
 80054de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054e0:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <prvHeapInit+0xc0>)
 80054e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000cac 	.word	0x20000cac
 80054f8:	200018ac 	.word	0x200018ac
 80054fc:	200018b4 	.word	0x200018b4
 8005500:	200018bc 	.word	0x200018bc
 8005504:	200018b8 	.word	0x200018b8
 8005508:	200018c0 	.word	0x200018c0

0800550c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005514:	4b27      	ldr	r3, [pc, #156]	@ (80055b4 <prvInsertBlockIntoFreeList+0xa8>)
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e002      	b.n	8005520 <prvInsertBlockIntoFreeList+0x14>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d8f7      	bhi.n	800551a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4413      	add	r3, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d108      	bne.n	800554e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	441a      	add	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d118      	bne.n	8005594 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <prvInsertBlockIntoFreeList+0xac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d00d      	beq.n	800558a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e008      	b.n	800559c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800558a:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <prvInsertBlockIntoFreeList+0xac>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e003      	b.n	800559c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d002      	beq.n	80055aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	200018ac 	.word	0x200018ac
 80055b8:	200018b4 	.word	0x200018b4

080055bc <siprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055c2:	b500      	push	{lr}
 80055c4:	b09c      	sub	sp, #112	@ 0x70
 80055c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80055c8:	9002      	str	r0, [sp, #8]
 80055ca:	9006      	str	r0, [sp, #24]
 80055cc:	9107      	str	r1, [sp, #28]
 80055ce:	9104      	str	r1, [sp, #16]
 80055d0:	4808      	ldr	r0, [pc, #32]	@ (80055f4 <siprintf+0x38>)
 80055d2:	4909      	ldr	r1, [pc, #36]	@ (80055f8 <siprintf+0x3c>)
 80055d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d8:	9105      	str	r1, [sp, #20]
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	a902      	add	r1, sp, #8
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	f000 f9f6 	bl	80059d0 <_svfiprintf_r>
 80055e4:	2200      	movs	r2, #0
 80055e6:	9b02      	ldr	r3, [sp, #8]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	b01c      	add	sp, #112	@ 0x70
 80055ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f0:	b003      	add	sp, #12
 80055f2:	4770      	bx	lr
 80055f4:	20000010 	.word	0x20000010
 80055f8:	ffff0208 	.word	0xffff0208

080055fc <memset>:
 80055fc:	4603      	mov	r3, r0
 80055fe:	4402      	add	r2, r0
 8005600:	4293      	cmp	r3, r2
 8005602:	d100      	bne.n	8005606 <memset+0xa>
 8005604:	4770      	bx	lr
 8005606:	f803 1b01 	strb.w	r1, [r3], #1
 800560a:	e7f9      	b.n	8005600 <memset+0x4>

0800560c <_reclaim_reent>:
 800560c:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <_reclaim_reent+0xa8>)
 800560e:	b570      	push	{r4, r5, r6, lr}
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4604      	mov	r4, r0
 8005614:	4283      	cmp	r3, r0
 8005616:	d04b      	beq.n	80056b0 <_reclaim_reent+0xa4>
 8005618:	69c3      	ldr	r3, [r0, #28]
 800561a:	b1ab      	cbz	r3, 8005648 <_reclaim_reent+0x3c>
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	b16b      	cbz	r3, 800563c <_reclaim_reent+0x30>
 8005620:	2500      	movs	r5, #0
 8005622:	69e3      	ldr	r3, [r4, #28]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	5959      	ldr	r1, [r3, r5]
 8005628:	2900      	cmp	r1, #0
 800562a:	d13b      	bne.n	80056a4 <_reclaim_reent+0x98>
 800562c:	3504      	adds	r5, #4
 800562e:	2d80      	cmp	r5, #128	@ 0x80
 8005630:	d1f7      	bne.n	8005622 <_reclaim_reent+0x16>
 8005632:	69e3      	ldr	r3, [r4, #28]
 8005634:	4620      	mov	r0, r4
 8005636:	68d9      	ldr	r1, [r3, #12]
 8005638:	f000 f878 	bl	800572c <_free_r>
 800563c:	69e3      	ldr	r3, [r4, #28]
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	b111      	cbz	r1, 8005648 <_reclaim_reent+0x3c>
 8005642:	4620      	mov	r0, r4
 8005644:	f000 f872 	bl	800572c <_free_r>
 8005648:	6961      	ldr	r1, [r4, #20]
 800564a:	b111      	cbz	r1, 8005652 <_reclaim_reent+0x46>
 800564c:	4620      	mov	r0, r4
 800564e:	f000 f86d 	bl	800572c <_free_r>
 8005652:	69e1      	ldr	r1, [r4, #28]
 8005654:	b111      	cbz	r1, 800565c <_reclaim_reent+0x50>
 8005656:	4620      	mov	r0, r4
 8005658:	f000 f868 	bl	800572c <_free_r>
 800565c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800565e:	b111      	cbz	r1, 8005666 <_reclaim_reent+0x5a>
 8005660:	4620      	mov	r0, r4
 8005662:	f000 f863 	bl	800572c <_free_r>
 8005666:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005668:	b111      	cbz	r1, 8005670 <_reclaim_reent+0x64>
 800566a:	4620      	mov	r0, r4
 800566c:	f000 f85e 	bl	800572c <_free_r>
 8005670:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005672:	b111      	cbz	r1, 800567a <_reclaim_reent+0x6e>
 8005674:	4620      	mov	r0, r4
 8005676:	f000 f859 	bl	800572c <_free_r>
 800567a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800567c:	b111      	cbz	r1, 8005684 <_reclaim_reent+0x78>
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f854 	bl	800572c <_free_r>
 8005684:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005686:	b111      	cbz	r1, 800568e <_reclaim_reent+0x82>
 8005688:	4620      	mov	r0, r4
 800568a:	f000 f84f 	bl	800572c <_free_r>
 800568e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005690:	b111      	cbz	r1, 8005698 <_reclaim_reent+0x8c>
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f84a 	bl	800572c <_free_r>
 8005698:	6a23      	ldr	r3, [r4, #32]
 800569a:	b14b      	cbz	r3, 80056b0 <_reclaim_reent+0xa4>
 800569c:	4620      	mov	r0, r4
 800569e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056a2:	4718      	bx	r3
 80056a4:	680e      	ldr	r6, [r1, #0]
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 f840 	bl	800572c <_free_r>
 80056ac:	4631      	mov	r1, r6
 80056ae:	e7bb      	b.n	8005628 <_reclaim_reent+0x1c>
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	bf00      	nop
 80056b4:	20000010 	.word	0x20000010

080056b8 <__errno>:
 80056b8:	4b01      	ldr	r3, [pc, #4]	@ (80056c0 <__errno+0x8>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000010 	.word	0x20000010

080056c4 <__libc_init_array>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	2600      	movs	r6, #0
 80056c8:	4d0c      	ldr	r5, [pc, #48]	@ (80056fc <__libc_init_array+0x38>)
 80056ca:	4c0d      	ldr	r4, [pc, #52]	@ (8005700 <__libc_init_array+0x3c>)
 80056cc:	1b64      	subs	r4, r4, r5
 80056ce:	10a4      	asrs	r4, r4, #2
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	d109      	bne.n	80056e8 <__libc_init_array+0x24>
 80056d4:	f000 fc78 	bl	8005fc8 <_init>
 80056d8:	2600      	movs	r6, #0
 80056da:	4d0a      	ldr	r5, [pc, #40]	@ (8005704 <__libc_init_array+0x40>)
 80056dc:	4c0a      	ldr	r4, [pc, #40]	@ (8005708 <__libc_init_array+0x44>)
 80056de:	1b64      	subs	r4, r4, r5
 80056e0:	10a4      	asrs	r4, r4, #2
 80056e2:	42a6      	cmp	r6, r4
 80056e4:	d105      	bne.n	80056f2 <__libc_init_array+0x2e>
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ec:	4798      	blx	r3
 80056ee:	3601      	adds	r6, #1
 80056f0:	e7ee      	b.n	80056d0 <__libc_init_array+0xc>
 80056f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f6:	4798      	blx	r3
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7f2      	b.n	80056e2 <__libc_init_array+0x1e>
 80056fc:	08006338 	.word	0x08006338
 8005700:	08006338 	.word	0x08006338
 8005704:	08006338 	.word	0x08006338
 8005708:	0800633c 	.word	0x0800633c

0800570c <__retarget_lock_acquire_recursive>:
 800570c:	4770      	bx	lr

0800570e <__retarget_lock_release_recursive>:
 800570e:	4770      	bx	lr

08005710 <memcpy>:
 8005710:	440a      	add	r2, r1
 8005712:	4291      	cmp	r1, r2
 8005714:	f100 33ff 	add.w	r3, r0, #4294967295
 8005718:	d100      	bne.n	800571c <memcpy+0xc>
 800571a:	4770      	bx	lr
 800571c:	b510      	push	{r4, lr}
 800571e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005722:	4291      	cmp	r1, r2
 8005724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005728:	d1f9      	bne.n	800571e <memcpy+0xe>
 800572a:	bd10      	pop	{r4, pc}

0800572c <_free_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4605      	mov	r5, r0
 8005730:	2900      	cmp	r1, #0
 8005732:	d040      	beq.n	80057b6 <_free_r+0x8a>
 8005734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005738:	1f0c      	subs	r4, r1, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfb8      	it	lt
 800573e:	18e4      	addlt	r4, r4, r3
 8005740:	f000 f8de 	bl	8005900 <__malloc_lock>
 8005744:	4a1c      	ldr	r2, [pc, #112]	@ (80057b8 <_free_r+0x8c>)
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	b933      	cbnz	r3, 8005758 <_free_r+0x2c>
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	6014      	str	r4, [r2, #0]
 800574e:	4628      	mov	r0, r5
 8005750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005754:	f000 b8da 	b.w	800590c <__malloc_unlock>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d908      	bls.n	800576e <_free_r+0x42>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	1821      	adds	r1, r4, r0
 8005760:	428b      	cmp	r3, r1
 8005762:	bf01      	itttt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	1809      	addeq	r1, r1, r0
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	e7ed      	b.n	800574a <_free_r+0x1e>
 800576e:	461a      	mov	r2, r3
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b10b      	cbz	r3, 8005778 <_free_r+0x4c>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d9fa      	bls.n	800576e <_free_r+0x42>
 8005778:	6811      	ldr	r1, [r2, #0]
 800577a:	1850      	adds	r0, r2, r1
 800577c:	42a0      	cmp	r0, r4
 800577e:	d10b      	bne.n	8005798 <_free_r+0x6c>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	4401      	add	r1, r0
 8005784:	1850      	adds	r0, r2, r1
 8005786:	4283      	cmp	r3, r0
 8005788:	6011      	str	r1, [r2, #0]
 800578a:	d1e0      	bne.n	800574e <_free_r+0x22>
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4408      	add	r0, r1
 8005792:	6010      	str	r0, [r2, #0]
 8005794:	6053      	str	r3, [r2, #4]
 8005796:	e7da      	b.n	800574e <_free_r+0x22>
 8005798:	d902      	bls.n	80057a0 <_free_r+0x74>
 800579a:	230c      	movs	r3, #12
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	e7d6      	b.n	800574e <_free_r+0x22>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1809      	addeq	r1, r1, r0
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	6054      	str	r4, [r2, #4]
 80057b4:	e7cb      	b.n	800574e <_free_r+0x22>
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20001a08 	.word	0x20001a08

080057bc <sbrk_aligned>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4e0f      	ldr	r6, [pc, #60]	@ (80057fc <sbrk_aligned+0x40>)
 80057c0:	460c      	mov	r4, r1
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	4605      	mov	r5, r0
 80057c6:	b911      	cbnz	r1, 80057ce <sbrk_aligned+0x12>
 80057c8:	f000 fbaa 	bl	8005f20 <_sbrk_r>
 80057cc:	6030      	str	r0, [r6, #0]
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fba5 	bl	8005f20 <_sbrk_r>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	d103      	bne.n	80057e2 <sbrk_aligned+0x26>
 80057da:	f04f 34ff 	mov.w	r4, #4294967295
 80057de:	4620      	mov	r0, r4
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
 80057e2:	1cc4      	adds	r4, r0, #3
 80057e4:	f024 0403 	bic.w	r4, r4, #3
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d0f8      	beq.n	80057de <sbrk_aligned+0x22>
 80057ec:	1a21      	subs	r1, r4, r0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fb96 	bl	8005f20 <_sbrk_r>
 80057f4:	3001      	adds	r0, #1
 80057f6:	d1f2      	bne.n	80057de <sbrk_aligned+0x22>
 80057f8:	e7ef      	b.n	80057da <sbrk_aligned+0x1e>
 80057fa:	bf00      	nop
 80057fc:	20001a04 	.word	0x20001a04

08005800 <_malloc_r>:
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005804:	1ccd      	adds	r5, r1, #3
 8005806:	f025 0503 	bic.w	r5, r5, #3
 800580a:	3508      	adds	r5, #8
 800580c:	2d0c      	cmp	r5, #12
 800580e:	bf38      	it	cc
 8005810:	250c      	movcc	r5, #12
 8005812:	2d00      	cmp	r5, #0
 8005814:	4606      	mov	r6, r0
 8005816:	db01      	blt.n	800581c <_malloc_r+0x1c>
 8005818:	42a9      	cmp	r1, r5
 800581a:	d904      	bls.n	8005826 <_malloc_r+0x26>
 800581c:	230c      	movs	r3, #12
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	2000      	movs	r0, #0
 8005822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058fc <_malloc_r+0xfc>
 800582a:	f000 f869 	bl	8005900 <__malloc_lock>
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	461c      	mov	r4, r3
 8005834:	bb44      	cbnz	r4, 8005888 <_malloc_r+0x88>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	f7ff ffbf 	bl	80057bc <sbrk_aligned>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	4604      	mov	r4, r0
 8005842:	d158      	bne.n	80058f6 <_malloc_r+0xf6>
 8005844:	f8d8 4000 	ldr.w	r4, [r8]
 8005848:	4627      	mov	r7, r4
 800584a:	2f00      	cmp	r7, #0
 800584c:	d143      	bne.n	80058d6 <_malloc_r+0xd6>
 800584e:	2c00      	cmp	r4, #0
 8005850:	d04b      	beq.n	80058ea <_malloc_r+0xea>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	4639      	mov	r1, r7
 8005856:	4630      	mov	r0, r6
 8005858:	eb04 0903 	add.w	r9, r4, r3
 800585c:	f000 fb60 	bl	8005f20 <_sbrk_r>
 8005860:	4581      	cmp	r9, r0
 8005862:	d142      	bne.n	80058ea <_malloc_r+0xea>
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	4630      	mov	r0, r6
 8005868:	1a6d      	subs	r5, r5, r1
 800586a:	4629      	mov	r1, r5
 800586c:	f7ff ffa6 	bl	80057bc <sbrk_aligned>
 8005870:	3001      	adds	r0, #1
 8005872:	d03a      	beq.n	80058ea <_malloc_r+0xea>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	442b      	add	r3, r5
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	f8d8 3000 	ldr.w	r3, [r8]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	bb62      	cbnz	r2, 80058dc <_malloc_r+0xdc>
 8005882:	f8c8 7000 	str.w	r7, [r8]
 8005886:	e00f      	b.n	80058a8 <_malloc_r+0xa8>
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	1b52      	subs	r2, r2, r5
 800588c:	d420      	bmi.n	80058d0 <_malloc_r+0xd0>
 800588e:	2a0b      	cmp	r2, #11
 8005890:	d917      	bls.n	80058c2 <_malloc_r+0xc2>
 8005892:	1961      	adds	r1, r4, r5
 8005894:	42a3      	cmp	r3, r4
 8005896:	6025      	str	r5, [r4, #0]
 8005898:	bf18      	it	ne
 800589a:	6059      	strne	r1, [r3, #4]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	bf08      	it	eq
 80058a0:	f8c8 1000 	streq.w	r1, [r8]
 80058a4:	5162      	str	r2, [r4, r5]
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 f82f 	bl	800590c <__malloc_unlock>
 80058ae:	f104 000b 	add.w	r0, r4, #11
 80058b2:	1d23      	adds	r3, r4, #4
 80058b4:	f020 0007 	bic.w	r0, r0, #7
 80058b8:	1ac2      	subs	r2, r0, r3
 80058ba:	bf1c      	itt	ne
 80058bc:	1a1b      	subne	r3, r3, r0
 80058be:	50a3      	strne	r3, [r4, r2]
 80058c0:	e7af      	b.n	8005822 <_malloc_r+0x22>
 80058c2:	6862      	ldr	r2, [r4, #4]
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	bf0c      	ite	eq
 80058c8:	f8c8 2000 	streq.w	r2, [r8]
 80058cc:	605a      	strne	r2, [r3, #4]
 80058ce:	e7eb      	b.n	80058a8 <_malloc_r+0xa8>
 80058d0:	4623      	mov	r3, r4
 80058d2:	6864      	ldr	r4, [r4, #4]
 80058d4:	e7ae      	b.n	8005834 <_malloc_r+0x34>
 80058d6:	463c      	mov	r4, r7
 80058d8:	687f      	ldr	r7, [r7, #4]
 80058da:	e7b6      	b.n	800584a <_malloc_r+0x4a>
 80058dc:	461a      	mov	r2, r3
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d1fb      	bne.n	80058dc <_malloc_r+0xdc>
 80058e4:	2300      	movs	r3, #0
 80058e6:	6053      	str	r3, [r2, #4]
 80058e8:	e7de      	b.n	80058a8 <_malloc_r+0xa8>
 80058ea:	230c      	movs	r3, #12
 80058ec:	4630      	mov	r0, r6
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	f000 f80c 	bl	800590c <__malloc_unlock>
 80058f4:	e794      	b.n	8005820 <_malloc_r+0x20>
 80058f6:	6005      	str	r5, [r0, #0]
 80058f8:	e7d6      	b.n	80058a8 <_malloc_r+0xa8>
 80058fa:	bf00      	nop
 80058fc:	20001a08 	.word	0x20001a08

08005900 <__malloc_lock>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__malloc_lock+0x8>)
 8005902:	f7ff bf03 	b.w	800570c <__retarget_lock_acquire_recursive>
 8005906:	bf00      	nop
 8005908:	20001a00 	.word	0x20001a00

0800590c <__malloc_unlock>:
 800590c:	4801      	ldr	r0, [pc, #4]	@ (8005914 <__malloc_unlock+0x8>)
 800590e:	f7ff befe 	b.w	800570e <__retarget_lock_release_recursive>
 8005912:	bf00      	nop
 8005914:	20001a00 	.word	0x20001a00

08005918 <__ssputs_r>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	461f      	mov	r7, r3
 800591e:	688e      	ldr	r6, [r1, #8]
 8005920:	4682      	mov	sl, r0
 8005922:	42be      	cmp	r6, r7
 8005924:	460c      	mov	r4, r1
 8005926:	4690      	mov	r8, r2
 8005928:	680b      	ldr	r3, [r1, #0]
 800592a:	d82d      	bhi.n	8005988 <__ssputs_r+0x70>
 800592c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005934:	d026      	beq.n	8005984 <__ssputs_r+0x6c>
 8005936:	6965      	ldr	r5, [r4, #20]
 8005938:	6909      	ldr	r1, [r1, #16]
 800593a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800593e:	eba3 0901 	sub.w	r9, r3, r1
 8005942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005946:	1c7b      	adds	r3, r7, #1
 8005948:	444b      	add	r3, r9
 800594a:	106d      	asrs	r5, r5, #1
 800594c:	429d      	cmp	r5, r3
 800594e:	bf38      	it	cc
 8005950:	461d      	movcc	r5, r3
 8005952:	0553      	lsls	r3, r2, #21
 8005954:	d527      	bpl.n	80059a6 <__ssputs_r+0x8e>
 8005956:	4629      	mov	r1, r5
 8005958:	f7ff ff52 	bl	8005800 <_malloc_r>
 800595c:	4606      	mov	r6, r0
 800595e:	b360      	cbz	r0, 80059ba <__ssputs_r+0xa2>
 8005960:	464a      	mov	r2, r9
 8005962:	6921      	ldr	r1, [r4, #16]
 8005964:	f7ff fed4 	bl	8005710 <memcpy>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800596e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	6126      	str	r6, [r4, #16]
 8005976:	444e      	add	r6, r9
 8005978:	6026      	str	r6, [r4, #0]
 800597a:	463e      	mov	r6, r7
 800597c:	6165      	str	r5, [r4, #20]
 800597e:	eba5 0509 	sub.w	r5, r5, r9
 8005982:	60a5      	str	r5, [r4, #8]
 8005984:	42be      	cmp	r6, r7
 8005986:	d900      	bls.n	800598a <__ssputs_r+0x72>
 8005988:	463e      	mov	r6, r7
 800598a:	4632      	mov	r2, r6
 800598c:	4641      	mov	r1, r8
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	f000 faac 	bl	8005eec <memmove>
 8005994:	2000      	movs	r0, #0
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	1b9b      	subs	r3, r3, r6
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	4433      	add	r3, r6
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	462a      	mov	r2, r5
 80059a8:	f000 fad8 	bl	8005f5c <_realloc_r>
 80059ac:	4606      	mov	r6, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d1e0      	bne.n	8005974 <__ssputs_r+0x5c>
 80059b2:	4650      	mov	r0, sl
 80059b4:	6921      	ldr	r1, [r4, #16]
 80059b6:	f7ff feb9 	bl	800572c <_free_r>
 80059ba:	230c      	movs	r3, #12
 80059bc:	f8ca 3000 	str.w	r3, [sl]
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	e7e9      	b.n	80059a2 <__ssputs_r+0x8a>
	...

080059d0 <_svfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4698      	mov	r8, r3
 80059d6:	898b      	ldrh	r3, [r1, #12]
 80059d8:	4607      	mov	r7, r0
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	460d      	mov	r5, r1
 80059de:	4614      	mov	r4, r2
 80059e0:	b09d      	sub	sp, #116	@ 0x74
 80059e2:	d510      	bpl.n	8005a06 <_svfiprintf_r+0x36>
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	b973      	cbnz	r3, 8005a06 <_svfiprintf_r+0x36>
 80059e8:	2140      	movs	r1, #64	@ 0x40
 80059ea:	f7ff ff09 	bl	8005800 <_malloc_r>
 80059ee:	6028      	str	r0, [r5, #0]
 80059f0:	6128      	str	r0, [r5, #16]
 80059f2:	b930      	cbnz	r0, 8005a02 <_svfiprintf_r+0x32>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	b01d      	add	sp, #116	@ 0x74
 80059fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	2340      	movs	r3, #64	@ 0x40
 8005a04:	616b      	str	r3, [r5, #20]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a0a:	2320      	movs	r3, #32
 8005a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a10:	2330      	movs	r3, #48	@ 0x30
 8005a12:	f04f 0901 	mov.w	r9, #1
 8005a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005bb4 <_svfiprintf_r+0x1e4>
 8005a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a22:	4623      	mov	r3, r4
 8005a24:	469a      	mov	sl, r3
 8005a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a2a:	b10a      	cbz	r2, 8005a30 <_svfiprintf_r+0x60>
 8005a2c:	2a25      	cmp	r2, #37	@ 0x25
 8005a2e:	d1f9      	bne.n	8005a24 <_svfiprintf_r+0x54>
 8005a30:	ebba 0b04 	subs.w	fp, sl, r4
 8005a34:	d00b      	beq.n	8005a4e <_svfiprintf_r+0x7e>
 8005a36:	465b      	mov	r3, fp
 8005a38:	4622      	mov	r2, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f7ff ff6b 	bl	8005918 <__ssputs_r>
 8005a42:	3001      	adds	r0, #1
 8005a44:	f000 80a7 	beq.w	8005b96 <_svfiprintf_r+0x1c6>
 8005a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a4a:	445a      	add	r2, fp
 8005a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 809f 	beq.w	8005b96 <_svfiprintf_r+0x1c6>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a62:	f10a 0a01 	add.w	sl, sl, #1
 8005a66:	9304      	str	r3, [sp, #16]
 8005a68:	9307      	str	r3, [sp, #28]
 8005a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a70:	4654      	mov	r4, sl
 8005a72:	2205      	movs	r2, #5
 8005a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a78:	484e      	ldr	r0, [pc, #312]	@ (8005bb4 <_svfiprintf_r+0x1e4>)
 8005a7a:	f000 fa61 	bl	8005f40 <memchr>
 8005a7e:	9a04      	ldr	r2, [sp, #16]
 8005a80:	b9d8      	cbnz	r0, 8005aba <_svfiprintf_r+0xea>
 8005a82:	06d0      	lsls	r0, r2, #27
 8005a84:	bf44      	itt	mi
 8005a86:	2320      	movmi	r3, #32
 8005a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a8c:	0711      	lsls	r1, r2, #28
 8005a8e:	bf44      	itt	mi
 8005a90:	232b      	movmi	r3, #43	@ 0x2b
 8005a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a96:	f89a 3000 	ldrb.w	r3, [sl]
 8005a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9c:	d015      	beq.n	8005aca <_svfiprintf_r+0xfa>
 8005a9e:	4654      	mov	r4, sl
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f04f 0c0a 	mov.w	ip, #10
 8005aa6:	9a07      	ldr	r2, [sp, #28]
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aae:	3b30      	subs	r3, #48	@ 0x30
 8005ab0:	2b09      	cmp	r3, #9
 8005ab2:	d94b      	bls.n	8005b4c <_svfiprintf_r+0x17c>
 8005ab4:	b1b0      	cbz	r0, 8005ae4 <_svfiprintf_r+0x114>
 8005ab6:	9207      	str	r2, [sp, #28]
 8005ab8:	e014      	b.n	8005ae4 <_svfiprintf_r+0x114>
 8005aba:	eba0 0308 	sub.w	r3, r0, r8
 8005abe:	fa09 f303 	lsl.w	r3, r9, r3
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	46a2      	mov	sl, r4
 8005ac6:	9304      	str	r3, [sp, #16]
 8005ac8:	e7d2      	b.n	8005a70 <_svfiprintf_r+0xa0>
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	1d19      	adds	r1, r3, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	9103      	str	r1, [sp, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bfbb      	ittet	lt
 8005ad6:	425b      	neglt	r3, r3
 8005ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8005adc:	9307      	strge	r3, [sp, #28]
 8005ade:	9307      	strlt	r3, [sp, #28]
 8005ae0:	bfb8      	it	lt
 8005ae2:	9204      	strlt	r2, [sp, #16]
 8005ae4:	7823      	ldrb	r3, [r4, #0]
 8005ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ae8:	d10a      	bne.n	8005b00 <_svfiprintf_r+0x130>
 8005aea:	7863      	ldrb	r3, [r4, #1]
 8005aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aee:	d132      	bne.n	8005b56 <_svfiprintf_r+0x186>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	3402      	adds	r4, #2
 8005af4:	1d1a      	adds	r2, r3, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	9203      	str	r2, [sp, #12]
 8005afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005bb8 <_svfiprintf_r+0x1e8>
 8005b04:	2203      	movs	r2, #3
 8005b06:	4650      	mov	r0, sl
 8005b08:	7821      	ldrb	r1, [r4, #0]
 8005b0a:	f000 fa19 	bl	8005f40 <memchr>
 8005b0e:	b138      	cbz	r0, 8005b20 <_svfiprintf_r+0x150>
 8005b10:	2240      	movs	r2, #64	@ 0x40
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	eba0 000a 	sub.w	r0, r0, sl
 8005b18:	4082      	lsls	r2, r0
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	3401      	adds	r4, #1
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b24:	2206      	movs	r2, #6
 8005b26:	4825      	ldr	r0, [pc, #148]	@ (8005bbc <_svfiprintf_r+0x1ec>)
 8005b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b2c:	f000 fa08 	bl	8005f40 <memchr>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d036      	beq.n	8005ba2 <_svfiprintf_r+0x1d2>
 8005b34:	4b22      	ldr	r3, [pc, #136]	@ (8005bc0 <_svfiprintf_r+0x1f0>)
 8005b36:	bb1b      	cbnz	r3, 8005b80 <_svfiprintf_r+0x1b0>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	3307      	adds	r3, #7
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	3308      	adds	r3, #8
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b46:	4433      	add	r3, r6
 8005b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4a:	e76a      	b.n	8005a22 <_svfiprintf_r+0x52>
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	2001      	movs	r0, #1
 8005b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b54:	e7a8      	b.n	8005aa8 <_svfiprintf_r+0xd8>
 8005b56:	2300      	movs	r3, #0
 8005b58:	f04f 0c0a 	mov.w	ip, #10
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	3401      	adds	r4, #1
 8005b60:	9305      	str	r3, [sp, #20]
 8005b62:	4620      	mov	r0, r4
 8005b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b68:	3a30      	subs	r2, #48	@ 0x30
 8005b6a:	2a09      	cmp	r2, #9
 8005b6c:	d903      	bls.n	8005b76 <_svfiprintf_r+0x1a6>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0c6      	beq.n	8005b00 <_svfiprintf_r+0x130>
 8005b72:	9105      	str	r1, [sp, #20]
 8005b74:	e7c4      	b.n	8005b00 <_svfiprintf_r+0x130>
 8005b76:	4604      	mov	r4, r0
 8005b78:	2301      	movs	r3, #1
 8005b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7e:	e7f0      	b.n	8005b62 <_svfiprintf_r+0x192>
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4638      	mov	r0, r7
 8005b88:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <_svfiprintf_r+0x1f4>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	f3af 8000 	nop.w
 8005b90:	1c42      	adds	r2, r0, #1
 8005b92:	4606      	mov	r6, r0
 8005b94:	d1d6      	bne.n	8005b44 <_svfiprintf_r+0x174>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	065b      	lsls	r3, r3, #25
 8005b9a:	f53f af2d 	bmi.w	80059f8 <_svfiprintf_r+0x28>
 8005b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ba0:	e72c      	b.n	80059fc <_svfiprintf_r+0x2c>
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4638      	mov	r0, r7
 8005baa:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <_svfiprintf_r+0x1f4>)
 8005bac:	a904      	add	r1, sp, #16
 8005bae:	f000 f87d 	bl	8005cac <_printf_i>
 8005bb2:	e7ed      	b.n	8005b90 <_svfiprintf_r+0x1c0>
 8005bb4:	080062fa 	.word	0x080062fa
 8005bb8:	08006300 	.word	0x08006300
 8005bbc:	08006304 	.word	0x08006304
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	08005919 	.word	0x08005919

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4616      	mov	r6, r2
 8005bce:	4698      	mov	r8, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bfb8      	it	lt
 8005bda:	4613      	movlt	r3, r2
 8005bdc:	6033      	str	r3, [r6, #0]
 8005bde:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005be2:	460c      	mov	r4, r1
 8005be4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005be8:	b10a      	cbz	r2, 8005bee <_printf_common+0x26>
 8005bea:	3301      	adds	r3, #1
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	0699      	lsls	r1, r3, #26
 8005bf2:	bf42      	ittt	mi
 8005bf4:	6833      	ldrmi	r3, [r6, #0]
 8005bf6:	3302      	addmi	r3, #2
 8005bf8:	6033      	strmi	r3, [r6, #0]
 8005bfa:	6825      	ldr	r5, [r4, #0]
 8005bfc:	f015 0506 	ands.w	r5, r5, #6
 8005c00:	d106      	bne.n	8005c10 <_printf_common+0x48>
 8005c02:	f104 0a19 	add.w	sl, r4, #25
 8005c06:	68e3      	ldr	r3, [r4, #12]
 8005c08:	6832      	ldr	r2, [r6, #0]
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	42ab      	cmp	r3, r5
 8005c0e:	dc2b      	bgt.n	8005c68 <_printf_common+0xa0>
 8005c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	3b00      	subs	r3, #0
 8005c18:	bf18      	it	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	0692      	lsls	r2, r2, #26
 8005c1e:	d430      	bmi.n	8005c82 <_printf_common+0xba>
 8005c20:	4641      	mov	r1, r8
 8005c22:	4638      	mov	r0, r7
 8005c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c28:	47c8      	blx	r9
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d023      	beq.n	8005c76 <_printf_common+0xae>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	6922      	ldr	r2, [r4, #16]
 8005c32:	f003 0306 	and.w	r3, r3, #6
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	bf14      	ite	ne
 8005c3a:	2500      	movne	r5, #0
 8005c3c:	6833      	ldreq	r3, [r6, #0]
 8005c3e:	f04f 0600 	mov.w	r6, #0
 8005c42:	bf08      	it	eq
 8005c44:	68e5      	ldreq	r5, [r4, #12]
 8005c46:	f104 041a 	add.w	r4, r4, #26
 8005c4a:	bf08      	it	eq
 8005c4c:	1aed      	subeq	r5, r5, r3
 8005c4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c52:	bf08      	it	eq
 8005c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfc4      	itt	gt
 8005c5c:	1a9b      	subgt	r3, r3, r2
 8005c5e:	18ed      	addgt	r5, r5, r3
 8005c60:	42b5      	cmp	r5, r6
 8005c62:	d11a      	bne.n	8005c9a <_printf_common+0xd2>
 8005c64:	2000      	movs	r0, #0
 8005c66:	e008      	b.n	8005c7a <_printf_common+0xb2>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c8      	blx	r9
 8005c72:	3001      	adds	r0, #1
 8005c74:	d103      	bne.n	8005c7e <_printf_common+0xb6>
 8005c76:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	3501      	adds	r5, #1
 8005c80:	e7c1      	b.n	8005c06 <_printf_common+0x3e>
 8005c82:	2030      	movs	r0, #48	@ 0x30
 8005c84:	18e1      	adds	r1, r4, r3
 8005c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c90:	4422      	add	r2, r4
 8005c92:	3302      	adds	r3, #2
 8005c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c98:	e7c2      	b.n	8005c20 <_printf_common+0x58>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	47c8      	blx	r9
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d0e6      	beq.n	8005c76 <_printf_common+0xae>
 8005ca8:	3601      	adds	r6, #1
 8005caa:	e7d9      	b.n	8005c60 <_printf_common+0x98>

08005cac <_printf_i>:
 8005cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	7e0f      	ldrb	r7, [r1, #24]
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	2f78      	cmp	r7, #120	@ 0x78
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	469a      	mov	sl, r3
 8005cbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cc2:	d807      	bhi.n	8005cd4 <_printf_i+0x28>
 8005cc4:	2f62      	cmp	r7, #98	@ 0x62
 8005cc6:	d80a      	bhi.n	8005cde <_printf_i+0x32>
 8005cc8:	2f00      	cmp	r7, #0
 8005cca:	f000 80d3 	beq.w	8005e74 <_printf_i+0x1c8>
 8005cce:	2f58      	cmp	r7, #88	@ 0x58
 8005cd0:	f000 80ba 	beq.w	8005e48 <_printf_i+0x19c>
 8005cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cdc:	e03a      	b.n	8005d54 <_printf_i+0xa8>
 8005cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ce2:	2b15      	cmp	r3, #21
 8005ce4:	d8f6      	bhi.n	8005cd4 <_printf_i+0x28>
 8005ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8005cec <_printf_i+0x40>)
 8005ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cec:	08005d45 	.word	0x08005d45
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005cd5 	.word	0x08005cd5
 8005cf8:	08005cd5 	.word	0x08005cd5
 8005cfc:	08005cd5 	.word	0x08005cd5
 8005d00:	08005cd5 	.word	0x08005cd5
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005cd5 	.word	0x08005cd5
 8005d0c:	08005cd5 	.word	0x08005cd5
 8005d10:	08005cd5 	.word	0x08005cd5
 8005d14:	08005cd5 	.word	0x08005cd5
 8005d18:	08005e5b 	.word	0x08005e5b
 8005d1c:	08005d83 	.word	0x08005d83
 8005d20:	08005e15 	.word	0x08005e15
 8005d24:	08005cd5 	.word	0x08005cd5
 8005d28:	08005cd5 	.word	0x08005cd5
 8005d2c:	08005e7d 	.word	0x08005e7d
 8005d30:	08005cd5 	.word	0x08005cd5
 8005d34:	08005d83 	.word	0x08005d83
 8005d38:	08005cd5 	.word	0x08005cd5
 8005d3c:	08005cd5 	.word	0x08005cd5
 8005d40:	08005e1d 	.word	0x08005e1d
 8005d44:	6833      	ldr	r3, [r6, #0]
 8005d46:	1d1a      	adds	r2, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6032      	str	r2, [r6, #0]
 8005d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d54:	2301      	movs	r3, #1
 8005d56:	e09e      	b.n	8005e96 <_printf_i+0x1ea>
 8005d58:	6833      	ldr	r3, [r6, #0]
 8005d5a:	6820      	ldr	r0, [r4, #0]
 8005d5c:	1d19      	adds	r1, r3, #4
 8005d5e:	6031      	str	r1, [r6, #0]
 8005d60:	0606      	lsls	r6, r0, #24
 8005d62:	d501      	bpl.n	8005d68 <_printf_i+0xbc>
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	e003      	b.n	8005d70 <_printf_i+0xc4>
 8005d68:	0645      	lsls	r5, r0, #25
 8005d6a:	d5fb      	bpl.n	8005d64 <_printf_i+0xb8>
 8005d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	da03      	bge.n	8005d7c <_printf_i+0xd0>
 8005d74:	232d      	movs	r3, #45	@ 0x2d
 8005d76:	426d      	negs	r5, r5
 8005d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d7c:	230a      	movs	r3, #10
 8005d7e:	4859      	ldr	r0, [pc, #356]	@ (8005ee4 <_printf_i+0x238>)
 8005d80:	e011      	b.n	8005da6 <_printf_i+0xfa>
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	0608      	lsls	r0, r1, #24
 8005d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d8c:	d402      	bmi.n	8005d94 <_printf_i+0xe8>
 8005d8e:	0649      	lsls	r1, r1, #25
 8005d90:	bf48      	it	mi
 8005d92:	b2ad      	uxthmi	r5, r5
 8005d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d96:	6033      	str	r3, [r6, #0]
 8005d98:	bf14      	ite	ne
 8005d9a:	230a      	movne	r3, #10
 8005d9c:	2308      	moveq	r3, #8
 8005d9e:	4851      	ldr	r0, [pc, #324]	@ (8005ee4 <_printf_i+0x238>)
 8005da0:	2100      	movs	r1, #0
 8005da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005da6:	6866      	ldr	r6, [r4, #4]
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	bfa8      	it	ge
 8005dac:	6821      	ldrge	r1, [r4, #0]
 8005dae:	60a6      	str	r6, [r4, #8]
 8005db0:	bfa4      	itt	ge
 8005db2:	f021 0104 	bicge.w	r1, r1, #4
 8005db6:	6021      	strge	r1, [r4, #0]
 8005db8:	b90d      	cbnz	r5, 8005dbe <_printf_i+0x112>
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	d04b      	beq.n	8005e56 <_printf_i+0x1aa>
 8005dbe:	4616      	mov	r6, r2
 8005dc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dc4:	fb03 5711 	mls	r7, r3, r1, r5
 8005dc8:	5dc7      	ldrb	r7, [r0, r7]
 8005dca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dce:	462f      	mov	r7, r5
 8005dd0:	42bb      	cmp	r3, r7
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	d9f4      	bls.n	8005dc0 <_printf_i+0x114>
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d10b      	bne.n	8005df2 <_printf_i+0x146>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	07df      	lsls	r7, r3, #31
 8005dde:	d508      	bpl.n	8005df2 <_printf_i+0x146>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	6861      	ldr	r1, [r4, #4]
 8005de4:	4299      	cmp	r1, r3
 8005de6:	bfde      	ittt	le
 8005de8:	2330      	movle	r3, #48	@ 0x30
 8005dea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005df2:	1b92      	subs	r2, r2, r6
 8005df4:	6122      	str	r2, [r4, #16]
 8005df6:	464b      	mov	r3, r9
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	f8cd a000 	str.w	sl, [sp]
 8005e00:	aa03      	add	r2, sp, #12
 8005e02:	f7ff fee1 	bl	8005bc8 <_printf_common>
 8005e06:	3001      	adds	r0, #1
 8005e08:	d14a      	bne.n	8005ea0 <_printf_i+0x1f4>
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	b004      	add	sp, #16
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	f043 0320 	orr.w	r3, r3, #32
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	2778      	movs	r7, #120	@ 0x78
 8005e1e:	4832      	ldr	r0, [pc, #200]	@ (8005ee8 <_printf_i+0x23c>)
 8005e20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	6831      	ldr	r1, [r6, #0]
 8005e28:	061f      	lsls	r7, r3, #24
 8005e2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e2e:	d402      	bmi.n	8005e36 <_printf_i+0x18a>
 8005e30:	065f      	lsls	r7, r3, #25
 8005e32:	bf48      	it	mi
 8005e34:	b2ad      	uxthmi	r5, r5
 8005e36:	6031      	str	r1, [r6, #0]
 8005e38:	07d9      	lsls	r1, r3, #31
 8005e3a:	bf44      	itt	mi
 8005e3c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e40:	6023      	strmi	r3, [r4, #0]
 8005e42:	b11d      	cbz	r5, 8005e4c <_printf_i+0x1a0>
 8005e44:	2310      	movs	r3, #16
 8005e46:	e7ab      	b.n	8005da0 <_printf_i+0xf4>
 8005e48:	4826      	ldr	r0, [pc, #152]	@ (8005ee4 <_printf_i+0x238>)
 8005e4a:	e7e9      	b.n	8005e20 <_printf_i+0x174>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	e7f6      	b.n	8005e44 <_printf_i+0x198>
 8005e56:	4616      	mov	r6, r2
 8005e58:	e7bd      	b.n	8005dd6 <_printf_i+0x12a>
 8005e5a:	6833      	ldr	r3, [r6, #0]
 8005e5c:	6825      	ldr	r5, [r4, #0]
 8005e5e:	1d18      	adds	r0, r3, #4
 8005e60:	6961      	ldr	r1, [r4, #20]
 8005e62:	6030      	str	r0, [r6, #0]
 8005e64:	062e      	lsls	r6, r5, #24
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	d501      	bpl.n	8005e6e <_printf_i+0x1c2>
 8005e6a:	6019      	str	r1, [r3, #0]
 8005e6c:	e002      	b.n	8005e74 <_printf_i+0x1c8>
 8005e6e:	0668      	lsls	r0, r5, #25
 8005e70:	d5fb      	bpl.n	8005e6a <_printf_i+0x1be>
 8005e72:	8019      	strh	r1, [r3, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	4616      	mov	r6, r2
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	e7bc      	b.n	8005df6 <_printf_i+0x14a>
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	6032      	str	r2, [r6, #0]
 8005e84:	681e      	ldr	r6, [r3, #0]
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f859 	bl	8005f40 <memchr>
 8005e8e:	b108      	cbz	r0, 8005e94 <_printf_i+0x1e8>
 8005e90:	1b80      	subs	r0, r0, r6
 8005e92:	6060      	str	r0, [r4, #4]
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e9e:	e7aa      	b.n	8005df6 <_printf_i+0x14a>
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	47d0      	blx	sl
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0ad      	beq.n	8005e0a <_printf_i+0x15e>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	079b      	lsls	r3, r3, #30
 8005eb2:	d413      	bmi.n	8005edc <_printf_i+0x230>
 8005eb4:	68e0      	ldr	r0, [r4, #12]
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	4298      	cmp	r0, r3
 8005eba:	bfb8      	it	lt
 8005ebc:	4618      	movlt	r0, r3
 8005ebe:	e7a6      	b.n	8005e0e <_printf_i+0x162>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	47d0      	blx	sl
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d09d      	beq.n	8005e0a <_printf_i+0x15e>
 8005ece:	3501      	adds	r5, #1
 8005ed0:	68e3      	ldr	r3, [r4, #12]
 8005ed2:	9903      	ldr	r1, [sp, #12]
 8005ed4:	1a5b      	subs	r3, r3, r1
 8005ed6:	42ab      	cmp	r3, r5
 8005ed8:	dcf2      	bgt.n	8005ec0 <_printf_i+0x214>
 8005eda:	e7eb      	b.n	8005eb4 <_printf_i+0x208>
 8005edc:	2500      	movs	r5, #0
 8005ede:	f104 0619 	add.w	r6, r4, #25
 8005ee2:	e7f5      	b.n	8005ed0 <_printf_i+0x224>
 8005ee4:	0800630b 	.word	0x0800630b
 8005ee8:	0800631c 	.word	0x0800631c

08005eec <memmove>:
 8005eec:	4288      	cmp	r0, r1
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	eb01 0402 	add.w	r4, r1, r2
 8005ef4:	d902      	bls.n	8005efc <memmove+0x10>
 8005ef6:	4284      	cmp	r4, r0
 8005ef8:	4623      	mov	r3, r4
 8005efa:	d807      	bhi.n	8005f0c <memmove+0x20>
 8005efc:	1e43      	subs	r3, r0, #1
 8005efe:	42a1      	cmp	r1, r4
 8005f00:	d008      	beq.n	8005f14 <memmove+0x28>
 8005f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f0a:	e7f8      	b.n	8005efe <memmove+0x12>
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4402      	add	r2, r0
 8005f10:	428a      	cmp	r2, r1
 8005f12:	d100      	bne.n	8005f16 <memmove+0x2a>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f1e:	e7f7      	b.n	8005f10 <memmove+0x24>

08005f20 <_sbrk_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	2300      	movs	r3, #0
 8005f24:	4d05      	ldr	r5, [pc, #20]	@ (8005f3c <_sbrk_r+0x1c>)
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fa fd14 	bl	8000958 <_sbrk>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_sbrk_r+0x1a>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_sbrk_r+0x1a>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	200019fc 	.word	0x200019fc

08005f40 <memchr>:
 8005f40:	4603      	mov	r3, r0
 8005f42:	b510      	push	{r4, lr}
 8005f44:	b2c9      	uxtb	r1, r1
 8005f46:	4402      	add	r2, r0
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	d101      	bne.n	8005f52 <memchr+0x12>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e003      	b.n	8005f5a <memchr+0x1a>
 8005f52:	7804      	ldrb	r4, [r0, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	428c      	cmp	r4, r1
 8005f58:	d1f6      	bne.n	8005f48 <memchr+0x8>
 8005f5a:	bd10      	pop	{r4, pc}

08005f5c <_realloc_r>:
 8005f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	4680      	mov	r8, r0
 8005f62:	4615      	mov	r5, r2
 8005f64:	460c      	mov	r4, r1
 8005f66:	b921      	cbnz	r1, 8005f72 <_realloc_r+0x16>
 8005f68:	4611      	mov	r1, r2
 8005f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	f7ff bc47 	b.w	8005800 <_malloc_r>
 8005f72:	b92a      	cbnz	r2, 8005f80 <_realloc_r+0x24>
 8005f74:	f7ff fbda 	bl	800572c <_free_r>
 8005f78:	2400      	movs	r4, #0
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f80:	f000 f81a 	bl	8005fb8 <_malloc_usable_size_r>
 8005f84:	4285      	cmp	r5, r0
 8005f86:	4606      	mov	r6, r0
 8005f88:	d802      	bhi.n	8005f90 <_realloc_r+0x34>
 8005f8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f8e:	d8f4      	bhi.n	8005f7a <_realloc_r+0x1e>
 8005f90:	4629      	mov	r1, r5
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7ff fc34 	bl	8005800 <_malloc_r>
 8005f98:	4607      	mov	r7, r0
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d0ec      	beq.n	8005f78 <_realloc_r+0x1c>
 8005f9e:	42b5      	cmp	r5, r6
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	bf28      	it	cs
 8005fa6:	4632      	movcs	r2, r6
 8005fa8:	f7ff fbb2 	bl	8005710 <memcpy>
 8005fac:	4621      	mov	r1, r4
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f7ff fbbc 	bl	800572c <_free_r>
 8005fb4:	463c      	mov	r4, r7
 8005fb6:	e7e0      	b.n	8005f7a <_realloc_r+0x1e>

08005fb8 <_malloc_usable_size_r>:
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f18      	subs	r0, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfbc      	itt	lt
 8005fc2:	580b      	ldrlt	r3, [r1, r0]
 8005fc4:	18c0      	addlt	r0, r0, r3
 8005fc6:	4770      	bx	lr

08005fc8 <_init>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	bf00      	nop
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_fini>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr
