
STM32F1-mango-kea.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005eb4  08005eb4  00006eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800623c  0800623c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800623c  0800623c  0000723c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006244  08006244  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006248  08006248  00007248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800624c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000005c  080062a8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080062a8  00008480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bfe  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002663  00000000  00000000  00018c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d14  00000000  00000000  0001c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190f2  00000000  00000000  0001d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001437f  00000000  00000000  0003618e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dcd4  00000000  00000000  0004a50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d81e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  000d8224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000dccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e9c 	.word	0x08005e9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005e9c 	.word	0x08005e9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f001 f84d 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f87f 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa55 	bl	8000618 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f9ff 	bl	8000570 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000172:	f000 fa27 	bl	80005c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000176:	f000 f8b3 	bl	80002e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800017a:	f000 f8df 	bl	800033c <MX_I2C2_Init>
  MX_TIM3_Init();
 800017e:	f000 f9a9 	bl	80004d4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000182:	f000 f909 	bl	8000398 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000186:	f000 f959 	bl	800043c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  user_uart_send_msg(&huart1, UART_CONNECT_MSG);
 800018a:	492b      	ldr	r1, [pc, #172]	@ (8000238 <main+0xdc>)
 800018c:	482b      	ldr	r0, [pc, #172]	@ (800023c <main+0xe0>)
 800018e:	f000 ffd9 	bl	8001144 <user_uart_send_msg>
  user_uart_send_msg(&huart2, UART_CONNECT_MSG);
 8000192:	4929      	ldr	r1, [pc, #164]	@ (8000238 <main+0xdc>)
 8000194:	482a      	ldr	r0, [pc, #168]	@ (8000240 <main+0xe4>)
 8000196:	f000 ffd5 	bl	8001144 <user_uart_send_msg>
  user_uart_send_msg(&huart1, "[Done] Devices Init.");
 800019a:	492a      	ldr	r1, [pc, #168]	@ (8000244 <main+0xe8>)
 800019c:	4827      	ldr	r0, [pc, #156]	@ (800023c <main+0xe0>)
 800019e:	f000 ffd1 	bl	8001144 <user_uart_send_msg>
  user_gpio_led_off_all();
 80001a2:	f000 fd2f 	bl	8000c04 <user_gpio_led_off_all>
  user_uart_send_msg(&huart1, "[Done] user_gpio_led_off_all.");
 80001a6:	4928      	ldr	r1, [pc, #160]	@ (8000248 <main+0xec>)
 80001a8:	4824      	ldr	r0, [pc, #144]	@ (800023c <main+0xe0>)
 80001aa:	f000 ffcb 	bl	8001144 <user_uart_send_msg>

  user_uart_send_msg(&huart1, "[Start] user_gpio_fnd_test.");
 80001ae:	4927      	ldr	r1, [pc, #156]	@ (800024c <main+0xf0>)
 80001b0:	4822      	ldr	r0, [pc, #136]	@ (800023c <main+0xe0>)
 80001b2:	f000 ffc7 	bl	8001144 <user_uart_send_msg>
  user_gpio_fnd_test();
 80001b6:	f000 fd6d 	bl	8000c94 <user_gpio_fnd_test>
  user_uart_send_msg(&huart1, "[Done] user_gpio_fnd_test.");
 80001ba:	4925      	ldr	r1, [pc, #148]	@ (8000250 <main+0xf4>)
 80001bc:	481f      	ldr	r0, [pc, #124]	@ (800023c <main+0xe0>)
 80001be:	f000 ffc1 	bl	8001144 <user_uart_send_msg>

  HAL_TIM_Base_Start_IT(&htim1);
 80001c2:	4824      	ldr	r0, [pc, #144]	@ (8000254 <main+0xf8>)
 80001c4:	f003 fee2 	bl	8003f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80001c8:	4823      	ldr	r0, [pc, #140]	@ (8000258 <main+0xfc>)
 80001ca:	f003 fedf 	bl	8003f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001ce:	4823      	ldr	r0, [pc, #140]	@ (800025c <main+0x100>)
 80001d0:	f003 fedc 	bl	8003f8c <HAL_TIM_Base_Start_IT>
  user_uart_send_msg(&huart1, "[Done] Timer Interrupt Start.");
 80001d4:	4922      	ldr	r1, [pc, #136]	@ (8000260 <main+0x104>)
 80001d6:	4819      	ldr	r0, [pc, #100]	@ (800023c <main+0xe0>)
 80001d8:	f000 ffb4 	bl	8001144 <user_uart_send_msg>

  user_i2c_bh17_test(20);
 80001dc:	2014      	movs	r0, #20
 80001de:	f000 fe99 	bl	8000f14 <user_i2c_bh17_test>
  //user_i2c_bh17_device_set();

  HAL_StatusTypeDef hal_ret;
  while (1) {
	  memset(UartBuf, 0, SIZEOF(UartBuf));
 80001e2:	22a0      	movs	r2, #160	@ 0xa0
 80001e4:	2100      	movs	r1, #0
 80001e6:	481f      	ldr	r0, [pc, #124]	@ (8000264 <main+0x108>)
 80001e8:	f005 f9c8 	bl	800557c <memset>
  	  hal_ret = HAL_UART_Receive(&huart1, UartBuf, 1, 100);	//TimeOut == 100ms
 80001ec:	2364      	movs	r3, #100	@ 0x64
 80001ee:	2201      	movs	r2, #1
 80001f0:	491c      	ldr	r1, [pc, #112]	@ (8000264 <main+0x108>)
 80001f2:	4812      	ldr	r0, [pc, #72]	@ (800023c <main+0xe0>)
 80001f4:	f004 fb4b 	bl	800488e <HAL_UART_Receive>
 80001f8:	4603      	mov	r3, r0
 80001fa:	71fb      	strb	r3, [r7, #7]
  	  if (hal_ret == HAL_OK) {
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d1ef      	bne.n	80001e2 <main+0x86>
  		  user_uart_send_char(&huart1, UartBuf);
 8000202:	4918      	ldr	r1, [pc, #96]	@ (8000264 <main+0x108>)
 8000204:	480d      	ldr	r0, [pc, #52]	@ (800023c <main+0xe0>)
 8000206:	f000 ff77 	bl	80010f8 <user_uart_send_char>

  		  //digit = isdigit(UartBuf[0]) ? UartBuf[0] - '0' : 0;
  		  digit = atoi((const char *)UartBuf);
 800020a:	4816      	ldr	r0, [pc, #88]	@ (8000264 <main+0x108>)
 800020c:	f005 f90e 	bl	800542c <atoi>
 8000210:	6038      	str	r0, [r7, #0]
  		  if (digit >= 0 && digit <= 9) {
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db07      	blt.n	8000228 <main+0xcc>
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	2b09      	cmp	r3, #9
 800021c:	dc04      	bgt.n	8000228 <main+0xcc>
  			  user_gpio_fnd_clear();
 800021e:	f000 fd15 	bl	8000c4c <user_gpio_fnd_clear>
  			  user_gpio_fnd_digit(digit);
 8000222:	6838      	ldr	r0, [r7, #0]
 8000224:	f000 fda6 	bl	8000d74 <user_gpio_fnd_digit>
  		  }

  		  if (UartBuf[0] == '\r')
 8000228:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <main+0x108>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b0d      	cmp	r3, #13
 800022e:	d1d8      	bne.n	80001e2 <main+0x86>
  			  user_i2c_bh17_test(20);
 8000230:	2014      	movs	r0, #20
 8000232:	f000 fe6f 	bl	8000f14 <user_i2c_bh17_test>
	  memset(UartBuf, 0, SIZEOF(UartBuf));
 8000236:	e7d4      	b.n	80001e2 <main+0x86>
 8000238:	08005eb4 	.word	0x08005eb4
 800023c:	200001f8 	.word	0x200001f8
 8000240:	20000240 	.word	0x20000240
 8000244:	08005ec4 	.word	0x08005ec4
 8000248:	08005edc 	.word	0x08005edc
 800024c:	08005efc 	.word	0x08005efc
 8000250:	08005f18 	.word	0x08005f18
 8000254:	20000120 	.word	0x20000120
 8000258:	20000168 	.word	0x20000168
 800025c:	200001b0 	.word	0x200001b0
 8000260:	08005f34 	.word	0x08005f34
 8000264:	20000294 	.word	0x20000294

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	@ 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	@ 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f005 f980 	bl	800557c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	2310      	movs	r3, #16
 8000294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fa14 	bl	80036cc <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002aa:	f000 fa37 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fc82 	bl	8003bd0 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d2:	f000 fa23 	bl	800071c <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	@ 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <MX_I2C1_Init+0x50>)
 80002e6:	4a13      	ldr	r2, [pc, #76]	@ (8000334 <MX_I2C1_Init+0x54>)
 80002e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ea:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <MX_I2C1_Init+0x50>)
 80002ec:	4a12      	ldr	r2, [pc, #72]	@ (8000338 <MX_I2C1_Init+0x58>)
 80002ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <MX_I2C1_Init+0x50>)
 80002fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <MX_I2C1_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800030a:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <MX_I2C1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000310:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031c:	4804      	ldr	r0, [pc, #16]	@ (8000330 <MX_I2C1_Init+0x50>)
 800031e:	f001 fb91 	bl	8001a44 <HAL_I2C_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 f9f8 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000078 	.word	0x20000078
 8000334:	40005400 	.word	0x40005400
 8000338:	000186a0 	.word	0x000186a0

0800033c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_I2C2_Init+0x50>)
 8000342:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <MX_I2C2_Init+0x54>)
 8000344:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_I2C2_Init+0x50>)
 8000348:	4a12      	ldr	r2, [pc, #72]	@ (8000394 <MX_I2C2_Init+0x58>)
 800034a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_I2C2_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_I2C2_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <MX_I2C2_Init+0x50>)
 800035a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800035e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <MX_I2C2_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <MX_I2C2_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <MX_I2C2_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_I2C2_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000378:	4804      	ldr	r0, [pc, #16]	@ (800038c <MX_I2C2_Init+0x50>)
 800037a:	f001 fb63 	bl	8001a44 <HAL_I2C_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 f9ca 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200000cc 	.word	0x200000cc
 8000390:	40005800 	.word	0x40005800
 8000394:	000186a0 	.word	0x000186a0

08000398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	463b      	mov	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003b6:	4a20      	ldr	r2, [pc, #128]	@ (8000438 <MX_TIM1_Init+0xa0>)
 80003b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 80003ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003bc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80003c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d6:	4b17      	ldr	r3, [pc, #92]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e2:	4814      	ldr	r0, [pc, #80]	@ (8000434 <MX_TIM1_Init+0x9c>)
 80003e4:	f003 fd82 	bl	8003eec <HAL_TIM_Base_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80003ee:	f000 f995 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f8:	f107 0308 	add.w	r3, r7, #8
 80003fc:	4619      	mov	r1, r3
 80003fe:	480d      	ldr	r0, [pc, #52]	@ (8000434 <MX_TIM1_Init+0x9c>)
 8000400:	f003 ff1e 	bl	8004240 <HAL_TIM_ConfigClockSource>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800040a:	f000 f987 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040e:	2300      	movs	r3, #0
 8000410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000416:	463b      	mov	r3, r7
 8000418:	4619      	mov	r1, r3
 800041a:	4806      	ldr	r0, [pc, #24]	@ (8000434 <MX_TIM1_Init+0x9c>)
 800041c:	f004 f8f4 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000426:	f000 f979 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000120 	.word	0x20000120
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000462:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b19      	ldr	r3, [pc, #100]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000470:	220a      	movs	r2, #10
 8000472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000480:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000482:	f003 fd33 	bl	8003eec <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800048c:	f000 f946 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800049e:	f003 fecf 	bl	8004240 <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a8:	f000 f938 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_TIM2_Init+0x94>)
 80004ba:	f004 f8a5 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c4:	f000 f92a 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000168 	.word	0x20000168

080004d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	463b      	mov	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000568 <MX_TIM3_Init+0x94>)
 80004f2:	4a1e      	ldr	r2, [pc, #120]	@ (800056c <MX_TIM3_Init+0x98>)
 80004f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <MX_TIM3_Init+0x94>)
 80004f8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80004fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <MX_TIM3_Init+0x94>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <MX_TIM3_Init+0x94>)
 8000506:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800050a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050c:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_TIM3_Init+0x94>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <MX_TIM3_Init+0x94>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000518:	4813      	ldr	r0, [pc, #76]	@ (8000568 <MX_TIM3_Init+0x94>)
 800051a:	f003 fce7 	bl	8003eec <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000524:	f000 f8fa 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800052c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4619      	mov	r1, r3
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <MX_TIM3_Init+0x94>)
 8000536:	f003 fe83 	bl	8004240 <HAL_TIM_ConfigClockSource>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 f8ec 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000544:	2320      	movs	r3, #32
 8000546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_TIM3_Init+0x94>)
 8000552:	f004 f859 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800055c:	f000 f8de 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200001b0 	.word	0x200001b0
 800056c:	40000400 	.word	0x40000400

08000570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <MX_USART1_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a8:	f004 f89e 	bl	80046e8 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 f8b3 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200001f8 	.word	0x200001f8
 80005c0:	40013800 	.word	0x40013800

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	@ (8000614 <MX_USART2_UART_Init+0x50>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_USART2_UART_Init+0x4c>)
 80005fc:	f004 f874 	bl	80046e8 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000606:	f000 f889 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000240 	.word	0x20000240
 8000614:	40004400 	.word	0x40004400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	4b36      	ldr	r3, [pc, #216]	@ (8000708 <MX_GPIO_Init+0xf0>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a35      	ldr	r2, [pc, #212]	@ (8000708 <MX_GPIO_Init+0xf0>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b33      	ldr	r3, [pc, #204]	@ (8000708 <MX_GPIO_Init+0xf0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b30      	ldr	r3, [pc, #192]	@ (8000708 <MX_GPIO_Init+0xf0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a2f      	ldr	r2, [pc, #188]	@ (8000708 <MX_GPIO_Init+0xf0>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <MX_GPIO_Init+0xf0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_GPIO_Init+0xf0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <MX_GPIO_Init+0xf0>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <MX_GPIO_Init+0xf0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000674:	2200      	movs	r2, #0
 8000676:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800067a:	4824      	ldr	r0, [pc, #144]	@ (800070c <MX_GPIO_Init+0xf4>)
 800067c:	f001 f998 	bl	80019b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000686:	4822      	ldr	r0, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xf8>)
 8000688:	f001 f992 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800068c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000690:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	4819      	ldr	r0, [pc, #100]	@ (800070c <MX_GPIO_Init+0xf4>)
 80006a6:	f000 ffff 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006aa:	2303      	movs	r3, #3
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <MX_GPIO_Init+0xfc>)
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	4816      	ldr	r0, [pc, #88]	@ (8000718 <MX_GPIO_Init+0x100>)
 80006be:	f000 fff3 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80006c2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	@ (8000710 <MX_GPIO_Init+0xf8>)
 80006dc:	f000 ffe4 	bl	80016a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2006      	movs	r0, #6
 80006e6:	f000 fee8 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ea:	2006      	movs	r0, #6
 80006ec:	f000 ff01 	bl	80014f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2007      	movs	r0, #7
 80006f6:	f000 fee0 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006fa:	2007      	movs	r0, #7
 80006fc:	f000 fef9 	bl	80014f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	40011000 	.word	0x40011000
 8000710:	40010c00 	.word	0x40010c00
 8000714:	10110000 	.word	0x10110000
 8000718:	40010800 	.word	0x40010800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <HAL_MspInit+0x40>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <HAL_MspInit+0x40>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <HAL_MspInit+0x40>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_MspInit+0x40>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <HAL_MspInit+0x40>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_MspInit+0x40>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a2f      	ldr	r2, [pc, #188]	@ (8000844 <HAL_I2C_MspInit+0xd8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d12c      	bne.n	80007e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a2d      	ldr	r2, [pc, #180]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a4:	23c0      	movs	r3, #192	@ 0xc0
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4825      	ldr	r0, [pc, #148]	@ (800084c <HAL_I2C_MspInit+0xe0>)
 80007b8:	f000 ff76 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007bc:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	4a21      	ldr	r2, [pc, #132]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	61d3      	str	r3, [r2, #28]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	201f      	movs	r0, #31
 80007da:	f000 fe6e 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007de:	201f      	movs	r0, #31
 80007e0:	f000 fe87 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007e4:	e029      	b.n	800083a <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <HAL_I2C_MspInit+0xe4>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d124      	bne.n	800083a <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000808:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080e:	2312      	movs	r3, #18
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <HAL_I2C_MspInit+0xe0>)
 800081e:	f000 ff43 	bl	80016a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 8000828:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_I2C_MspInit+0xdc>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40005400 	.word	0x40005400
 8000848:	40021000 	.word	0x40021000
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40005800 	.word	0x40005800

08000854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <HAL_TIM_Base_MspInit+0xdc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12c      	bne.n	80008c0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000866:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a32      	ldr	r2, [pc, #200]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 800086c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2018      	movs	r0, #24
 8000884:	f000 fe19 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000888:	2018      	movs	r0, #24
 800088a:	f000 fe32 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2019      	movs	r0, #25
 8000894:	f000 fe11 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000898:	2019      	movs	r0, #25
 800089a:	f000 fe2a 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	201a      	movs	r0, #26
 80008a4:	f000 fe09 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80008a8:	201a      	movs	r0, #26
 80008aa:	f000 fe22 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	201b      	movs	r0, #27
 80008b4:	f000 fe01 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80008b8:	201b      	movs	r0, #27
 80008ba:	f000 fe1a 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008be:	e032      	b.n	8000926 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c8:	d114      	bne.n	80008f4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a19      	ldr	r2, [pc, #100]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	201c      	movs	r0, #28
 80008e8:	f000 fde7 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ec:	201c      	movs	r0, #28
 80008ee:	f000 fe00 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 80008f2:	e018      	b.n	8000926 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <HAL_TIM_Base_MspInit+0xe4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d113      	bne.n	8000926 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_TIM_Base_MspInit+0xe0>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201d      	movs	r0, #29
 800091c:	f000 fdcd 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000920:	201d      	movs	r0, #29
 8000922:	f000 fde6 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40012c00 	.word	0x40012c00
 8000934:	40021000 	.word	0x40021000
 8000938:	40000400 	.word	0x40000400

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	@ 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a3f      	ldr	r2, [pc, #252]	@ (8000a54 <HAL_UART_MspInit+0x118>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13a      	bne.n	80009d2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a3d      	ldr	r2, [pc, #244]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b3b      	ldr	r3, [pc, #236]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a37      	ldr	r2, [pc, #220]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800098c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4619      	mov	r1, r3
 80009a0:	482e      	ldr	r0, [pc, #184]	@ (8000a5c <HAL_UART_MspInit+0x120>)
 80009a2:	f000 fe81 	bl	80016a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4828      	ldr	r0, [pc, #160]	@ (8000a5c <HAL_UART_MspInit+0x120>)
 80009bc:	f000 fe74 	bl	80016a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2025      	movs	r0, #37	@ 0x25
 80009c6:	f000 fd78 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ca:	2025      	movs	r0, #37	@ 0x25
 80009cc:	f000 fd91 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d0:	e03c      	b.n	8000a4c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <HAL_UART_MspInit+0x124>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d137      	bne.n	8000a4c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_UART_MspInit+0x11c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <HAL_UART_MspInit+0x120>)
 8000a20:	f000 fe42 	bl	80016a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a24:	2308      	movs	r3, #8
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <HAL_UART_MspInit+0x120>)
 8000a38:	f000 fe36 	bl	80016a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2026      	movs	r0, #38	@ 0x26
 8000a42:	f000 fd3a 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a46:	2026      	movs	r0, #38	@ 0x26
 8000a48:	f000 fd53 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40004400 	.word	0x40004400

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <NMI_Handler+0x4>

08000a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 fbea 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 ffa7 	bl	8001a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f000 ffa0 	bl	8001a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <TIM1_BRK_IRQHandler+0x10>)
 8000ade:	f003 faa7 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000120 	.word	0x20000120

08000aec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM1_UP_IRQHandler+0x10>)
 8000af2:	f003 fa9d 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000120 	.word	0x20000120

08000b00 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000b06:	f003 fa93 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000120 	.word	0x20000120

08000b14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM1_CC_IRQHandler+0x10>)
 8000b1a:	f003 fa89 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000120 	.word	0x20000120

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <TIM2_IRQHandler+0x10>)
 8000b2e:	f003 fa7f 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000168 	.word	0x20000168

08000b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <TIM3_IRQHandler+0x10>)
 8000b42:	f003 fa75 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001b0 	.word	0x200001b0

08000b50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <I2C1_EV_IRQHandler+0x10>)
 8000b56:	f001 fa15 	bl	8001f84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000078 	.word	0x20000078

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f003 ff23 	bl	80049b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200001f8 	.word	0x200001f8

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f003 ff19 	bl	80049b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000240 	.word	0x20000240

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f004 fce6 	bl	800558c <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20005000 	.word	0x20005000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000288 	.word	0x20000288
 8000bf4:	20000480 	.word	0x20000480

08000bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <user_gpio_led_off_all>:

#include "user-gpio.h"


void user_gpio_led_off_all(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	/* GPIO pins : PB5(GPIO_PIN_5), PB8(GPIO_PIN_8), PB9(GPIO_PIN_9) */
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_1Y, USER_GPIO_LED_OFF);		//Yellow, Off
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <user_gpio_led_off_all+0x2c>)
 8000c0e:	f000 fecf 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_2R, USER_GPIO_LED_OFF);		//Red, Off
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <user_gpio_led_off_all+0x2c>)
 8000c1a:	f000 fec9 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, USER_GPIO_PIN_LED_3B, USER_GPIO_LED_OFF); 		//Blue, Off
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <user_gpio_led_off_all+0x2c>)
 8000c26:	f000 fec3 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <user_gpio_fnd_off_all>:

	HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_3B);	//Blue
}

void user_gpio_fnd_off_all(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	//FND Anode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, USER_GPIO_LED_OFF);		//FND_A_DP
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c3e:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <user_gpio_fnd_off_all+0x14>)
 8000c40:	f000 feb6 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40011000 	.word	0x40011000

08000c4c <user_gpio_fnd_clear>:

void user_gpio_fnd_clear(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	//FND Anode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, USER_GPIO_LED_ON);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <user_gpio_fnd_clear+0x20>)
 8000c58:	f000 feaa 	bl	80019b0 <HAL_GPIO_WritePin>

	/* GPIO pins : PC0 ~ PC8 */
	//GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
	//GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_ALL, USER_GPIO_LED_OFF);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	21ff      	movs	r1, #255	@ 0xff
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <user_gpio_fnd_clear+0x20>)
 8000c62:	f000 fea5 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40011000 	.word	0x40011000

08000c70 <user_gpio_fnd_on_all>:

void user_gpio_fnd_on_all(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	//FND Anode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, USER_GPIO_LED_ON);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <user_gpio_fnd_on_all+0x20>)
 8000c7c:	f000 fe98 	bl	80019b0 <HAL_GPIO_WritePin>

	//GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
	//GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_ALL, USER_GPIO_LED_ON);
 8000c80:	2200      	movs	r2, #0
 8000c82:	21ff      	movs	r1, #255	@ 0xff
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <user_gpio_fnd_on_all+0x20>)
 8000c86:	f000 fe93 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40011000 	.word	0x40011000

08000c94 <user_gpio_fnd_test>:

void user_gpio_fnd_test(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	user_gpio_fnd_off_all();
 8000c9a:	f7ff ffcb 	bl	8000c34 <user_gpio_fnd_off_all>
	HAL_Delay(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca2:	f000 fb0f 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_all();
 8000ca6:	f7ff ffe3 	bl	8000c70 <user_gpio_fnd_on_all>
	HAL_Delay(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cae:	f000 fb09 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_clear();
 8000cb2:	f7ff ffcb 	bl	8000c4c <user_gpio_fnd_clear>

	//FND Anode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, USER_GPIO_LED_ON);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cbc:	482c      	ldr	r0, [pc, #176]	@ (8000d70 <user_gpio_fnd_test+0xdc>)
 8000cbe:	f000 fe77 	bl	80019b0 <HAL_GPIO_WritePin>

	//GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
	//GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
	uint32_t pin = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i < 8; i++ ) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e012      	b.n	8000cf2 <user_gpio_fnd_test+0x5e>
		pin = 1 << i;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(GPIOC, pin, USER_GPIO_LED_ON);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4824      	ldr	r0, [pc, #144]	@ (8000d70 <user_gpio_fnd_test+0xdc>)
 8000ce0:	f000 fe66 	bl	80019b0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000ce4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce8:	f000 faec 	bl	80012c4 <HAL_Delay>
	for (uint32_t i = 0; i < 8; i++ ) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d9e9      	bls.n	8000ccc <user_gpio_fnd_test+0x38>
	}

	user_gpio_fnd_on_1();
 8000cf8:	f000 f85e 	bl	8000db8 <user_gpio_fnd_on_1>
	HAL_Delay(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d00:	f000 fae0 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_2();
 8000d04:	f000 f866 	bl	8000dd4 <user_gpio_fnd_on_2>
	HAL_Delay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d0c:	f000 fada 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_3();
 8000d10:	f000 f86e 	bl	8000df0 <user_gpio_fnd_on_3>
	HAL_Delay(1000);
 8000d14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d18:	f000 fad4 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_4();
 8000d1c:	f000 f876 	bl	8000e0c <user_gpio_fnd_on_4>
	HAL_Delay(1000);
 8000d20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d24:	f000 face 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_5();
 8000d28:	f000 f87e 	bl	8000e28 <user_gpio_fnd_on_5>
	HAL_Delay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d30:	f000 fac8 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_6();
 8000d34:	f000 f886 	bl	8000e44 <user_gpio_fnd_on_6>
	HAL_Delay(1000);
 8000d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d3c:	f000 fac2 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_7();
 8000d40:	f000 f88e 	bl	8000e60 <user_gpio_fnd_on_7>
	HAL_Delay(1000);
 8000d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d48:	f000 fabc 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_8();
 8000d4c:	f000 f896 	bl	8000e7c <user_gpio_fnd_on_8>
	HAL_Delay(1000);
 8000d50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d54:	f000 fab6 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_9();
 8000d58:	f000 f89e 	bl	8000e98 <user_gpio_fnd_on_9>
	HAL_Delay(1000);
 8000d5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d60:	f000 fab0 	bl	80012c4 <HAL_Delay>
	user_gpio_fnd_on_0();
 8000d64:	f000 f8a6 	bl	8000eb4 <user_gpio_fnd_on_0>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40011000 	.word	0x40011000

08000d74 <user_gpio_fnd_digit>:

void user_gpio_fnd_digit(int digit)
{
 8000d74:	b5b0      	push	{r4, r5, r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	uint16_t fnd_digit[] = { USER_GPIO_PIN_FND_0, USER_GPIO_PIN_FND_1, USER_GPIO_PIN_FND_2, USER_GPIO_PIN_FND_3
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <user_gpio_fnd_digit+0x3c>)
 8000d7e:	f107 0408 	add.w	r4, r7, #8
 8000d82:	461d      	mov	r5, r3
 8000d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d8c:	6020      	str	r0, [r4, #0]
 8000d8e:	3404      	adds	r4, #4
 8000d90:	8021      	strh	r1, [r4, #0]
			, USER_GPIO_PIN_FND_4, USER_GPIO_PIN_FND_5, USER_GPIO_PIN_FND_6, USER_GPIO_PIN_FND_7
			, USER_GPIO_PIN_FND_8, USER_GPIO_PIN_FND_9, USER_GPIO_PIN_FND_ALL };

	HAL_GPIO_WritePin(GPIOC, fnd_digit[digit], USER_GPIO_LED_ON);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	3320      	adds	r3, #32
 8000d98:	443b      	add	r3, r7
 8000d9a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <user_gpio_fnd_digit+0x40>)
 8000da4:	f000 fe04 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bdb0      	pop	{r4, r5, r7, pc}
 8000db0:	08005f54 	.word	0x08005f54
 8000db4:	40011000 	.word	0x40011000

08000db8 <user_gpio_fnd_on_1>:

void user_gpio_fnd_on_1(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000dbc:	f7ff ff46 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_1, USER_GPIO_LED_ON);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <user_gpio_fnd_on_1+0x18>)
 8000dc6:	f000 fdf3 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40011000 	.word	0x40011000

08000dd4 <user_gpio_fnd_on_2>:

void user_gpio_fnd_on_2(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000dd8:	f7ff ff38 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_2, USER_GPIO_LED_ON);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	219b      	movs	r1, #155	@ 0x9b
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <user_gpio_fnd_on_2+0x18>)
 8000de2:	f000 fde5 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40011000 	.word	0x40011000

08000df0 <user_gpio_fnd_on_3>:

void user_gpio_fnd_on_3(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000df4:	f7ff ff2a 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_3, USER_GPIO_LED_ON);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	218f      	movs	r1, #143	@ 0x8f
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <user_gpio_fnd_on_3+0x18>)
 8000dfe:	f000 fdd7 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40011000 	.word	0x40011000

08000e0c <user_gpio_fnd_on_4>:

void user_gpio_fnd_on_4(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000e10:	f7ff ff1c 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_4, USER_GPIO_LED_ON);
 8000e14:	2200      	movs	r2, #0
 8000e16:	21a6      	movs	r1, #166	@ 0xa6
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <user_gpio_fnd_on_4+0x18>)
 8000e1a:	f000 fdc9 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40011000 	.word	0x40011000

08000e28 <user_gpio_fnd_on_5>:

void user_gpio_fnd_on_5(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000e2c:	f7ff ff0e 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_5, USER_GPIO_LED_ON);
 8000e30:	2200      	movs	r2, #0
 8000e32:	21ad      	movs	r1, #173	@ 0xad
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <user_gpio_fnd_on_5+0x18>)
 8000e36:	f000 fdbb 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40011000 	.word	0x40011000

08000e44 <user_gpio_fnd_on_6>:

void user_gpio_fnd_on_6(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000e48:	f7ff ff00 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_6, USER_GPIO_LED_ON);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	21bc      	movs	r1, #188	@ 0xbc
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <user_gpio_fnd_on_6+0x18>)
 8000e52:	f000 fdad 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40011000 	.word	0x40011000

08000e60 <user_gpio_fnd_on_7>:

void user_gpio_fnd_on_7(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000e64:	f7ff fef2 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_7, USER_GPIO_LED_ON);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2107      	movs	r1, #7
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <user_gpio_fnd_on_7+0x18>)
 8000e6e:	f000 fd9f 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40011000 	.word	0x40011000

08000e7c <user_gpio_fnd_on_8>:

void user_gpio_fnd_on_8(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000e80:	f7ff fee4 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_8, USER_GPIO_LED_ON);
 8000e84:	2200      	movs	r2, #0
 8000e86:	21bf      	movs	r1, #191	@ 0xbf
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <user_gpio_fnd_on_8+0x18>)
 8000e8a:	f000 fd91 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40011000 	.word	0x40011000

08000e98 <user_gpio_fnd_on_9>:

void user_gpio_fnd_on_9(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000e9c:	f7ff fed6 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_9, USER_GPIO_LED_ON);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	21a7      	movs	r1, #167	@ 0xa7
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <user_gpio_fnd_on_9+0x18>)
 8000ea6:	f000 fd83 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40011000 	.word	0x40011000

08000eb4 <user_gpio_fnd_on_0>:

void user_gpio_fnd_on_0(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	user_gpio_fnd_clear();
 8000eb8:	f7ff fec8 	bl	8000c4c <user_gpio_fnd_clear>
	HAL_GPIO_WritePin(GPIOC, USER_GPIO_PIN_FND_0, USER_GPIO_LED_ON);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	213f      	movs	r1, #63	@ 0x3f
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <user_gpio_fnd_on_0+0x18>)
 8000ec2:	f000 fd75 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40011000 	.word	0x40011000

08000ed0 <_i2c_data_conv>:
extern char UartBuf[UART_BUF_SIZE];

uint8_t I2cBuf[3];

static inline uint16_t _i2c_data_conv(uint8_t *data)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	uint16_t value;
	value = (data[0] << 8) + data[1];
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	3201      	adds	r2, #1
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	81fb      	strh	r3, [r7, #14]

	sprintf(UartBuf, "I2C Sensor Output Value: %u\n", value);
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4906      	ldr	r1, [pc, #24]	@ (8000f08 <_i2c_data_conv+0x38>)
 8000ef0:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <_i2c_data_conv+0x3c>)
 8000ef2:	f004 fb23 	bl	800553c <siprintf>
	user_uart_send_msg(&huart1, UartBuf);
 8000ef6:	4905      	ldr	r1, [pc, #20]	@ (8000f0c <_i2c_data_conv+0x3c>)
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <_i2c_data_conv+0x40>)
 8000efa:	f000 f923 	bl	8001144 <user_uart_send_msg>

	return value;
 8000efe:	89fb      	ldrh	r3, [r7, #14]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08005f6c 	.word	0x08005f6c
 8000f0c:	20000294 	.word	0x20000294
 8000f10:	200001f8 	.word	0x200001f8

08000f14 <user_i2c_bh17_test>:

    return 1;
}

void user_i2c_bh17_test(uint32_t loop_cnt)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
	uint16_t i2c_dev_addr = I2C_ADDR_BH17 << 1;		// 7bit
 8000f1c:	2346      	movs	r3, #70	@ 0x46
 8000f1e:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef hal_ret;

	memset(I2cBuf, 0, SIZEOF(I2cBuf));
 8000f20:	2203      	movs	r2, #3
 8000f22:	2100      	movs	r1, #0
 8000f24:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f26:	f004 fb29 	bl	800557c <memset>

	I2cBuf[0] = 0x10;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]
	hal_ret = HAL_I2C_Master_Transmit_IT(&hi2c1, i2c_dev_addr, I2cBuf, 1);
 8000f30:	8979      	ldrh	r1, [r7, #10]
 8000f32:	2301      	movs	r3, #1
 8000f34:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f36:	4826      	ldr	r0, [pc, #152]	@ (8000fd0 <user_i2c_bh17_test+0xbc>)
 8000f38:	f000 fedc 	bl	8001cf4 <HAL_I2C_Master_Transmit_IT>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	727b      	strb	r3, [r7, #9]
	//hal_ret = HAL_I2C_Master_Transmit(&hi2c1, i2c_dev_addr, I2cBuf, 1, 1000);	//1000ms, 1s

	sprintf(UartBuf, "I2C SEND: RET:%d: <%02X> [%02X] [%02X]",
 8000f40:	7a7a      	ldrb	r2, [r7, #9]
 8000f42:	897b      	ldrh	r3, [r7, #10]
					hal_ret, i2c_dev_addr, I2cBuf[0], I2cBuf[1]);
 8000f44:	4921      	ldr	r1, [pc, #132]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f46:	7809      	ldrb	r1, [r1, #0]
	sprintf(UartBuf, "I2C SEND: RET:%d: <%02X> [%02X] [%02X]",
 8000f48:	4608      	mov	r0, r1
					hal_ret, i2c_dev_addr, I2cBuf[0], I2cBuf[1]);
 8000f4a:	4920      	ldr	r1, [pc, #128]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f4c:	7849      	ldrb	r1, [r1, #1]
	sprintf(UartBuf, "I2C SEND: RET:%d: <%02X> [%02X] [%02X]",
 8000f4e:	9101      	str	r1, [sp, #4]
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	4920      	ldr	r1, [pc, #128]	@ (8000fd4 <user_i2c_bh17_test+0xc0>)
 8000f54:	4820      	ldr	r0, [pc, #128]	@ (8000fd8 <user_i2c_bh17_test+0xc4>)
 8000f56:	f004 faf1 	bl	800553c <siprintf>
	user_uart_send_msg(&huart1, UartBuf);
 8000f5a:	491f      	ldr	r1, [pc, #124]	@ (8000fd8 <user_i2c_bh17_test+0xc4>)
 8000f5c:	481f      	ldr	r0, [pc, #124]	@ (8000fdc <user_i2c_bh17_test+0xc8>)
 8000f5e:	f000 f8f1 	bl	8001144 <user_uart_send_msg>

	HAL_Delay(200);
 8000f62:	20c8      	movs	r0, #200	@ 0xc8
 8000f64:	f000 f9ae 	bl	80012c4 <HAL_Delay>

	for (int i = 0; i < loop_cnt; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e024      	b.n	8000fb8 <user_i2c_bh17_test+0xa4>
		hal_ret = HAL_I2C_Master_Receive_IT(&hi2c1, i2c_dev_addr, I2cBuf, 2);
 8000f6e:	8979      	ldrh	r1, [r7, #10]
 8000f70:	2302      	movs	r3, #2
 8000f72:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f74:	4816      	ldr	r0, [pc, #88]	@ (8000fd0 <user_i2c_bh17_test+0xbc>)
 8000f76:	f000 ff5d 	bl	8001e34 <HAL_I2C_Master_Receive_IT>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	727b      	strb	r3, [r7, #9]
		//hal_ret = HAL_I2C_Master_Receive(&hi2c1, i2c_dev_addr, I2cBuf, 2, 2000);	//2s

		sprintf(UartBuf, "I2C RECV[%d]: RET:%d: <%02X> [%02X] [%02X]",
 8000f7e:	7a7a      	ldrb	r2, [r7, #9]
 8000f80:	897b      	ldrh	r3, [r7, #10]
					i, hal_ret, i2c_dev_addr, I2cBuf[0], I2cBuf[1]);
 8000f82:	4912      	ldr	r1, [pc, #72]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f84:	7809      	ldrb	r1, [r1, #0]
		sprintf(UartBuf, "I2C RECV[%d]: RET:%d: <%02X> [%02X] [%02X]",
 8000f86:	4608      	mov	r0, r1
					i, hal_ret, i2c_dev_addr, I2cBuf[0], I2cBuf[1]);
 8000f88:	4910      	ldr	r1, [pc, #64]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000f8a:	7849      	ldrb	r1, [r1, #1]
		sprintf(UartBuf, "I2C RECV[%d]: RET:%d: <%02X> [%02X] [%02X]",
 8000f8c:	9102      	str	r1, [sp, #8]
 8000f8e:	9001      	str	r0, [sp, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4613      	mov	r3, r2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4912      	ldr	r1, [pc, #72]	@ (8000fe0 <user_i2c_bh17_test+0xcc>)
 8000f98:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <user_i2c_bh17_test+0xc4>)
 8000f9a:	f004 facf 	bl	800553c <siprintf>
		user_uart_send_msg(&huart1, UartBuf);
 8000f9e:	490e      	ldr	r1, [pc, #56]	@ (8000fd8 <user_i2c_bh17_test+0xc4>)
 8000fa0:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <user_i2c_bh17_test+0xc8>)
 8000fa2:	f000 f8cf 	bl	8001144 <user_uart_send_msg>

		_i2c_data_conv(I2cBuf);		// convert to 16 bit
 8000fa6:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <user_i2c_bh17_test+0xb8>)
 8000fa8:	f7ff ff92 	bl	8000ed0 <_i2c_data_conv>

		HAL_Delay(200);
 8000fac:	20c8      	movs	r0, #200	@ 0xc8
 8000fae:	f000 f989 	bl	80012c4 <HAL_Delay>
	for (int i = 0; i < loop_cnt; i++) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8d6      	bhi.n	8000f6e <user_i2c_bh17_test+0x5a>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000028c 	.word	0x2000028c
 8000fd0:	20000078 	.word	0x20000078
 8000fd4:	08006038 	.word	0x08006038
 8000fd8:	20000294 	.word	0x20000294
 8000fdc:	200001f8 	.word	0x200001f8
 8000fe0:	08006060 	.word	0x08006060

08000fe4 <HAL_UART_RxCpltCallback>:

//user-uart.c
//extern uint8_t UartRxData[UART_BUF_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <HAL_UART_RxCpltCallback+0x24>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d103      	bne.n	8000ffe <HAL_UART_RxCpltCallback+0x1a>
		user_uart_send_msg(huart, "UART1 Rx interrupt occurred.");
 8000ff6:	4905      	ldr	r1, [pc, #20]	@ (800100c <HAL_UART_RxCpltCallback+0x28>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f8a3 	bl	8001144 <user_uart_send_msg>
	}
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40013800 	.word	0x40013800
 800100c:	0800608c 	.word	0x0800608c

08001010 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <HAL_UARTEx_RxEventCallback+0x28>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d103      	bne.n	800102e <HAL_UARTEx_RxEventCallback+0x1e>
		user_uart_send_msg(huart, "UART1 Event interrupt occurred.");
 8001026:	4905      	ldr	r1, [pc, #20]	@ (800103c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f88b 	bl	8001144 <user_uart_send_msg>
		//HAL_UART_Receive_IT(huart, UartRxData, Size);
		//HAL_UART_Transmit(huart, UartRxData, Size, 10);
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013800 	.word	0x40013800
 800103c:	080060ac 	.word	0x080060ac

08001040 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
	if (sw_count_flag < 10)		//10ms x 10 == 100ms
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_GPIO_EXTI_Callback+0x4c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b09      	cmp	r3, #9
 8001050:	dd17      	ble.n	8001082 <HAL_GPIO_EXTI_Callback+0x42>
		return;

	if (GPIO_Pin == GPIO_PIN_0) {
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d106      	bne.n	8001066 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_2R);	//Red
 8001058:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <HAL_GPIO_EXTI_Callback+0x50>)
 800105e:	f000 fcbf 	bl	80019e0 <HAL_GPIO_TogglePin>
		user_gpio_fnd_on_1();
 8001062:	f7ff fea9 	bl	8000db8 <user_gpio_fnd_on_1>
	}

	if (GPIO_Pin == GPIO_PIN_1) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d106      	bne.n	800107a <HAL_GPIO_EXTI_Callback+0x3a>
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_3B);	//Blue
 800106c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001070:	4807      	ldr	r0, [pc, #28]	@ (8001090 <HAL_GPIO_EXTI_Callback+0x50>)
 8001072:	f000 fcb5 	bl	80019e0 <HAL_GPIO_TogglePin>
		user_gpio_fnd_on_2();
 8001076:	f7ff fead 	bl	8000dd4 <user_gpio_fnd_on_2>
	}

	sw_count_flag = 0;
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <HAL_GPIO_EXTI_Callback+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e000      	b.n	8001084 <HAL_GPIO_EXTI_Callback+0x44>
		return;
 8001082:	bf00      	nop
}
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000290 	.word	0x20000290
 8001090:	40010c00 	.word	0x40010c00

08001094 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    //static uint32_t cnt=0;

    //SYSCLK == HCLK == 8Mhz
    //Prescaler == 8000, Period == HCLK / Prescaler == 1KHz(1ms)
    //Counter == 1000, Interval Time == Period * Counter == 1ms x 1000 == 1s
    if (htim->Instance == TIM1) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d103      	bne.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x1a>
        //user_debug_timer("Timer7 Occured.\r\n");
    	HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_1Y);	//Yellow
 80010a6:	2120      	movs	r1, #32
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010aa:	f000 fc99 	bl	80019e0 <HAL_GPIO_TogglePin>
    }

    if (htim->Instance == TIM2) {	//10ms
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010b6:	d109      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x38>
		//user_debug_timer("Timer7 Occured.\r\n");
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_2R);	//Red
 80010b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010bc:	480b      	ldr	r0, [pc, #44]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010be:	f000 fc8f 	bl	80019e0 <HAL_GPIO_TogglePin>
		sw_count_flag++;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010ca:	6013      	str	r3, [r2, #0]
	}

    if (htim->Instance == TIM3) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d104      	bne.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x4c>
		//user_debug_timer("Timer7 Occured.\r\n");
		HAL_GPIO_TogglePin(GPIOB, USER_GPIO_PIN_LED_3B);	//Blue
 80010d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010dc:	f000 fc80 	bl	80019e0 <HAL_GPIO_TogglePin>
	}
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	20000290 	.word	0x20000290
 80010f4:	40000400 	.word	0x40000400

080010f8 <user_uart_send_char>:
#include "user-uart.h"

char UartBuf[UART_BUF_SIZE];

void user_uart_send_char(UART_HandleTypeDef *huart, const uint8_t *buf)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    uint32_t len;

    len = strlen((const char *)buf);
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f7ff f822 	bl	800014c <strlen>
 8001108:	60f8      	str	r0, [r7, #12]
    HAL_UART_Transmit(huart, buf, len, UART_TIMEOUT);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	b29a      	uxth	r2, r3
 800110e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f003 fb37 	bl	8004788 <HAL_UART_Transmit>

    if (buf[len-1] == '\r')
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0d      	cmp	r3, #13
 8001126:	d106      	bne.n	8001136 <user_uart_send_char+0x3e>
    	HAL_UART_Transmit(huart, (const uint8_t *)UART_ENTER, 1, UART_TIMEOUT);
 8001128:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800112c:	2201      	movs	r2, #1
 800112e:	4904      	ldr	r1, [pc, #16]	@ (8001140 <user_uart_send_char+0x48>)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f003 fb29 	bl	8004788 <HAL_UART_Transmit>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	080060cc 	.word	0x080060cc

08001144 <user_uart_send_msg>:


void user_uart_send_msg(UART_HandleTypeDef *huart, const char *msg)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    uint32_t len;

    len = strlen((const char *)msg);
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f7fe fffc 	bl	800014c <strlen>
 8001154:	60f8      	str	r0, [r7, #12]
    if (msg[len-1] == '\r') {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b0d      	cmp	r3, #13
 8001162:	d109      	bne.n	8001178 <user_uart_send_msg+0x34>
        sprintf((char *)UartBuf, "%s%s", msg, UART_ENTER);
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <user_uart_send_msg+0x60>)
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	490f      	ldr	r1, [pc, #60]	@ (80011a8 <user_uart_send_msg+0x64>)
 800116a:	4810      	ldr	r0, [pc, #64]	@ (80011ac <user_uart_send_msg+0x68>)
 800116c:	f004 f9e6 	bl	800553c <siprintf>
        len += 1;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e008      	b.n	800118a <user_uart_send_msg+0x46>
    } else {
        sprintf((char *)UartBuf, "%s%s", msg, UART_NEWLINE);
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <user_uart_send_msg+0x6c>)
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	490a      	ldr	r1, [pc, #40]	@ (80011a8 <user_uart_send_msg+0x64>)
 800117e:	480b      	ldr	r0, [pc, #44]	@ (80011ac <user_uart_send_msg+0x68>)
 8001180:	f004 f9dc 	bl	800553c <siprintf>
        len += 2;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3302      	adds	r3, #2
 8001188:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit(huart, (const uint8_t *)UartBuf, len, UART_TIMEOUT);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	b29a      	uxth	r2, r3
 800118e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001192:	4906      	ldr	r1, [pc, #24]	@ (80011ac <user_uart_send_msg+0x68>)
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f003 faf7 	bl	8004788 <HAL_UART_Transmit>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	080060cc 	.word	0x080060cc
 80011a8:	080060d0 	.word	0x080060d0
 80011ac:	20000294 	.word	0x20000294
 80011b0:	080060d8 	.word	0x080060d8

080011b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b4:	f7ff fd20 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ba:	490c      	ldr	r1, [pc, #48]	@ (80011ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a09      	ldr	r2, [pc, #36]	@ (80011f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011d0:	4c09      	ldr	r4, [pc, #36]	@ (80011f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f004 f9db 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e2:	f7fe ffbb 	bl	800015c <main>
  bx lr
 80011e6:	4770      	bx	lr
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011f0:	0800624c 	.word	0x0800624c
  ldr r2, =_sbss
 80011f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011f8:	20000480 	.word	0x20000480

080011fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_2_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_Init+0x28>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_Init+0x28>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f947 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fa84 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40022000 	.word	0x40022000

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f95f 	bl	800150e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f927 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a03      	ldr	r2, [pc, #12]	@ (80012ac <HAL_IncTick+0x20>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000334 	.word	0x20000334

080012b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b02      	ldr	r3, [pc, #8]	@ (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000334 	.word	0x20000334

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff fff0 	bl	80012b0 <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffe0 	bl	80012b0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4906      	ldr	r1, [pc, #24]	@ (80013a4 <__NVIC_EnableIRQ+0x34>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2d 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff42 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff35 	bl	8001370 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d008      	beq.n	8001550 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e020      	b.n	8001592 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020e 	bic.w	r2, r2, #14
 800155e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d005      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2204      	movs	r2, #4
 80015b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e051      	b.n	8001664 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 020e 	bic.w	r2, r2, #14
 80015ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <HAL_DMA_Abort_IT+0xd4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d029      	beq.n	800163e <HAL_DMA_Abort_IT+0xa2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <HAL_DMA_Abort_IT+0xd8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <HAL_DMA_Abort_IT+0x9e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <HAL_DMA_Abort_IT+0xdc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_Abort_IT+0x98>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_DMA_Abort_IT+0xe0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d012      	beq.n	800162e <HAL_DMA_Abort_IT+0x92>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_DMA_Abort_IT+0xe4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_DMA_Abort_IT+0x8c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_DMA_Abort_IT+0xe8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_DMA_Abort_IT+0x86>
 800161c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001620:	e00e      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 8001622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001626:	e00b      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 8001628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162c:	e008      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	e005      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 8001634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001638:	e002      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 800163a:	2310      	movs	r3, #16
 800163c:	e000      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 800163e:	2301      	movs	r3, #1
 8001640:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_DMA_Abort_IT+0xec>)
 8001642:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
    } 
  }
  return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40020008 	.word	0x40020008
 8001674:	4002001c 	.word	0x4002001c
 8001678:	40020030 	.word	0x40020030
 800167c:	40020044 	.word	0x40020044
 8001680:	40020058 	.word	0x40020058
 8001684:	4002006c 	.word	0x4002006c
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800169a:	b2db      	uxtb	r3, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b08b      	sub	sp, #44	@ 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	e169      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016bc:	2201      	movs	r2, #1
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8158 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a9a      	ldr	r2, [pc, #616]	@ (8001948 <HAL_GPIO_Init+0x2a0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d05e      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016e4:	4a98      	ldr	r2, [pc, #608]	@ (8001948 <HAL_GPIO_Init+0x2a0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d875      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016ea:	4a98      	ldr	r2, [pc, #608]	@ (800194c <HAL_GPIO_Init+0x2a4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d058      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016f0:	4a96      	ldr	r2, [pc, #600]	@ (800194c <HAL_GPIO_Init+0x2a4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d86f      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016f6:	4a96      	ldr	r2, [pc, #600]	@ (8001950 <HAL_GPIO_Init+0x2a8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d052      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016fc:	4a94      	ldr	r2, [pc, #592]	@ (8001950 <HAL_GPIO_Init+0x2a8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d869      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001702:	4a94      	ldr	r2, [pc, #592]	@ (8001954 <HAL_GPIO_Init+0x2ac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d04c      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001708:	4a92      	ldr	r2, [pc, #584]	@ (8001954 <HAL_GPIO_Init+0x2ac>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d863      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800170e:	4a92      	ldr	r2, [pc, #584]	@ (8001958 <HAL_GPIO_Init+0x2b0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d046      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001714:	4a90      	ldr	r2, [pc, #576]	@ (8001958 <HAL_GPIO_Init+0x2b0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d85d      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d82a      	bhi.n	8001774 <HAL_GPIO_Init+0xcc>
 800171e:	2b12      	cmp	r3, #18
 8001720:	d859      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001722:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <HAL_GPIO_Init+0x80>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	080017a3 	.word	0x080017a3
 800172c:	0800177d 	.word	0x0800177d
 8001730:	0800178f 	.word	0x0800178f
 8001734:	080017d1 	.word	0x080017d1
 8001738:	080017d7 	.word	0x080017d7
 800173c:	080017d7 	.word	0x080017d7
 8001740:	080017d7 	.word	0x080017d7
 8001744:	080017d7 	.word	0x080017d7
 8001748:	080017d7 	.word	0x080017d7
 800174c:	080017d7 	.word	0x080017d7
 8001750:	080017d7 	.word	0x080017d7
 8001754:	080017d7 	.word	0x080017d7
 8001758:	080017d7 	.word	0x080017d7
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017d7 	.word	0x080017d7
 8001764:	080017d7 	.word	0x080017d7
 8001768:	080017d7 	.word	0x080017d7
 800176c:	08001785 	.word	0x08001785
 8001770:	08001799 	.word	0x08001799
 8001774:	4a79      	ldr	r2, [pc, #484]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800177a:	e02c      	b.n	80017d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e029      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e024      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e01f      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	330c      	adds	r3, #12
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e01a      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017aa:	2304      	movs	r3, #4
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e013      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	611a      	str	r2, [r3, #16]
          break;
 80017c2:	e009      	b.n	80017d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c4:	2308      	movs	r3, #8
 80017c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	615a      	str	r2, [r3, #20]
          break;
 80017ce:	e003      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          break;
 80017d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2bff      	cmp	r3, #255	@ 0xff
 80017dc:	d801      	bhi.n	80017e2 <HAL_GPIO_Init+0x13a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_Init+0x13e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3304      	adds	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	@ 0xff
 80017ec:	d802      	bhi.n	80017f4 <HAL_GPIO_Init+0x14c>
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x152>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	3b08      	subs	r3, #8
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	210f      	movs	r1, #15
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80b1 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001828:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <HAL_GPIO_Init+0x2b8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a4c      	ldr	r2, [pc, #304]	@ (8001960 <HAL_GPIO_Init+0x2b8>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <HAL_GPIO_Init+0x2b8>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001840:	4a48      	ldr	r2, [pc, #288]	@ (8001964 <HAL_GPIO_Init+0x2bc>)
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a40      	ldr	r2, [pc, #256]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d013      	beq.n	8001894 <HAL_GPIO_Init+0x1ec>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3f      	ldr	r2, [pc, #252]	@ (800196c <HAL_GPIO_Init+0x2c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00d      	beq.n	8001890 <HAL_GPIO_Init+0x1e8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3e      	ldr	r2, [pc, #248]	@ (8001970 <HAL_GPIO_Init+0x2c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d007      	beq.n	800188c <HAL_GPIO_Init+0x1e4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3d      	ldr	r2, [pc, #244]	@ (8001974 <HAL_GPIO_Init+0x2cc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_GPIO_Init+0x1e0>
 8001884:	2303      	movs	r3, #3
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001888:	2304      	movs	r3, #4
 800188a:	e004      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 800188c:	2302      	movs	r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001894:	2300      	movs	r3, #0
 8001896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	4093      	lsls	r3, r2
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a6:	492f      	ldr	r1, [pc, #188]	@ (8001964 <HAL_GPIO_Init+0x2bc>)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	492c      	ldr	r1, [pc, #176]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4928      	ldr	r1, [pc, #160]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4922      	ldr	r1, [pc, #136]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	491e      	ldr	r1, [pc, #120]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 8001900:	4013      	ands	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4918      	ldr	r1, [pc, #96]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4914      	ldr	r1, [pc, #80]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 8001928:	4013      	ands	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d021      	beq.n	800197c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	490e      	ldr	r1, [pc, #56]	@ (8001978 <HAL_GPIO_Init+0x2d0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e021      	b.n	800198a <HAL_GPIO_Init+0x2e2>
 8001946:	bf00      	nop
 8001948:	10320000 	.word	0x10320000
 800194c:	10310000 	.word	0x10310000
 8001950:	10220000 	.word	0x10220000
 8001954:	10210000 	.word	0x10210000
 8001958:	10120000 	.word	0x10120000
 800195c:	10110000 	.word	0x10110000
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40011000 	.word	0x40011000
 8001974:	40011400 	.word	0x40011400
 8001978:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_GPIO_Init+0x304>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	43db      	mvns	r3, r3
 8001984:	4909      	ldr	r1, [pc, #36]	@ (80019ac <HAL_GPIO_Init+0x304>)
 8001986:	4013      	ands	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f ae8e 	bne.w	80016bc <HAL_GPIO_Init+0x14>
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	372c      	adds	r7, #44	@ 0x2c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	041a      	lsls	r2, r3, #16
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43d9      	mvns	r1, r3
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	400b      	ands	r3, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fb04 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e12b      	b.n	8001cae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fe7e 	bl	800076c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	@ 0x24
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aa8:	f002 f9da 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8001aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a81      	ldr	r2, [pc, #516]	@ (8001cb8 <HAL_I2C_Init+0x274>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d807      	bhi.n	8001ac8 <HAL_I2C_Init+0x84>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a80      	ldr	r2, [pc, #512]	@ (8001cbc <HAL_I2C_Init+0x278>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e006      	b.n	8001ad6 <HAL_I2C_Init+0x92>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a7d      	ldr	r2, [pc, #500]	@ (8001cc0 <HAL_I2C_Init+0x27c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bf94      	ite	ls
 8001ad0:	2301      	movls	r3, #1
 8001ad2:	2300      	movhi	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0e7      	b.n	8001cae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4a78      	ldr	r2, [pc, #480]	@ (8001cc4 <HAL_I2C_Init+0x280>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb8 <HAL_I2C_Init+0x274>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d802      	bhi.n	8001b18 <HAL_I2C_Init+0xd4>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	e009      	b.n	8001b2c <HAL_I2C_Init+0xe8>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	4a69      	ldr	r2, [pc, #420]	@ (8001cc8 <HAL_I2C_Init+0x284>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	495c      	ldr	r1, [pc, #368]	@ (8001cb8 <HAL_I2C_Init+0x274>)
 8001b48:	428b      	cmp	r3, r1
 8001b4a:	d819      	bhi.n	8001b80 <HAL_I2C_Init+0x13c>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e59      	subs	r1, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b60:	400b      	ands	r3, r1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_I2C_Init+0x138>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e59      	subs	r1, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	e051      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e04f      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d111      	bne.n	8001bac <HAL_I2C_Init+0x168>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e012      	b.n	8001bd2 <HAL_I2C_Init+0x18e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Init+0x196>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e022      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <HAL_I2C_Init+0x1bc>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e58      	subs	r0, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	440b      	add	r3, r1
 8001bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bfe:	e00f      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	6809      	ldr	r1, [r1, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6911      	ldr	r1, [r2, #16]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68d2      	ldr	r2, [r2, #12]
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	000186a0 	.word	0x000186a0
 8001cbc:	001e847f 	.word	0x001e847f
 8001cc0:	003d08ff 	.word	0x003d08ff
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b80      	cmp	r3, #128	@ 0x80
 8001ce0:	d103      	bne.n	8001cea <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	460b      	mov	r3, r1
 8001d02:	817b      	strh	r3, [r7, #10]
 8001d04:	4613      	mov	r3, r2
 8001d06:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	f040 8081 	bne.w	8001e1c <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d1a:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <HAL_I2C_Master_Transmit_IT+0x134>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	4a42      	ldr	r2, [pc, #264]	@ (8001e2c <HAL_I2C_Master_Transmit_IT+0x138>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0a1a      	lsrs	r2, r3, #8
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009a      	lsls	r2, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d112      	bne.n	8001d66 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f043 0220 	orr.w	r2, r3, #32
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	e05b      	b.n	8001e1e <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d0df      	beq.n	8001d34 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2C_Master_Transmit_IT+0x8e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e04d      	b.n	8001e1e <HAL_I2C_Master_Transmit_IT+0x12a>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d007      	beq.n	8001da8 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2221      	movs	r2, #33	@ 0x21
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	893a      	ldrh	r2, [r7, #8]
 8001dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001dea:	897a      	ldrh	r2, [r7, #10]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001e06:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	14f8b589 	.word	0x14f8b589
 8001e30:	ffff0000 	.word	0xffff0000

08001e34 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	460b      	mov	r3, r1
 8001e42:	817b      	strh	r3, [r7, #10]
 8001e44:	4613      	mov	r3, r2
 8001e46:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	f040 8089 	bne.w	8001f6c <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e5a:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_I2C_Master_Receive_IT+0x144>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	4a46      	ldr	r2, [pc, #280]	@ (8001f7c <HAL_I2C_Master_Receive_IT+0x148>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0a1a      	lsrs	r2, r3, #8
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009a      	lsls	r2, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f043 0220 	orr.w	r2, r3, #32
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e063      	b.n	8001f6e <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d0df      	beq.n	8001e74 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Master_Receive_IT+0x8e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e055      	b.n	8001f6e <HAL_I2C_Master_Receive_IT+0x13a>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d007      	beq.n	8001ee8 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2222      	movs	r2, #34	@ 0x22
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2210      	movs	r2, #16
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	893a      	ldrh	r2, [r7, #8]
 8001f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <HAL_I2C_Master_Receive_IT+0x14c>)
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001f2a:	897a      	ldrh	r2, [r7, #10]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001f46:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f56:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f66:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	14f8b589 	.word	0x14f8b589
 8001f80:	ffff0000 	.word	0xffff0000

08001f84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fa4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d003      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x38>
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b40      	cmp	r3, #64	@ 0x40
 8001fb8:	f040 80b1 	bne.w	800211e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001fdc:	d003      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x62>
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_EV_IRQHandler+0x66>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x68>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f000 8114 	beq.w	800221a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_I2C_EV_IRQHandler+0x90>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f001 fb46 	bl	8003698 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fcb9 	bl	8002984 <I2C_Master_SB>
 8002012:	e083      	b.n	800211c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_I2C_EV_IRQHandler+0xac>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fd30 	bl	8002a8e <I2C_Master_ADD10>
 800202e:	e075      	b.n	800211c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_I2C_EV_IRQHandler+0xc8>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fd4b 	bl	8002ae0 <I2C_Master_ADDR>
 800204a:	e067      	b.n	800211c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d036      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002064:	f000 80db 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <HAL_I2C_EV_IRQHandler+0x10a>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_I2C_EV_IRQHandler+0x10a>
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f92d 	bl	80022e6 <I2C_MasterTransmit_TXE>
 800208c:	e046      	b.n	800211c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80c2 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80bc 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	2b21      	cmp	r3, #33	@ 0x21
 80020aa:	d103      	bne.n	80020b4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9b6 	bl	800241e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b2:	e0b4      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b40      	cmp	r3, #64	@ 0x40
 80020b8:	f040 80b1 	bne.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fa24 	bl	800250a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c2:	e0ac      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020d2:	f000 80a4 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_I2C_EV_IRQHandler+0x178>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_I2C_EV_IRQHandler+0x178>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 faa0 	bl	800263a <I2C_MasterReceive_RXNE>
 80020fa:	e00f      	b.n	800211c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 808b 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8085 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fb4b 	bl	80027b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800211a:	e080      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x29a>
 800211c:	e07f      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e007      	b.n	8002140 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d011      	beq.n	800216e <HAL_I2C_EV_IRQHandler+0x1ea>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 ff11 	bl	8002f8e <I2C_Slave_ADDR>
 800216c:	e05a      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x206>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 ff4c 	bl	8003020 <I2C_Slave_STOPF>
 8002188:	e04c      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	2b21      	cmp	r3, #33	@ 0x21
 800218e:	d002      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x212>
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	2b29      	cmp	r3, #41	@ 0x29
 8002194:	d120      	bne.n	80021d8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x238>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x238>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fe2e 	bl	8002e16 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ba:	e032      	b.n	8002222 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d02d      	beq.n	8002222 <HAL_I2C_EV_IRQHandler+0x29e>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d028      	beq.n	8002222 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fe5d 	bl	8002e90 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021d6:	e024      	b.n	8002222 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x27a>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x27a>
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fe6a 	bl	8002ed0 <I2C_SlaveReceive_RXNE>
 80021fc:	e012      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fe9a 	bl	8002f4c <I2C_SlaveReceive_BTF>
 8002218:	e004      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002222:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
 800227e:	4613      	mov	r3, r2
 8002280:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d150      	bne.n	80023ae <I2C_MasterTransmit_TXE+0xc8>
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b21      	cmp	r3, #33	@ 0x21
 8002310:	d14d      	bne.n	80023ae <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d01d      	beq.n	8002354 <I2C_MasterTransmit_TXE+0x6e>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b20      	cmp	r3, #32
 800231c:	d01a      	beq.n	8002354 <I2C_MasterTransmit_TXE+0x6e>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002324:	d016      	beq.n	8002354 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002334:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2211      	movs	r2, #17
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff6c 	bl	800222a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002352:	e060      	b.n	8002416 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002362:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002372:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b40      	cmp	r3, #64	@ 0x40
 800238c:	d107      	bne.n	800239e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff81 	bl	800229e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800239c:	e03b      	b.n	8002416 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff3f 	bl	800222a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023ac:	e033      	b.n	8002416 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b21      	cmp	r3, #33	@ 0x21
 80023b2:	d005      	beq.n	80023c0 <I2C_MasterTransmit_TXE+0xda>
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d12d      	bne.n	8002416 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b22      	cmp	r3, #34	@ 0x22
 80023be:	d12a      	bne.n	8002416 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023da:	e01c      	b.n	8002416 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d103      	bne.n	80023f0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f88e 	bl	800250a <I2C_MemoryTransmit_TXE_BTF>
}
 80023ee:	e012      	b.n	8002416 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002414:	e7ff      	b.n	8002416 <I2C_MasterTransmit_TXE+0x130>
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b21      	cmp	r3, #33	@ 0x21
 8002436:	d164      	bne.n	8002502 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002466:	e04c      	b.n	8002502 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b08      	cmp	r3, #8
 800246c:	d01d      	beq.n	80024aa <I2C_MasterTransmit_BTF+0x8c>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b20      	cmp	r3, #32
 8002472:	d01a      	beq.n	80024aa <I2C_MasterTransmit_BTF+0x8c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800247a:	d016      	beq.n	80024aa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800248a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2211      	movs	r2, #17
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fec1 	bl	800222a <HAL_I2C_MasterTxCpltCallback>
}
 80024a8:	e02b      	b.n	8002502 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024b8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b40      	cmp	r3, #64	@ 0x40
 80024e2:	d107      	bne.n	80024f4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fed6 	bl	800229e <HAL_I2C_MemTxCpltCallback>
}
 80024f2:	e006      	b.n	8002502 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fe94 	bl	800222a <HAL_I2C_MasterTxCpltCallback>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002518:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11d      	bne.n	800255e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10b      	bne.n	8002542 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	b2da      	uxtb	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	1c9a      	adds	r2, r3, #2
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002540:	e077      	b.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	b29b      	uxth	r3, r3
 8002548:	121b      	asrs	r3, r3, #8
 800254a:	b2da      	uxtb	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800255c:	e069      	b.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10b      	bne.n	800257e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256a:	b2da      	uxtb	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800257c:	e059      	b.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002582:	2b02      	cmp	r3, #2
 8002584:	d152      	bne.n	800262c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b22      	cmp	r3, #34	@ 0x22
 800258a:	d10d      	bne.n	80025a8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025a6:	e044      	b.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d015      	beq.n	80025de <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b21      	cmp	r3, #33	@ 0x21
 80025b6:	d112      	bne.n	80025de <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025dc:	e029      	b.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d124      	bne.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b21      	cmp	r3, #33	@ 0x21
 80025ec:	d121      	bne.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fe3a 	bl	800229e <HAL_I2C_MemTxCpltCallback>
}
 800262a:	e002      	b.n	8002632 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fb4d 	bl	8001ccc <I2C_Flush_DR>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b22      	cmp	r3, #34	@ 0x22
 800264c:	f040 80ac 	bne.w	80027a8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d921      	bls.n	80026a2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b03      	cmp	r3, #3
 800268c:	f040 808c 	bne.w	80027a8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80026a0:	e082      	b.n	80027a8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d075      	beq.n	8002796 <I2C_MasterReceive_RXNE+0x15c>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d002      	beq.n	80026b6 <I2C_MasterReceive_RXNE+0x7c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d16f      	bne.n	8002796 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 ffbc 	bl	8003634 <I2C_WaitOnSTOPRequestThroughIT>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d142      	bne.n	8002748 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b40      	cmp	r3, #64	@ 0x40
 800271a:	d10a      	bne.n	8002732 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fdc0 	bl	80022b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002730:	e03a      	b.n	80027a8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2212      	movs	r2, #18
 800273e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fd7b 	bl	800223c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002746:	e02f      	b.n	80027a8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002756:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fd97 	bl	80022c2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002794:	e008      	b.n	80027a8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a4:	605a      	str	r2, [r3, #4]
}
 80027a6:	e7ff      	b.n	80027a8 <I2C_MasterReceive_RXNE+0x16e>
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d11b      	bne.n	8002800 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027fe:	e0bd      	b.n	800297c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d129      	bne.n	800285e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002818:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d00a      	beq.n	8002836 <I2C_MasterReceive_BTF+0x86>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d007      	beq.n	8002836 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002834:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800285c:	e08e      	b.n	800297c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d176      	bne.n	8002956 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d002      	beq.n	8002874 <I2C_MasterReceive_BTF+0xc4>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b10      	cmp	r3, #16
 8002872:	d108      	bne.n	8002886 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e019      	b.n	80028ba <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d002      	beq.n	8002892 <I2C_MasterReceive_BTF+0xe2>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d108      	bne.n	80028a4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e00a      	b.n	80028ba <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d007      	beq.n	80028ba <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002914:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b40      	cmp	r3, #64	@ 0x40
 8002928:	d10a      	bne.n	8002940 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fcb9 	bl	80022b0 <HAL_I2C_MemRxCpltCallback>
}
 800293e:	e01d      	b.n	800297c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2212      	movs	r2, #18
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fc74 	bl	800223c <HAL_I2C_MasterRxCpltCallback>
}
 8002954:	e012      	b.n	800297c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d117      	bne.n	80029c8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029b0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80029b2:	e067      	b.n	8002a84 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]
}
 80029c6:	e05d      	b.n	8002a84 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d0:	d133      	bne.n	8002a3a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b21      	cmp	r3, #33	@ 0x21
 80029dc:	d109      	bne.n	80029f2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029ee:	611a      	str	r2, [r3, #16]
 80029f0:	e008      	b.n	8002a04 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <I2C_Master_SB+0x92>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d032      	beq.n	8002a84 <I2C_Master_SB+0x100>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02d      	beq.n	8002a84 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a36:	605a      	str	r2, [r3, #4]
}
 8002a38:	e024      	b.n	8002a84 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	11db      	asrs	r3, r3, #7
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 0306 	and.w	r3, r3, #6
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f063 030f 	orn	r3, r3, #15
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	611a      	str	r2, [r3, #16]
}
 8002a5e:	e011      	b.n	8002a84 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	11db      	asrs	r3, r3, #7
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 0306 	and.w	r3, r3, #6
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f063 030e 	orn	r3, r3, #14
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	611a      	str	r2, [r3, #16]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <I2C_Master_ADD10+0x26>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <I2C_Master_ADD10+0x48>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ad4:	605a      	str	r2, [r3, #4]
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b091      	sub	sp, #68	@ 0x44
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b22      	cmp	r3, #34	@ 0x22
 8002b08:	f040 8174 	bne.w	8002df4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <I2C_Master_ADDR+0x54>
 8002b14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b18:	2b40      	cmp	r3, #64	@ 0x40
 8002b1a:	d10b      	bne.n	8002b34 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	e16b      	b.n	8002e0c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11d      	bne.n	8002b78 <I2C_Master_ADDR+0x98>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b44:	d118      	bne.n	8002b78 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b76:	e149      	b.n	8002e0c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d113      	bne.n	8002baa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e120      	b.n	8002dec <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f040 808a 	bne.w	8002cca <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bbc:	d137      	bne.n	8002c2e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bcc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bdc:	d113      	bne.n	8002c06 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bec:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	e0f2      	b.n	8002dec <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e0de      	b.n	8002dec <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d02e      	beq.n	8002c92 <I2C_Master_ADDR+0x1b2>
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d02b      	beq.n	8002c92 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d102      	bne.n	8002c46 <I2C_Master_ADDR+0x166>
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d125      	bne.n	8002c92 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00e      	beq.n	8002c6a <I2C_Master_ADDR+0x18a>
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d00b      	beq.n	8002c6a <I2C_Master_ADDR+0x18a>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d008      	beq.n	8002c6a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e007      	b.n	8002c7a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c78:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	e0ac      	b.n	8002dec <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e090      	b.n	8002dec <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d158      	bne.n	8002d86 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d021      	beq.n	8002d1e <I2C_Master_ADDR+0x23e>
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d01e      	beq.n	8002d1e <I2C_Master_ADDR+0x23e>
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d01b      	beq.n	8002d1e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e012      	b.n	8002d44 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d52:	d14b      	bne.n	8002dec <I2C_Master_ADDR+0x30c>
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d5a:	d00b      	beq.n	8002d74 <I2C_Master_ADDR+0x294>
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d008      	beq.n	8002d74 <I2C_Master_ADDR+0x294>
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d005      	beq.n	8002d74 <I2C_Master_ADDR+0x294>
 8002d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d002      	beq.n	8002d74 <I2C_Master_ADDR+0x294>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d13b      	bne.n	8002dec <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	e032      	b.n	8002dec <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d94:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002da4:	d117      	bne.n	8002dd6 <I2C_Master_ADDR+0x2f6>
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dac:	d00b      	beq.n	8002dc6 <I2C_Master_ADDR+0x2e6>
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d008      	beq.n	8002dc6 <I2C_Master_ADDR+0x2e6>
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d005      	beq.n	8002dc6 <I2C_Master_ADDR+0x2e6>
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d002      	beq.n	8002dc6 <I2C_Master_ADDR+0x2e6>
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d107      	bne.n	8002dd6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dd4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002df2:	e00b      	b.n	8002e0c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
}
 8002e0a:	e7ff      	b.n	8002e0c <I2C_Master_ADDR+0x32c>
 8002e0c:	bf00      	nop
 8002e0e:	3744      	adds	r7, #68	@ 0x44
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02b      	beq.n	8002e88 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d114      	bne.n	8002e88 <I2C_SlaveTransmit_TXE+0x72>
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b29      	cmp	r3, #41	@ 0x29
 8002e62:	d111      	bne.n	8002e88 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2221      	movs	r2, #33	@ 0x21
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2228      	movs	r2, #40	@ 0x28
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff f9e3 	bl	800224e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d011      	beq.n	8002ec6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d02c      	beq.n	8002f44 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d114      	bne.n	8002f44 <I2C_SlaveReceive_RXNE+0x74>
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f1e:	d111      	bne.n	8002f44 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2222      	movs	r2, #34	@ 0x22
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2228      	movs	r2, #40	@ 0x28
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff f98e 	bl	8002260 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fa8:	2b28      	cmp	r3, #40	@ 0x28
 8002faa:	d125      	bne.n	8002ff8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fba:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	81bb      	strh	r3, [r7, #12]
 8002fda:	e002      	b.n	8002fe2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fea:	89ba      	ldrh	r2, [r7, #12]
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff f93e 	bl	8002272 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ff6:	e00e      	b.n	8003016 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800303e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307c:	d172      	bne.n	8003164 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b22      	cmp	r3, #34	@ 0x22
 8003082:	d002      	beq.n	800308a <I2C_Slave_STOPF+0x6a>
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b2a      	cmp	r3, #42	@ 0x2a
 8003088:	d135      	bne.n	80030f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fae2 	bl	800168c <HAL_DMA_GetState>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d049      	beq.n	8003162 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d2:	4a69      	ldr	r2, [pc, #420]	@ (8003278 <I2C_Slave_STOPF+0x258>)
 80030d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fa5e 	bl	800159c <HAL_DMA_Abort_IT>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d03d      	beq.n	8003162 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030f0:	4610      	mov	r0, r2
 80030f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030f4:	e035      	b.n	8003162 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003128:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe faac 	bl	800168c <HAL_DMA_GetState>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d014      	beq.n	8003164 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313e:	4a4e      	ldr	r2, [pc, #312]	@ (8003278 <I2C_Slave_STOPF+0x258>)
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fa28 	bl	800159c <HAL_DMA_Abort_IT>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800315c:	4610      	mov	r0, r2
 800315e:	4798      	blx	r3
 8003160:	e000      	b.n	8003164 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003162:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d03e      	beq.n	80031ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d112      	bne.n	80031a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d112      	bne.n	80031d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f843 	bl	8003280 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031fa:	e039      	b.n	8003270 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003200:	d109      	bne.n	8003216 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2228      	movs	r2, #40	@ 0x28
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff f825 	bl	8002260 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b28      	cmp	r3, #40	@ 0x28
 8003220:	d111      	bne.n	8003246 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a15      	ldr	r2, [pc, #84]	@ (800327c <I2C_Slave_STOPF+0x25c>)
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff f824 	bl	800228c <HAL_I2C_ListenCpltCallback>
}
 8003244:	e014      	b.n	8003270 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	2b22      	cmp	r3, #34	@ 0x22
 800324c:	d002      	beq.n	8003254 <I2C_Slave_STOPF+0x234>
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b22      	cmp	r3, #34	@ 0x22
 8003252:	d10d      	bne.n	8003270 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe fff8 	bl	8002260 <HAL_I2C_SlaveRxCpltCallback>
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	080034e5 	.word	0x080034e5
 800327c:	ffff0000 	.word	0xffff0000

08003280 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003296:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d002      	beq.n	80032a4 <I2C_ITError+0x24>
 800329e:	7bbb      	ldrb	r3, [r7, #14]
 80032a0:	2b40      	cmp	r3, #64	@ 0x40
 80032a2:	d10a      	bne.n	80032ba <I2C_ITError+0x3a>
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b22      	cmp	r3, #34	@ 0x22
 80032a8:	d107      	bne.n	80032ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032c0:	2b28      	cmp	r3, #40	@ 0x28
 80032c2:	d107      	bne.n	80032d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2228      	movs	r2, #40	@ 0x28
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032d2:	e015      	b.n	8003300 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e2:	d00a      	beq.n	80032fa <I2C_ITError+0x7a>
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b60      	cmp	r3, #96	@ 0x60
 80032e8:	d007      	beq.n	80032fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800330a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330e:	d162      	bne.n	80033d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003324:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d020      	beq.n	8003370 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003332:	4a6a      	ldr	r2, [pc, #424]	@ (80034dc <I2C_ITError+0x25c>)
 8003334:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe f92e 	bl	800159c <HAL_DMA_Abort_IT>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8089 	beq.w	800345a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800336a:	4610      	mov	r0, r2
 800336c:	4798      	blx	r3
 800336e:	e074      	b.n	800345a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	4a59      	ldr	r2, [pc, #356]	@ (80034dc <I2C_ITError+0x25c>)
 8003376:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f90d 	bl	800159c <HAL_DMA_Abort_IT>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d068      	beq.n	800345a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003392:	2b40      	cmp	r3, #64	@ 0x40
 8003394:	d10b      	bne.n	80033ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033d0:	4610      	mov	r0, r2
 80033d2:	4798      	blx	r3
 80033d4:	e041      	b.n	800345a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b60      	cmp	r3, #96	@ 0x60
 80033e0:	d125      	bne.n	800342e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d10b      	bne.n	8003416 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe ff54 	bl	80022d4 <HAL_I2C_AbortCpltCallback>
 800342c:	e015      	b.n	800345a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d10b      	bne.n	8003454 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fe ff34 	bl	80022c2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10e      	bne.n	8003488 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800347a:	2b00      	cmp	r3, #0
 800347c:	d104      	bne.n	8003488 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d113      	bne.n	80034d4 <I2C_ITError+0x254>
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b28      	cmp	r3, #40	@ 0x28
 80034b0:	d110      	bne.n	80034d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <I2C_ITError+0x260>)
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fedc 	bl	800228c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	080034e5 	.word	0x080034e5
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034fe:	4b4b      	ldr	r3, [pc, #300]	@ (800362c <I2C_DMAAbort+0x148>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	08db      	lsrs	r3, r3, #3
 8003504:	4a4a      	ldr	r2, [pc, #296]	@ (8003630 <I2C_DMAAbort+0x14c>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a1a      	lsrs	r2, r3, #8
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00da      	lsls	r2, r3, #3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800352a:	e00a      	b.n	8003542 <I2C_DMAAbort+0x5e>
    }
    count--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3b01      	subs	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003540:	d0ea      	beq.n	8003518 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	2200      	movs	r2, #0
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	2200      	movs	r2, #0
 8003560:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003570:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	2200      	movs	r2, #0
 8003586:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b60      	cmp	r3, #96	@ 0x60
 80035b2:	d10e      	bne.n	80035d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7fe fe82 	bl	80022d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d0:	e027      	b.n	8003622 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035d8:	2b28      	cmp	r3, #40	@ 0x28
 80035da:	d117      	bne.n	800360c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2228      	movs	r2, #40	@ 0x28
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800360a:	e007      	b.n	800361c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800361c:	6978      	ldr	r0, [r7, #20]
 800361e:	f7fe fe50 	bl	80022c2 <HAL_I2C_ErrorCallback>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000000 	.word	0x20000000
 8003630:	14f8b589 	.word	0x14f8b589

08003634 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003640:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	0a1a      	lsrs	r2, r3, #8
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b01      	subs	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e008      	b.n	8003684 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800367c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003680:	d0e9      	beq.n	8003656 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000
 8003694:	14f8b589 	.word	0x14f8b589

08003698 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80036a8:	d103      	bne.n	80036b2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80036b0:	e007      	b.n	80036c2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80036ba:	d102      	bne.n	80036c2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2208      	movs	r2, #8
 80036c0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e272      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8087 	beq.w	80037fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ec:	4b92      	ldr	r3, [pc, #584]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d00c      	beq.n	8003712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d112      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
 8003704:	4b8c      	ldr	r3, [pc, #560]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003712:	4b89      	ldr	r3, [pc, #548]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x12c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d168      	bne.n	80037f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e24c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x76>
 8003734:	4b80      	ldr	r3, [pc, #512]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7f      	ldr	r2, [pc, #508]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e02e      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b7b      	ldr	r3, [pc, #492]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7a      	ldr	r2, [pc, #488]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b78      	ldr	r3, [pc, #480]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a77      	ldr	r2, [pc, #476]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0xbc>
 800376e:	4b72      	ldr	r3, [pc, #456]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a71      	ldr	r2, [pc, #452]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6e      	ldr	r2, [pc, #440]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003788:	4b6b      	ldr	r3, [pc, #428]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6a      	ldr	r2, [pc, #424]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a67      	ldr	r2, [pc, #412]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fd fd82 	bl	80012b0 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fd fd7e 	bl	80012b0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e200      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe4>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fd6e 	bl	80012b0 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd fd6a 	bl	80012b0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1ec      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x10c>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d063      	beq.n	80038ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003806:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003812:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
 800381e:	4b46      	ldr	r3, [pc, #280]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	4b43      	ldr	r3, [pc, #268]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e1c0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4939      	ldr	r1, [pc, #228]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	e03a      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003860:	4b36      	ldr	r3, [pc, #216]	@ (800393c <HAL_RCC_OscConfig+0x270>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fd fd23 	bl	80012b0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7fd fd1f 	bl	80012b0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1a1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4927      	ldr	r1, [pc, #156]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]
 80038a0:	e015      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	4b26      	ldr	r3, [pc, #152]	@ (800393c <HAL_RCC_OscConfig+0x270>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fd02 	bl	80012b0 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fd fcfe 	bl	80012b0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e180      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03a      	beq.n	8003950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d019      	beq.n	8003916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fd fce2 	bl	80012b0 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f0:	f7fd fcde 	bl	80012b0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e160      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 face 	bl	8003eb0 <RCC_Delay>
 8003914:	e01c      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fd fcc8 	bl	80012b0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003922:	e00f      	b.n	8003944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fd fcc4 	bl	80012b0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d908      	bls.n	8003944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e146      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	42420000 	.word	0x42420000
 8003940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	4b92      	ldr	r3, [pc, #584]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e9      	bne.n	8003924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a6 	beq.w	8003aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003962:	4b8b      	ldr	r3, [pc, #556]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	4b88      	ldr	r3, [pc, #544]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4a87      	ldr	r2, [pc, #540]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003978:	61d3      	str	r3, [r2, #28]
 800397a:	4b85      	ldr	r3, [pc, #532]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b82      	ldr	r3, [pc, #520]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b7f      	ldr	r3, [pc, #508]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fc85 	bl	80012b0 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fd fc81 	bl	80012b0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	@ 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e103      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b75      	ldr	r3, [pc, #468]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x312>
 80039d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	e02d      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x334>
 80039e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a69      	ldr	r2, [pc, #420]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a66      	ldr	r2, [pc, #408]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	e01c      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0x356>
 8003a08:	4b61      	ldr	r3, [pc, #388]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a60      	ldr	r2, [pc, #384]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	4b5e      	ldr	r3, [pc, #376]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a5d      	ldr	r2, [pc, #372]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e00b      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a22:	4b5b      	ldr	r3, [pc, #364]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a5a      	ldr	r2, [pc, #360]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a57      	ldr	r2, [pc, #348]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d015      	beq.n	8003a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fd fc35 	bl	80012b0 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fc31 	bl	80012b0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0b1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	4b4b      	ldr	r3, [pc, #300]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RCC_OscConfig+0x37e>
 8003a6c:	e014      	b.n	8003a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fc1f 	bl	80012b0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd fc1b 	bl	80012b0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e09b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	4b40      	ldr	r3, [pc, #256]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ee      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4a3b      	ldr	r2, [pc, #236]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8087 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab4:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d061      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d146      	bne.n	8003b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fd fbef 	bl	80012b0 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd fbeb 	bl	80012b0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e06d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	4b29      	ldr	r3, [pc, #164]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4921      	ldr	r1, [pc, #132]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b10:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a19      	ldr	r1, [r3, #32]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	430b      	orrs	r3, r1
 8003b22:	491b      	ldr	r1, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fbbf 	bl	80012b0 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fbbb 	bl	80012b0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e03d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x46a>
 8003b54:	e035      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fba8 	bl	80012b0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fd fba4 	bl	80012b0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e026      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x498>
 8003b82:	e01e      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e019      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
 8003b98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_OscConfig+0x500>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0d0      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d910      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b67      	ldr	r3, [pc, #412]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0207 	bic.w	r2, r3, #7
 8003bfa:	4965      	ldr	r1, [pc, #404]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0b8      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4b59      	ldr	r3, [pc, #356]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a58      	ldr	r2, [pc, #352]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c44:	4b53      	ldr	r3, [pc, #332]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a52      	ldr	r2, [pc, #328]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b50      	ldr	r3, [pc, #320]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	494d      	ldr	r1, [pc, #308]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d040      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d115      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b41      	ldr	r3, [pc, #260]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e073      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06b      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4936      	ldr	r1, [pc, #216]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fd faf6 	bl	80012b0 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fd faf2 	bl	80012b0 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e053      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b2d      	ldr	r3, [pc, #180]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d210      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 0207 	bic.w	r2, r3, #7
 8003d06:	4922      	ldr	r1, [pc, #136]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4916      	ldr	r1, [pc, #88]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d4a:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490e      	ldr	r1, [pc, #56]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5e:	f000 f821 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490a      	ldr	r1, [pc, #40]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	@ (8003d9c <HAL_RCC_ClockConfig+0x1cc>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <HAL_RCC_ClockConfig+0x1d0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd fa54 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40022000 	.word	0x40022000
 8003d94:	40021000 	.word	0x40021000
 8003d98:	080060dc 	.word	0x080060dc
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x36>
 8003dd2:	e027      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dd4:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003dd6:	613b      	str	r3, [r7, #16]
      break;
 8003dd8:	e027      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0c9b      	lsrs	r3, r3, #18
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a17      	ldr	r2, [pc, #92]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003df2:	4b11      	ldr	r3, [pc, #68]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0c5b      	lsrs	r3, r3, #17
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e004      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0c      	ldr	r2, [pc, #48]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	613b      	str	r3, [r7, #16]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e26:	613b      	str	r3, [r7, #16]
      break;
 8003e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2a:	693b      	ldr	r3, [r7, #16]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	007a1200 	.word	0x007a1200
 8003e40:	080060f4 	.word	0x080060f4
 8003e44:	08006104 	.word	0x08006104
 8003e48:	003d0900 	.word	0x003d0900

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b02      	ldr	r3, [pc, #8]	@ (8003e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	20000000 	.word	0x20000000

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff2 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	@ (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	080060ec 	.word	0x080060ec

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e8c:	f7ff ffde 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0adb      	lsrs	r3, r3, #11
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	@ (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	080060ec 	.word	0x080060ec

08003eb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <RCC_Delay+0x34>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <RCC_Delay+0x38>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	0a5b      	lsrs	r3, r3, #9
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ecc:	bf00      	nop
  }
  while (Delay --);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	60fa      	str	r2, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f9      	bne.n	8003ecc <RCC_Delay+0x1c>
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	10624dd3 	.word	0x10624dd3

08003eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e041      	b.n	8003f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc fc9e 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 fa74 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e03a      	b.n	800401a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <HAL_TIM_Base_Start_IT+0x98>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0x58>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fce:	d009      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0x58>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0x58>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a13      	ldr	r2, [pc, #76]	@ (800402c <HAL_TIM_Base_Start_IT+0xa0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d111      	bne.n	8004008 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d010      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004006:	e007      	b.n	8004018 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800

08004030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0202 	mvn.w	r2, #2
 800405c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9b4 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9a7 	bl	80043ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f9b6 	bl	80043f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d122      	bne.n	80040e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d11b      	bne.n	80040e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0204 	mvn.w	r2, #4
 80040b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f98a 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f97d 	bl	80043ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f98c 	bl	80043f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d122      	bne.n	8004134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d11b      	bne.n	8004134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0208 	mvn.w	r2, #8
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2204      	movs	r2, #4
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f960 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f953 	bl	80043ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f962 	bl	80043f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b10      	cmp	r3, #16
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b10      	cmp	r3, #16
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0210 	mvn.w	r2, #16
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2208      	movs	r2, #8
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f936 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f929 	bl	80043ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f938 	bl	80043f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0201 	mvn.w	r2, #1
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc ff70 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041be:	2b80      	cmp	r3, #128	@ 0x80
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041cc:	2b80      	cmp	r3, #128	@ 0x80
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa7b 	bl	80046d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8fc 	bl	8004404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b20      	cmp	r3, #32
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0220 	mvn.w	r2, #32
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa46 	bl	80046c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIM_ConfigClockSource+0x1c>
 8004258:	2302      	movs	r3, #2
 800425a:	e0b4      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x186>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800427a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004294:	d03e      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0xd4>
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429a:	f200 8087 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a2:	f000 8086 	beq.w	80043b2 <HAL_TIM_ConfigClockSource+0x172>
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042aa:	d87f      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b70      	cmp	r3, #112	@ 0x70
 80042ae:	d01a      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xa6>
 80042b0:	2b70      	cmp	r3, #112	@ 0x70
 80042b2:	d87b      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b60      	cmp	r3, #96	@ 0x60
 80042b6:	d050      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x11a>
 80042b8:	2b60      	cmp	r3, #96	@ 0x60
 80042ba:	d877      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b50      	cmp	r3, #80	@ 0x50
 80042be:	d03c      	beq.n	800433a <HAL_TIM_ConfigClockSource+0xfa>
 80042c0:	2b50      	cmp	r3, #80	@ 0x50
 80042c2:	d873      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d058      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x13a>
 80042c8:	2b40      	cmp	r3, #64	@ 0x40
 80042ca:	d86f      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b30      	cmp	r3, #48	@ 0x30
 80042ce:	d064      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x15a>
 80042d0:	2b30      	cmp	r3, #48	@ 0x30
 80042d2:	d86b      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d060      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x15a>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d867      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d05c      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x15a>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d05a      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x15a>
 80042e4:	e062      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042f6:	f000 f968 	bl	80045ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	609a      	str	r2, [r3, #8]
      break;
 8004312:	e04f      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004324:	f000 f951 	bl	80045ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004336:	609a      	str	r2, [r3, #8]
      break;
 8004338:	e03c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	461a      	mov	r2, r3
 8004348:	f000 f8c8 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2150      	movs	r1, #80	@ 0x50
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f91f 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004358:	e02c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f8e6 	bl	8004538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2160      	movs	r1, #96	@ 0x60
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f90f 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004378:	e01c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	461a      	mov	r2, r3
 8004388:	f000 f8a8 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2140      	movs	r1, #64	@ 0x40
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f8ff 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004398:	e00c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f000 f8f6 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 80043aa:	e003      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      break;
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
	...

08004418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a29      	ldr	r2, [pc, #164]	@ (80044d0 <TIM_Base_SetConfig+0xb8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x30>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x30>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a26      	ldr	r2, [pc, #152]	@ (80044d4 <TIM_Base_SetConfig+0xbc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x30>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a25      	ldr	r2, [pc, #148]	@ (80044d8 <TIM_Base_SetConfig+0xc0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1c      	ldr	r2, [pc, #112]	@ (80044d0 <TIM_Base_SetConfig+0xb8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004468:	d007      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <TIM_Base_SetConfig+0xbc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <TIM_Base_SetConfig+0xc0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <TIM_Base_SetConfig+0xb8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d103      	bne.n	80044c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	615a      	str	r2, [r3, #20]
}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800

080044dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 030a 	bic.w	r3, r3, #10
 8004518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0210 	bic.w	r2, r3, #16
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	031b      	lsls	r3, r3, #12
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f043 0307 	orr.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e046      	b.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a16      	ldr	r2, [pc, #88]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466c:	d009      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a10      	ldr	r2, [pc, #64]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10c      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800

080046c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e042      	b.n	8004780 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc f914 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	@ 0x24
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fdef 	bl	8005310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d16d      	bne.n	8004884 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Transmit+0x2c>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e066      	b.n	8004886 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2221      	movs	r2, #33	@ 0x21
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fc fd73 	bl	80012b0 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e0:	d108      	bne.n	80047f4 <HAL_UART_Transmit+0x6c>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e003      	b.n	80047fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047fc:	e02a      	b.n	8004854 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	2180      	movs	r1, #128	@ 0x80
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fb77 	bl	8004efc <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e036      	b.n	8004886 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	3302      	adds	r3, #2
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	e007      	b.n	8004846 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	3301      	adds	r3, #1
 8004844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1cf      	bne.n	80047fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2200      	movs	r2, #0
 8004866:	2140      	movs	r1, #64	@ 0x40
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fb47 	bl	8004efc <UART_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e006      	b.n	8004886 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	e000      	b.n	8004886 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004884:	2302      	movs	r3, #2
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08a      	sub	sp, #40	@ 0x28
 8004892:	af02      	add	r7, sp, #8
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d17c      	bne.n	80049a8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Receive+0x2c>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e075      	b.n	80049aa <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2222      	movs	r2, #34	@ 0x22
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d2:	f7fc fced 	bl	80012b0 <HAL_GetTick>
 80048d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ec:	d108      	bne.n	8004900 <HAL_UART_Receive+0x72>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	e003      	b.n	8004908 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004908:	e043      	b.n	8004992 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2120      	movs	r1, #32
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 faf1 	bl	8004efc <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e042      	b.n	80049aa <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	b29a      	uxth	r2, r3
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	3302      	adds	r3, #2
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e01f      	b.n	8004984 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494c:	d007      	beq.n	800495e <HAL_UART_Receive+0xd0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <HAL_UART_Receive+0xde>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e008      	b.n	800497e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004978:	b2da      	uxtb	r2, r3
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1b6      	bne.n	800490a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b0ba      	sub	sp, #232	@ 0xe8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049da:	2300      	movs	r3, #0
 80049dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_UART_IRQHandler+0x66>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fbbd 	bl	8005192 <UART_Receive_IT>
      return;
 8004a18:	e25b      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80de 	beq.w	8004be0 <HAL_UART_IRQHandler+0x22c>
 8004a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80d1 	beq.w	8004be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_UART_IRQHandler+0xae>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_UART_IRQHandler+0xd2>
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	f043 0202 	orr.w	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_UART_IRQHandler+0xf6>
 8004a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f043 0204 	orr.w	r2, r3, #4
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d011      	beq.n	8004ada <HAL_UART_IRQHandler+0x126>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f043 0208 	orr.w	r2, r3, #8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 81f2 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_UART_IRQHandler+0x14e>
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fb48 	bl	8005192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <HAL_UART_IRQHandler+0x17a>
 8004b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04f      	beq.n	8004bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa52 	bl	8004fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d041      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3314      	adds	r3, #20
 8004b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1d9      	bne.n	8004b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d013      	beq.n	8004bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d94 <HAL_UART_IRQHandler+0x3e0>)
 8004b9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc fcfa 	bl	800159c <HAL_DMA_Abort_IT>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	e00e      	b.n	8004bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f993 	bl	8004eea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	e00a      	b.n	8004bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f98f 	bl	8004eea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	e006      	b.n	8004bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f98b 	bl	8004eea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bda:	e175      	b.n	8004ec8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	bf00      	nop
    return;
 8004bde:	e173      	b.n	8004ec8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	f040 814f 	bne.w	8004e88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8148 	beq.w	8004e88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8141 	beq.w	8004e88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80b6 	beq.w	8004d98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8145 	beq.w	8004ecc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	f080 813e 	bcs.w	8004ecc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	f000 8088 	beq.w	8004d74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1d9      	bne.n	8004c64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3314      	adds	r3, #20
 8004cd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cd4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ce6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e1      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e3      	bne.n	8004cec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e3      	bne.n	8004d32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fc fbd9 	bl	8001526 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc f940 	bl	8001010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d90:	e09c      	b.n	8004ecc <HAL_UART_IRQHandler+0x518>
 8004d92:	bf00      	nop
 8004d94:	0800509d 	.word	0x0800509d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 808e 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8089 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e3      	bne.n	8004dbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	623b      	str	r3, [r7, #32]
   return(result);
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e3      	bne.n	8004df6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0310 	bic.w	r3, r3, #16
 8004e52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e60:	61fa      	str	r2, [r7, #28]
 8004e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	69b9      	ldr	r1, [r7, #24]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e3      	bne.n	8004e3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fc f8c5 	bl	8001010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e86:	e023      	b.n	8004ed0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d009      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x4f4>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f90f 	bl	80050c4 <UART_Transmit_IT>
    return;
 8004ea6:	e014      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f94e 	bl	8005162 <UART_EndTransmit_IT>
    return;
 8004ec6:	e004      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ec8:	bf00      	nop
 8004eca:	e002      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ecc:	bf00      	nop
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ed0:	bf00      	nop
  }
}
 8004ed2:	37e8      	adds	r7, #232	@ 0xe8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b090      	sub	sp, #64	@ 0x40
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0c:	e050      	b.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d04c      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1c:	f7fc f9c8 	bl	80012b0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d241      	bcs.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e5      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3314      	adds	r3, #20
 8004f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f80:	623a      	str	r2, [r7, #32]
 8004f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	6a3a      	ldr	r2, [r7, #32]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e00f      	b.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d09f      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3740      	adds	r7, #64	@ 0x40
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b095      	sub	sp, #84	@ 0x54
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005000:	643a      	str	r2, [r7, #64]	@ 0x40
 8005002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	61fb      	str	r3, [r7, #28]
   return(result);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800503a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504c:	2b01      	cmp	r3, #1
 800504e:	d119      	bne.n	8005084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f023 0310 	bic.w	r3, r3, #16
 8005066:	647b      	str	r3, [r7, #68]	@ 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005070:	61ba      	str	r2, [r7, #24]
 8005072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	613b      	str	r3, [r7, #16]
   return(result);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005092:	bf00      	nop
 8005094:	3754      	adds	r7, #84	@ 0x54
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff ff17 	bl	8004eea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b21      	cmp	r3, #33	@ 0x21
 80050d6:	d13e      	bne.n	8005156 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e0:	d114      	bne.n	800510c <UART_Transmit_IT+0x48>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d110      	bne.n	800510c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	1c9a      	adds	r2, r3, #2
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]
 800510a:	e008      	b.n	800511e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	1c59      	adds	r1, r3, #1
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6211      	str	r1, [r2, #32]
 8005116:	781a      	ldrb	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29b      	uxth	r3, r3
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4619      	mov	r1, r3
 800512c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10f      	bne.n	8005152 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005140:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005150:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e000      	b.n	8005158 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
  }
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fea8 	bl	8004ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b08c      	sub	sp, #48	@ 0x30
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b22      	cmp	r3, #34	@ 0x22
 80051a4:	f040 80ae 	bne.w	8005304 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b0:	d117      	bne.n	80051e2 <UART_Receive_IT+0x50>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d113      	bne.n	80051e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28
 80051e0:	e026      	b.n	8005230 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f4:	d007      	beq.n	8005206 <UART_Receive_IT+0x74>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <UART_Receive_IT+0x82>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e008      	b.n	8005226 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005220:	b2da      	uxtb	r2, r3
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4619      	mov	r1, r3
 800523e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005240:	2b00      	cmp	r3, #0
 8005242:	d15d      	bne.n	8005300 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0220 	bic.w	r2, r2, #32
 8005252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	2b01      	cmp	r3, #1
 8005288:	d135      	bne.n	80052f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	613b      	str	r3, [r7, #16]
   return(result);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b0:	623a      	str	r2, [r7, #32]
 80052b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d10a      	bne.n	80052e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb fe8e 	bl	8001010 <HAL_UARTEx_RxEventCallback>
 80052f4:	e002      	b.n	80052fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fb fe74 	bl	8000fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e002      	b.n	8005306 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3730      	adds	r7, #48	@ 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800534a:	f023 030c 	bic.w	r3, r3, #12
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	430b      	orrs	r3, r1
 8005356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2c      	ldr	r2, [pc, #176]	@ (8005424 <UART_SetConfig+0x114>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe fd86 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	e002      	b.n	8005386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005380:	f7fe fd6e 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8005384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009a      	lsls	r2, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	4a22      	ldr	r2, [pc, #136]	@ (8005428 <UART_SetConfig+0x118>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	0119      	lsls	r1, r3, #4
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009a      	lsls	r2, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <UART_SetConfig+0x118>)
 80053be:	fba3 0302 	umull	r0, r3, r3, r2
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2064      	movs	r0, #100	@ 0x64
 80053c6:	fb00 f303 	mul.w	r3, r0, r3
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	3332      	adds	r3, #50	@ 0x32
 80053d0:	4a15      	ldr	r2, [pc, #84]	@ (8005428 <UART_SetConfig+0x118>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053dc:	4419      	add	r1, r3
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009a      	lsls	r2, r3, #2
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <UART_SetConfig+0x118>)
 80053f6:	fba3 0302 	umull	r0, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2064      	movs	r0, #100	@ 0x64
 80053fe:	fb00 f303 	mul.w	r3, r0, r3
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	3332      	adds	r3, #50	@ 0x32
 8005408:	4a07      	ldr	r2, [pc, #28]	@ (8005428 <UART_SetConfig+0x118>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	440a      	add	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40013800 	.word	0x40013800
 8005428:	51eb851f 	.word	0x51eb851f

0800542c <atoi>:
 800542c:	220a      	movs	r2, #10
 800542e:	2100      	movs	r1, #0
 8005430:	f000 b87a 	b.w	8005528 <strtol>

08005434 <_strtol_l.constprop.0>:
 8005434:	2b24      	cmp	r3, #36	@ 0x24
 8005436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543a:	4686      	mov	lr, r0
 800543c:	4690      	mov	r8, r2
 800543e:	d801      	bhi.n	8005444 <_strtol_l.constprop.0+0x10>
 8005440:	2b01      	cmp	r3, #1
 8005442:	d106      	bne.n	8005452 <_strtol_l.constprop.0+0x1e>
 8005444:	f000 f8a2 	bl	800558c <__errno>
 8005448:	2316      	movs	r3, #22
 800544a:	6003      	str	r3, [r0, #0]
 800544c:	2000      	movs	r0, #0
 800544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005452:	460d      	mov	r5, r1
 8005454:	4833      	ldr	r0, [pc, #204]	@ (8005524 <_strtol_l.constprop.0+0xf0>)
 8005456:	462a      	mov	r2, r5
 8005458:	f815 4b01 	ldrb.w	r4, [r5], #1
 800545c:	5d06      	ldrb	r6, [r0, r4]
 800545e:	f016 0608 	ands.w	r6, r6, #8
 8005462:	d1f8      	bne.n	8005456 <_strtol_l.constprop.0+0x22>
 8005464:	2c2d      	cmp	r4, #45	@ 0x2d
 8005466:	d12d      	bne.n	80054c4 <_strtol_l.constprop.0+0x90>
 8005468:	2601      	movs	r6, #1
 800546a:	782c      	ldrb	r4, [r5, #0]
 800546c:	1c95      	adds	r5, r2, #2
 800546e:	f033 0210 	bics.w	r2, r3, #16
 8005472:	d109      	bne.n	8005488 <_strtol_l.constprop.0+0x54>
 8005474:	2c30      	cmp	r4, #48	@ 0x30
 8005476:	d12a      	bne.n	80054ce <_strtol_l.constprop.0+0x9a>
 8005478:	782a      	ldrb	r2, [r5, #0]
 800547a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800547e:	2a58      	cmp	r2, #88	@ 0x58
 8005480:	d125      	bne.n	80054ce <_strtol_l.constprop.0+0x9a>
 8005482:	2310      	movs	r3, #16
 8005484:	786c      	ldrb	r4, [r5, #1]
 8005486:	3502      	adds	r5, #2
 8005488:	2200      	movs	r2, #0
 800548a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800548e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005492:	fbbc f9f3 	udiv	r9, ip, r3
 8005496:	4610      	mov	r0, r2
 8005498:	fb03 ca19 	mls	sl, r3, r9, ip
 800549c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80054a0:	2f09      	cmp	r7, #9
 80054a2:	d81b      	bhi.n	80054dc <_strtol_l.constprop.0+0xa8>
 80054a4:	463c      	mov	r4, r7
 80054a6:	42a3      	cmp	r3, r4
 80054a8:	dd27      	ble.n	80054fa <_strtol_l.constprop.0+0xc6>
 80054aa:	1c57      	adds	r7, r2, #1
 80054ac:	d007      	beq.n	80054be <_strtol_l.constprop.0+0x8a>
 80054ae:	4581      	cmp	r9, r0
 80054b0:	d320      	bcc.n	80054f4 <_strtol_l.constprop.0+0xc0>
 80054b2:	d101      	bne.n	80054b8 <_strtol_l.constprop.0+0x84>
 80054b4:	45a2      	cmp	sl, r4
 80054b6:	db1d      	blt.n	80054f4 <_strtol_l.constprop.0+0xc0>
 80054b8:	2201      	movs	r2, #1
 80054ba:	fb00 4003 	mla	r0, r0, r3, r4
 80054be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054c2:	e7eb      	b.n	800549c <_strtol_l.constprop.0+0x68>
 80054c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80054c6:	bf04      	itt	eq
 80054c8:	782c      	ldrbeq	r4, [r5, #0]
 80054ca:	1c95      	addeq	r5, r2, #2
 80054cc:	e7cf      	b.n	800546e <_strtol_l.constprop.0+0x3a>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1da      	bne.n	8005488 <_strtol_l.constprop.0+0x54>
 80054d2:	2c30      	cmp	r4, #48	@ 0x30
 80054d4:	bf0c      	ite	eq
 80054d6:	2308      	moveq	r3, #8
 80054d8:	230a      	movne	r3, #10
 80054da:	e7d5      	b.n	8005488 <_strtol_l.constprop.0+0x54>
 80054dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80054e0:	2f19      	cmp	r7, #25
 80054e2:	d801      	bhi.n	80054e8 <_strtol_l.constprop.0+0xb4>
 80054e4:	3c37      	subs	r4, #55	@ 0x37
 80054e6:	e7de      	b.n	80054a6 <_strtol_l.constprop.0+0x72>
 80054e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80054ec:	2f19      	cmp	r7, #25
 80054ee:	d804      	bhi.n	80054fa <_strtol_l.constprop.0+0xc6>
 80054f0:	3c57      	subs	r4, #87	@ 0x57
 80054f2:	e7d8      	b.n	80054a6 <_strtol_l.constprop.0+0x72>
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	e7e1      	b.n	80054be <_strtol_l.constprop.0+0x8a>
 80054fa:	1c53      	adds	r3, r2, #1
 80054fc:	d108      	bne.n	8005510 <_strtol_l.constprop.0+0xdc>
 80054fe:	2322      	movs	r3, #34	@ 0x22
 8005500:	4660      	mov	r0, ip
 8005502:	f8ce 3000 	str.w	r3, [lr]
 8005506:	f1b8 0f00 	cmp.w	r8, #0
 800550a:	d0a0      	beq.n	800544e <_strtol_l.constprop.0+0x1a>
 800550c:	1e69      	subs	r1, r5, #1
 800550e:	e006      	b.n	800551e <_strtol_l.constprop.0+0xea>
 8005510:	b106      	cbz	r6, 8005514 <_strtol_l.constprop.0+0xe0>
 8005512:	4240      	negs	r0, r0
 8005514:	f1b8 0f00 	cmp.w	r8, #0
 8005518:	d099      	beq.n	800544e <_strtol_l.constprop.0+0x1a>
 800551a:	2a00      	cmp	r2, #0
 800551c:	d1f6      	bne.n	800550c <_strtol_l.constprop.0+0xd8>
 800551e:	f8c8 1000 	str.w	r1, [r8]
 8005522:	e794      	b.n	800544e <_strtol_l.constprop.0+0x1a>
 8005524:	08006107 	.word	0x08006107

08005528 <strtol>:
 8005528:	4613      	mov	r3, r2
 800552a:	460a      	mov	r2, r1
 800552c:	4601      	mov	r1, r0
 800552e:	4802      	ldr	r0, [pc, #8]	@ (8005538 <strtol+0x10>)
 8005530:	6800      	ldr	r0, [r0, #0]
 8005532:	f7ff bf7f 	b.w	8005434 <_strtol_l.constprop.0>
 8005536:	bf00      	nop
 8005538:	2000000c 	.word	0x2000000c

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005542:	b500      	push	{lr}
 8005544:	b09c      	sub	sp, #112	@ 0x70
 8005546:	ab1d      	add	r3, sp, #116	@ 0x74
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	9107      	str	r1, [sp, #28]
 800554e:	9104      	str	r1, [sp, #16]
 8005550:	4808      	ldr	r0, [pc, #32]	@ (8005574 <siprintf+0x38>)
 8005552:	4909      	ldr	r1, [pc, #36]	@ (8005578 <siprintf+0x3c>)
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	9105      	str	r1, [sp, #20]
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	a902      	add	r1, sp, #8
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	f000 f992 	bl	8005888 <_svfiprintf_r>
 8005564:	2200      	movs	r2, #0
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	b01c      	add	sp, #112	@ 0x70
 800556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005570:	b003      	add	sp, #12
 8005572:	4770      	bx	lr
 8005574:	2000000c 	.word	0x2000000c
 8005578:	ffff0208 	.word	0xffff0208

0800557c <memset>:
 800557c:	4603      	mov	r3, r0
 800557e:	4402      	add	r2, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	d100      	bne.n	8005586 <memset+0xa>
 8005584:	4770      	bx	lr
 8005586:	f803 1b01 	strb.w	r1, [r3], #1
 800558a:	e7f9      	b.n	8005580 <memset+0x4>

0800558c <__errno>:
 800558c:	4b01      	ldr	r3, [pc, #4]	@ (8005594 <__errno+0x8>)
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	2000000c 	.word	0x2000000c

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	2600      	movs	r6, #0
 800559c:	4d0c      	ldr	r5, [pc, #48]	@ (80055d0 <__libc_init_array+0x38>)
 800559e:	4c0d      	ldr	r4, [pc, #52]	@ (80055d4 <__libc_init_array+0x3c>)
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	f000 fc78 	bl	8005e9c <_init>
 80055ac:	2600      	movs	r6, #0
 80055ae:	4d0a      	ldr	r5, [pc, #40]	@ (80055d8 <__libc_init_array+0x40>)
 80055b0:	4c0a      	ldr	r4, [pc, #40]	@ (80055dc <__libc_init_array+0x44>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	08006244 	.word	0x08006244
 80055d4:	08006244 	.word	0x08006244
 80055d8:	08006244 	.word	0x08006244
 80055dc:	08006248 	.word	0x08006248

080055e0 <__retarget_lock_acquire_recursive>:
 80055e0:	4770      	bx	lr

080055e2 <__retarget_lock_release_recursive>:
 80055e2:	4770      	bx	lr

080055e4 <_free_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4605      	mov	r5, r0
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d040      	beq.n	800566e <_free_r+0x8a>
 80055ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f0:	1f0c      	subs	r4, r1, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bfb8      	it	lt
 80055f6:	18e4      	addlt	r4, r4, r3
 80055f8:	f000 f8de 	bl	80057b8 <__malloc_lock>
 80055fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <_free_r+0x8c>)
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	b933      	cbnz	r3, 8005610 <_free_r+0x2c>
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	6014      	str	r4, [r2, #0]
 8005606:	4628      	mov	r0, r5
 8005608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560c:	f000 b8da 	b.w	80057c4 <__malloc_unlock>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d908      	bls.n	8005626 <_free_r+0x42>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	1821      	adds	r1, r4, r0
 8005618:	428b      	cmp	r3, r1
 800561a:	bf01      	itttt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	1809      	addeq	r1, r1, r0
 8005622:	6021      	streq	r1, [r4, #0]
 8005624:	e7ed      	b.n	8005602 <_free_r+0x1e>
 8005626:	461a      	mov	r2, r3
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b10b      	cbz	r3, 8005630 <_free_r+0x4c>
 800562c:	42a3      	cmp	r3, r4
 800562e:	d9fa      	bls.n	8005626 <_free_r+0x42>
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	1850      	adds	r0, r2, r1
 8005634:	42a0      	cmp	r0, r4
 8005636:	d10b      	bne.n	8005650 <_free_r+0x6c>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	4401      	add	r1, r0
 800563c:	1850      	adds	r0, r2, r1
 800563e:	4283      	cmp	r3, r0
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	d1e0      	bne.n	8005606 <_free_r+0x22>
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4408      	add	r0, r1
 800564a:	6010      	str	r0, [r2, #0]
 800564c:	6053      	str	r3, [r2, #4]
 800564e:	e7da      	b.n	8005606 <_free_r+0x22>
 8005650:	d902      	bls.n	8005658 <_free_r+0x74>
 8005652:	230c      	movs	r3, #12
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	e7d6      	b.n	8005606 <_free_r+0x22>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	1821      	adds	r1, r4, r0
 800565c:	428b      	cmp	r3, r1
 800565e:	bf01      	itttt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	1809      	addeq	r1, r1, r0
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	6063      	str	r3, [r4, #4]
 800566a:	6054      	str	r4, [r2, #4]
 800566c:	e7cb      	b.n	8005606 <_free_r+0x22>
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	2000047c 	.word	0x2000047c

08005674 <sbrk_aligned>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4e0f      	ldr	r6, [pc, #60]	@ (80056b4 <sbrk_aligned+0x40>)
 8005678:	460c      	mov	r4, r1
 800567a:	6831      	ldr	r1, [r6, #0]
 800567c:	4605      	mov	r5, r0
 800567e:	b911      	cbnz	r1, 8005686 <sbrk_aligned+0x12>
 8005680:	f000 fbaa 	bl	8005dd8 <_sbrk_r>
 8005684:	6030      	str	r0, [r6, #0]
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	f000 fba5 	bl	8005dd8 <_sbrk_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d103      	bne.n	800569a <sbrk_aligned+0x26>
 8005692:	f04f 34ff 	mov.w	r4, #4294967295
 8005696:	4620      	mov	r0, r4
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	1cc4      	adds	r4, r0, #3
 800569c:	f024 0403 	bic.w	r4, r4, #3
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d0f8      	beq.n	8005696 <sbrk_aligned+0x22>
 80056a4:	1a21      	subs	r1, r4, r0
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 fb96 	bl	8005dd8 <_sbrk_r>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d1f2      	bne.n	8005696 <sbrk_aligned+0x22>
 80056b0:	e7ef      	b.n	8005692 <sbrk_aligned+0x1e>
 80056b2:	bf00      	nop
 80056b4:	20000478 	.word	0x20000478

080056b8 <_malloc_r>:
 80056b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056bc:	1ccd      	adds	r5, r1, #3
 80056be:	f025 0503 	bic.w	r5, r5, #3
 80056c2:	3508      	adds	r5, #8
 80056c4:	2d0c      	cmp	r5, #12
 80056c6:	bf38      	it	cc
 80056c8:	250c      	movcc	r5, #12
 80056ca:	2d00      	cmp	r5, #0
 80056cc:	4606      	mov	r6, r0
 80056ce:	db01      	blt.n	80056d4 <_malloc_r+0x1c>
 80056d0:	42a9      	cmp	r1, r5
 80056d2:	d904      	bls.n	80056de <_malloc_r+0x26>
 80056d4:	230c      	movs	r3, #12
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	2000      	movs	r0, #0
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057b4 <_malloc_r+0xfc>
 80056e2:	f000 f869 	bl	80057b8 <__malloc_lock>
 80056e6:	f8d8 3000 	ldr.w	r3, [r8]
 80056ea:	461c      	mov	r4, r3
 80056ec:	bb44      	cbnz	r4, 8005740 <_malloc_r+0x88>
 80056ee:	4629      	mov	r1, r5
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff ffbf 	bl	8005674 <sbrk_aligned>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	4604      	mov	r4, r0
 80056fa:	d158      	bne.n	80057ae <_malloc_r+0xf6>
 80056fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005700:	4627      	mov	r7, r4
 8005702:	2f00      	cmp	r7, #0
 8005704:	d143      	bne.n	800578e <_malloc_r+0xd6>
 8005706:	2c00      	cmp	r4, #0
 8005708:	d04b      	beq.n	80057a2 <_malloc_r+0xea>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	4639      	mov	r1, r7
 800570e:	4630      	mov	r0, r6
 8005710:	eb04 0903 	add.w	r9, r4, r3
 8005714:	f000 fb60 	bl	8005dd8 <_sbrk_r>
 8005718:	4581      	cmp	r9, r0
 800571a:	d142      	bne.n	80057a2 <_malloc_r+0xea>
 800571c:	6821      	ldr	r1, [r4, #0]
 800571e:	4630      	mov	r0, r6
 8005720:	1a6d      	subs	r5, r5, r1
 8005722:	4629      	mov	r1, r5
 8005724:	f7ff ffa6 	bl	8005674 <sbrk_aligned>
 8005728:	3001      	adds	r0, #1
 800572a:	d03a      	beq.n	80057a2 <_malloc_r+0xea>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	442b      	add	r3, r5
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	f8d8 3000 	ldr.w	r3, [r8]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	bb62      	cbnz	r2, 8005794 <_malloc_r+0xdc>
 800573a:	f8c8 7000 	str.w	r7, [r8]
 800573e:	e00f      	b.n	8005760 <_malloc_r+0xa8>
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	1b52      	subs	r2, r2, r5
 8005744:	d420      	bmi.n	8005788 <_malloc_r+0xd0>
 8005746:	2a0b      	cmp	r2, #11
 8005748:	d917      	bls.n	800577a <_malloc_r+0xc2>
 800574a:	1961      	adds	r1, r4, r5
 800574c:	42a3      	cmp	r3, r4
 800574e:	6025      	str	r5, [r4, #0]
 8005750:	bf18      	it	ne
 8005752:	6059      	strne	r1, [r3, #4]
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	bf08      	it	eq
 8005758:	f8c8 1000 	streq.w	r1, [r8]
 800575c:	5162      	str	r2, [r4, r5]
 800575e:	604b      	str	r3, [r1, #4]
 8005760:	4630      	mov	r0, r6
 8005762:	f000 f82f 	bl	80057c4 <__malloc_unlock>
 8005766:	f104 000b 	add.w	r0, r4, #11
 800576a:	1d23      	adds	r3, r4, #4
 800576c:	f020 0007 	bic.w	r0, r0, #7
 8005770:	1ac2      	subs	r2, r0, r3
 8005772:	bf1c      	itt	ne
 8005774:	1a1b      	subne	r3, r3, r0
 8005776:	50a3      	strne	r3, [r4, r2]
 8005778:	e7af      	b.n	80056da <_malloc_r+0x22>
 800577a:	6862      	ldr	r2, [r4, #4]
 800577c:	42a3      	cmp	r3, r4
 800577e:	bf0c      	ite	eq
 8005780:	f8c8 2000 	streq.w	r2, [r8]
 8005784:	605a      	strne	r2, [r3, #4]
 8005786:	e7eb      	b.n	8005760 <_malloc_r+0xa8>
 8005788:	4623      	mov	r3, r4
 800578a:	6864      	ldr	r4, [r4, #4]
 800578c:	e7ae      	b.n	80056ec <_malloc_r+0x34>
 800578e:	463c      	mov	r4, r7
 8005790:	687f      	ldr	r7, [r7, #4]
 8005792:	e7b6      	b.n	8005702 <_malloc_r+0x4a>
 8005794:	461a      	mov	r2, r3
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	42a3      	cmp	r3, r4
 800579a:	d1fb      	bne.n	8005794 <_malloc_r+0xdc>
 800579c:	2300      	movs	r3, #0
 800579e:	6053      	str	r3, [r2, #4]
 80057a0:	e7de      	b.n	8005760 <_malloc_r+0xa8>
 80057a2:	230c      	movs	r3, #12
 80057a4:	4630      	mov	r0, r6
 80057a6:	6033      	str	r3, [r6, #0]
 80057a8:	f000 f80c 	bl	80057c4 <__malloc_unlock>
 80057ac:	e794      	b.n	80056d8 <_malloc_r+0x20>
 80057ae:	6005      	str	r5, [r0, #0]
 80057b0:	e7d6      	b.n	8005760 <_malloc_r+0xa8>
 80057b2:	bf00      	nop
 80057b4:	2000047c 	.word	0x2000047c

080057b8 <__malloc_lock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	@ (80057c0 <__malloc_lock+0x8>)
 80057ba:	f7ff bf11 	b.w	80055e0 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	20000474 	.word	0x20000474

080057c4 <__malloc_unlock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	@ (80057cc <__malloc_unlock+0x8>)
 80057c6:	f7ff bf0c 	b.w	80055e2 <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000474 	.word	0x20000474

080057d0 <__ssputs_r>:
 80057d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d4:	461f      	mov	r7, r3
 80057d6:	688e      	ldr	r6, [r1, #8]
 80057d8:	4682      	mov	sl, r0
 80057da:	42be      	cmp	r6, r7
 80057dc:	460c      	mov	r4, r1
 80057de:	4690      	mov	r8, r2
 80057e0:	680b      	ldr	r3, [r1, #0]
 80057e2:	d82d      	bhi.n	8005840 <__ssputs_r+0x70>
 80057e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057ec:	d026      	beq.n	800583c <__ssputs_r+0x6c>
 80057ee:	6965      	ldr	r5, [r4, #20]
 80057f0:	6909      	ldr	r1, [r1, #16]
 80057f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057f6:	eba3 0901 	sub.w	r9, r3, r1
 80057fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057fe:	1c7b      	adds	r3, r7, #1
 8005800:	444b      	add	r3, r9
 8005802:	106d      	asrs	r5, r5, #1
 8005804:	429d      	cmp	r5, r3
 8005806:	bf38      	it	cc
 8005808:	461d      	movcc	r5, r3
 800580a:	0553      	lsls	r3, r2, #21
 800580c:	d527      	bpl.n	800585e <__ssputs_r+0x8e>
 800580e:	4629      	mov	r1, r5
 8005810:	f7ff ff52 	bl	80056b8 <_malloc_r>
 8005814:	4606      	mov	r6, r0
 8005816:	b360      	cbz	r0, 8005872 <__ssputs_r+0xa2>
 8005818:	464a      	mov	r2, r9
 800581a:	6921      	ldr	r1, [r4, #16]
 800581c:	f000 fafa 	bl	8005e14 <memcpy>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	6126      	str	r6, [r4, #16]
 800582e:	444e      	add	r6, r9
 8005830:	6026      	str	r6, [r4, #0]
 8005832:	463e      	mov	r6, r7
 8005834:	6165      	str	r5, [r4, #20]
 8005836:	eba5 0509 	sub.w	r5, r5, r9
 800583a:	60a5      	str	r5, [r4, #8]
 800583c:	42be      	cmp	r6, r7
 800583e:	d900      	bls.n	8005842 <__ssputs_r+0x72>
 8005840:	463e      	mov	r6, r7
 8005842:	4632      	mov	r2, r6
 8005844:	4641      	mov	r1, r8
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	f000 faac 	bl	8005da4 <memmove>
 800584c:	2000      	movs	r0, #0
 800584e:	68a3      	ldr	r3, [r4, #8]
 8005850:	1b9b      	subs	r3, r3, r6
 8005852:	60a3      	str	r3, [r4, #8]
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	4433      	add	r3, r6
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585e:	462a      	mov	r2, r5
 8005860:	f000 fae6 	bl	8005e30 <_realloc_r>
 8005864:	4606      	mov	r6, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	d1e0      	bne.n	800582c <__ssputs_r+0x5c>
 800586a:	4650      	mov	r0, sl
 800586c:	6921      	ldr	r1, [r4, #16]
 800586e:	f7ff feb9 	bl	80055e4 <_free_r>
 8005872:	230c      	movs	r3, #12
 8005874:	f8ca 3000 	str.w	r3, [sl]
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	f04f 30ff 	mov.w	r0, #4294967295
 800587e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	e7e9      	b.n	800585a <__ssputs_r+0x8a>
	...

08005888 <_svfiprintf_r>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	4698      	mov	r8, r3
 800588e:	898b      	ldrh	r3, [r1, #12]
 8005890:	4607      	mov	r7, r0
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	460d      	mov	r5, r1
 8005896:	4614      	mov	r4, r2
 8005898:	b09d      	sub	sp, #116	@ 0x74
 800589a:	d510      	bpl.n	80058be <_svfiprintf_r+0x36>
 800589c:	690b      	ldr	r3, [r1, #16]
 800589e:	b973      	cbnz	r3, 80058be <_svfiprintf_r+0x36>
 80058a0:	2140      	movs	r1, #64	@ 0x40
 80058a2:	f7ff ff09 	bl	80056b8 <_malloc_r>
 80058a6:	6028      	str	r0, [r5, #0]
 80058a8:	6128      	str	r0, [r5, #16]
 80058aa:	b930      	cbnz	r0, 80058ba <_svfiprintf_r+0x32>
 80058ac:	230c      	movs	r3, #12
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	b01d      	add	sp, #116	@ 0x74
 80058b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ba:	2340      	movs	r3, #64	@ 0x40
 80058bc:	616b      	str	r3, [r5, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c2:	2320      	movs	r3, #32
 80058c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058c8:	2330      	movs	r3, #48	@ 0x30
 80058ca:	f04f 0901 	mov.w	r9, #1
 80058ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005a6c <_svfiprintf_r+0x1e4>
 80058d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058da:	4623      	mov	r3, r4
 80058dc:	469a      	mov	sl, r3
 80058de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e2:	b10a      	cbz	r2, 80058e8 <_svfiprintf_r+0x60>
 80058e4:	2a25      	cmp	r2, #37	@ 0x25
 80058e6:	d1f9      	bne.n	80058dc <_svfiprintf_r+0x54>
 80058e8:	ebba 0b04 	subs.w	fp, sl, r4
 80058ec:	d00b      	beq.n	8005906 <_svfiprintf_r+0x7e>
 80058ee:	465b      	mov	r3, fp
 80058f0:	4622      	mov	r2, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ff6b 	bl	80057d0 <__ssputs_r>
 80058fa:	3001      	adds	r0, #1
 80058fc:	f000 80a7 	beq.w	8005a4e <_svfiprintf_r+0x1c6>
 8005900:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005902:	445a      	add	r2, fp
 8005904:	9209      	str	r2, [sp, #36]	@ 0x24
 8005906:	f89a 3000 	ldrb.w	r3, [sl]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 809f 	beq.w	8005a4e <_svfiprintf_r+0x1c6>
 8005910:	2300      	movs	r3, #0
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591a:	f10a 0a01 	add.w	sl, sl, #1
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	9307      	str	r3, [sp, #28]
 8005922:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005926:	931a      	str	r3, [sp, #104]	@ 0x68
 8005928:	4654      	mov	r4, sl
 800592a:	2205      	movs	r2, #5
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	484e      	ldr	r0, [pc, #312]	@ (8005a6c <_svfiprintf_r+0x1e4>)
 8005932:	f000 fa61 	bl	8005df8 <memchr>
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	b9d8      	cbnz	r0, 8005972 <_svfiprintf_r+0xea>
 800593a:	06d0      	lsls	r0, r2, #27
 800593c:	bf44      	itt	mi
 800593e:	2320      	movmi	r3, #32
 8005940:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005944:	0711      	lsls	r1, r2, #28
 8005946:	bf44      	itt	mi
 8005948:	232b      	movmi	r3, #43	@ 0x2b
 800594a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800594e:	f89a 3000 	ldrb.w	r3, [sl]
 8005952:	2b2a      	cmp	r3, #42	@ 0x2a
 8005954:	d015      	beq.n	8005982 <_svfiprintf_r+0xfa>
 8005956:	4654      	mov	r4, sl
 8005958:	2000      	movs	r0, #0
 800595a:	f04f 0c0a 	mov.w	ip, #10
 800595e:	9a07      	ldr	r2, [sp, #28]
 8005960:	4621      	mov	r1, r4
 8005962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005966:	3b30      	subs	r3, #48	@ 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d94b      	bls.n	8005a04 <_svfiprintf_r+0x17c>
 800596c:	b1b0      	cbz	r0, 800599c <_svfiprintf_r+0x114>
 800596e:	9207      	str	r2, [sp, #28]
 8005970:	e014      	b.n	800599c <_svfiprintf_r+0x114>
 8005972:	eba0 0308 	sub.w	r3, r0, r8
 8005976:	fa09 f303 	lsl.w	r3, r9, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	46a2      	mov	sl, r4
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	e7d2      	b.n	8005928 <_svfiprintf_r+0xa0>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	9103      	str	r1, [sp, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfbb      	ittet	lt
 800598e:	425b      	neglt	r3, r3
 8005990:	f042 0202 	orrlt.w	r2, r2, #2
 8005994:	9307      	strge	r3, [sp, #28]
 8005996:	9307      	strlt	r3, [sp, #28]
 8005998:	bfb8      	it	lt
 800599a:	9204      	strlt	r2, [sp, #16]
 800599c:	7823      	ldrb	r3, [r4, #0]
 800599e:	2b2e      	cmp	r3, #46	@ 0x2e
 80059a0:	d10a      	bne.n	80059b8 <_svfiprintf_r+0x130>
 80059a2:	7863      	ldrb	r3, [r4, #1]
 80059a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a6:	d132      	bne.n	8005a0e <_svfiprintf_r+0x186>
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	3402      	adds	r4, #2
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9203      	str	r2, [sp, #12]
 80059b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059b6:	9305      	str	r3, [sp, #20]
 80059b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a70 <_svfiprintf_r+0x1e8>
 80059bc:	2203      	movs	r2, #3
 80059be:	4650      	mov	r0, sl
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	f000 fa19 	bl	8005df8 <memchr>
 80059c6:	b138      	cbz	r0, 80059d8 <_svfiprintf_r+0x150>
 80059c8:	2240      	movs	r2, #64	@ 0x40
 80059ca:	9b04      	ldr	r3, [sp, #16]
 80059cc:	eba0 000a 	sub.w	r0, r0, sl
 80059d0:	4082      	lsls	r2, r0
 80059d2:	4313      	orrs	r3, r2
 80059d4:	3401      	adds	r4, #1
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059dc:	2206      	movs	r2, #6
 80059de:	4825      	ldr	r0, [pc, #148]	@ (8005a74 <_svfiprintf_r+0x1ec>)
 80059e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059e4:	f000 fa08 	bl	8005df8 <memchr>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d036      	beq.n	8005a5a <_svfiprintf_r+0x1d2>
 80059ec:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <_svfiprintf_r+0x1f0>)
 80059ee:	bb1b      	cbnz	r3, 8005a38 <_svfiprintf_r+0x1b0>
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	3307      	adds	r3, #7
 80059f4:	f023 0307 	bic.w	r3, r3, #7
 80059f8:	3308      	adds	r3, #8
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059fe:	4433      	add	r3, r6
 8005a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a02:	e76a      	b.n	80058da <_svfiprintf_r+0x52>
 8005a04:	460c      	mov	r4, r1
 8005a06:	2001      	movs	r0, #1
 8005a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0c:	e7a8      	b.n	8005960 <_svfiprintf_r+0xd8>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f04f 0c0a 	mov.w	ip, #10
 8005a14:	4619      	mov	r1, r3
 8005a16:	3401      	adds	r4, #1
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a20:	3a30      	subs	r2, #48	@ 0x30
 8005a22:	2a09      	cmp	r2, #9
 8005a24:	d903      	bls.n	8005a2e <_svfiprintf_r+0x1a6>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0c6      	beq.n	80059b8 <_svfiprintf_r+0x130>
 8005a2a:	9105      	str	r1, [sp, #20]
 8005a2c:	e7c4      	b.n	80059b8 <_svfiprintf_r+0x130>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	2301      	movs	r3, #1
 8005a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a36:	e7f0      	b.n	8005a1a <_svfiprintf_r+0x192>
 8005a38:	ab03      	add	r3, sp, #12
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4638      	mov	r0, r7
 8005a40:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <_svfiprintf_r+0x1f4>)
 8005a42:	a904      	add	r1, sp, #16
 8005a44:	f3af 8000 	nop.w
 8005a48:	1c42      	adds	r2, r0, #1
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	d1d6      	bne.n	80059fc <_svfiprintf_r+0x174>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	065b      	lsls	r3, r3, #25
 8005a52:	f53f af2d 	bmi.w	80058b0 <_svfiprintf_r+0x28>
 8005a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a58:	e72c      	b.n	80058b4 <_svfiprintf_r+0x2c>
 8005a5a:	ab03      	add	r3, sp, #12
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	462a      	mov	r2, r5
 8005a60:	4638      	mov	r0, r7
 8005a62:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <_svfiprintf_r+0x1f4>)
 8005a64:	a904      	add	r1, sp, #16
 8005a66:	f000 f87d 	bl	8005b64 <_printf_i>
 8005a6a:	e7ed      	b.n	8005a48 <_svfiprintf_r+0x1c0>
 8005a6c:	08006207 	.word	0x08006207
 8005a70:	0800620d 	.word	0x0800620d
 8005a74:	08006211 	.word	0x08006211
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	080057d1 	.word	0x080057d1

08005a80 <_printf_common>:
 8005a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a84:	4616      	mov	r6, r2
 8005a86:	4698      	mov	r8, r3
 8005a88:	688a      	ldr	r2, [r1, #8]
 8005a8a:	690b      	ldr	r3, [r1, #16]
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	bfb8      	it	lt
 8005a92:	4613      	movlt	r3, r2
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aa0:	b10a      	cbz	r2, 8005aa6 <_printf_common+0x26>
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	6033      	str	r3, [r6, #0]
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	0699      	lsls	r1, r3, #26
 8005aaa:	bf42      	ittt	mi
 8005aac:	6833      	ldrmi	r3, [r6, #0]
 8005aae:	3302      	addmi	r3, #2
 8005ab0:	6033      	strmi	r3, [r6, #0]
 8005ab2:	6825      	ldr	r5, [r4, #0]
 8005ab4:	f015 0506 	ands.w	r5, r5, #6
 8005ab8:	d106      	bne.n	8005ac8 <_printf_common+0x48>
 8005aba:	f104 0a19 	add.w	sl, r4, #25
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	6832      	ldr	r2, [r6, #0]
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	dc2b      	bgt.n	8005b20 <_printf_common+0xa0>
 8005ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	3b00      	subs	r3, #0
 8005ad0:	bf18      	it	ne
 8005ad2:	2301      	movne	r3, #1
 8005ad4:	0692      	lsls	r2, r2, #26
 8005ad6:	d430      	bmi.n	8005b3a <_printf_common+0xba>
 8005ad8:	4641      	mov	r1, r8
 8005ada:	4638      	mov	r0, r7
 8005adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ae0:	47c8      	blx	r9
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d023      	beq.n	8005b2e <_printf_common+0xae>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	6922      	ldr	r2, [r4, #16]
 8005aea:	f003 0306 	and.w	r3, r3, #6
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	bf14      	ite	ne
 8005af2:	2500      	movne	r5, #0
 8005af4:	6833      	ldreq	r3, [r6, #0]
 8005af6:	f04f 0600 	mov.w	r6, #0
 8005afa:	bf08      	it	eq
 8005afc:	68e5      	ldreq	r5, [r4, #12]
 8005afe:	f104 041a 	add.w	r4, r4, #26
 8005b02:	bf08      	it	eq
 8005b04:	1aed      	subeq	r5, r5, r3
 8005b06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b0a:	bf08      	it	eq
 8005b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bfc4      	itt	gt
 8005b14:	1a9b      	subgt	r3, r3, r2
 8005b16:	18ed      	addgt	r5, r5, r3
 8005b18:	42b5      	cmp	r5, r6
 8005b1a:	d11a      	bne.n	8005b52 <_printf_common+0xd2>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e008      	b.n	8005b32 <_printf_common+0xb2>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4652      	mov	r2, sl
 8005b24:	4641      	mov	r1, r8
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c8      	blx	r9
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d103      	bne.n	8005b36 <_printf_common+0xb6>
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b36:	3501      	adds	r5, #1
 8005b38:	e7c1      	b.n	8005abe <_printf_common+0x3e>
 8005b3a:	2030      	movs	r0, #48	@ 0x30
 8005b3c:	18e1      	adds	r1, r4, r3
 8005b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b48:	4422      	add	r2, r4
 8005b4a:	3302      	adds	r3, #2
 8005b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b50:	e7c2      	b.n	8005ad8 <_printf_common+0x58>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4622      	mov	r2, r4
 8005b56:	4641      	mov	r1, r8
 8005b58:	4638      	mov	r0, r7
 8005b5a:	47c8      	blx	r9
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0e6      	beq.n	8005b2e <_printf_common+0xae>
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7d9      	b.n	8005b18 <_printf_common+0x98>

08005b64 <_printf_i>:
 8005b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	7e0f      	ldrb	r7, [r1, #24]
 8005b6a:	4691      	mov	r9, r2
 8005b6c:	2f78      	cmp	r7, #120	@ 0x78
 8005b6e:	4680      	mov	r8, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	469a      	mov	sl, r3
 8005b74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b7a:	d807      	bhi.n	8005b8c <_printf_i+0x28>
 8005b7c:	2f62      	cmp	r7, #98	@ 0x62
 8005b7e:	d80a      	bhi.n	8005b96 <_printf_i+0x32>
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	f000 80d3 	beq.w	8005d2c <_printf_i+0x1c8>
 8005b86:	2f58      	cmp	r7, #88	@ 0x58
 8005b88:	f000 80ba 	beq.w	8005d00 <_printf_i+0x19c>
 8005b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b94:	e03a      	b.n	8005c0c <_printf_i+0xa8>
 8005b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b9a:	2b15      	cmp	r3, #21
 8005b9c:	d8f6      	bhi.n	8005b8c <_printf_i+0x28>
 8005b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005ba4 <_printf_i+0x40>)
 8005ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005b8d 	.word	0x08005b8d
 8005bb0:	08005b8d 	.word	0x08005b8d
 8005bb4:	08005b8d 	.word	0x08005b8d
 8005bb8:	08005b8d 	.word	0x08005b8d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b8d 	.word	0x08005b8d
 8005bc4:	08005b8d 	.word	0x08005b8d
 8005bc8:	08005b8d 	.word	0x08005b8d
 8005bcc:	08005b8d 	.word	0x08005b8d
 8005bd0:	08005d13 	.word	0x08005d13
 8005bd4:	08005c3b 	.word	0x08005c3b
 8005bd8:	08005ccd 	.word	0x08005ccd
 8005bdc:	08005b8d 	.word	0x08005b8d
 8005be0:	08005b8d 	.word	0x08005b8d
 8005be4:	08005d35 	.word	0x08005d35
 8005be8:	08005b8d 	.word	0x08005b8d
 8005bec:	08005c3b 	.word	0x08005c3b
 8005bf0:	08005b8d 	.word	0x08005b8d
 8005bf4:	08005b8d 	.word	0x08005b8d
 8005bf8:	08005cd5 	.word	0x08005cd5
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6032      	str	r2, [r6, #0]
 8005c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e09e      	b.n	8005d4e <_printf_i+0x1ea>
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	6031      	str	r1, [r6, #0]
 8005c18:	0606      	lsls	r6, r0, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xbc>
 8005c1c:	681d      	ldr	r5, [r3, #0]
 8005c1e:	e003      	b.n	8005c28 <_printf_i+0xc4>
 8005c20:	0645      	lsls	r5, r0, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xb8>
 8005c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	da03      	bge.n	8005c34 <_printf_i+0xd0>
 8005c2c:	232d      	movs	r3, #45	@ 0x2d
 8005c2e:	426d      	negs	r5, r5
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c34:	230a      	movs	r3, #10
 8005c36:	4859      	ldr	r0, [pc, #356]	@ (8005d9c <_printf_i+0x238>)
 8005c38:	e011      	b.n	8005c5e <_printf_i+0xfa>
 8005c3a:	6821      	ldr	r1, [r4, #0]
 8005c3c:	6833      	ldr	r3, [r6, #0]
 8005c3e:	0608      	lsls	r0, r1, #24
 8005c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c44:	d402      	bmi.n	8005c4c <_printf_i+0xe8>
 8005c46:	0649      	lsls	r1, r1, #25
 8005c48:	bf48      	it	mi
 8005c4a:	b2ad      	uxthmi	r5, r5
 8005c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c4e:	6033      	str	r3, [r6, #0]
 8005c50:	bf14      	ite	ne
 8005c52:	230a      	movne	r3, #10
 8005c54:	2308      	moveq	r3, #8
 8005c56:	4851      	ldr	r0, [pc, #324]	@ (8005d9c <_printf_i+0x238>)
 8005c58:	2100      	movs	r1, #0
 8005c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c5e:	6866      	ldr	r6, [r4, #4]
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	bfa8      	it	ge
 8005c64:	6821      	ldrge	r1, [r4, #0]
 8005c66:	60a6      	str	r6, [r4, #8]
 8005c68:	bfa4      	itt	ge
 8005c6a:	f021 0104 	bicge.w	r1, r1, #4
 8005c6e:	6021      	strge	r1, [r4, #0]
 8005c70:	b90d      	cbnz	r5, 8005c76 <_printf_i+0x112>
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	d04b      	beq.n	8005d0e <_printf_i+0x1aa>
 8005c76:	4616      	mov	r6, r2
 8005c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c80:	5dc7      	ldrb	r7, [r0, r7]
 8005c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c86:	462f      	mov	r7, r5
 8005c88:	42bb      	cmp	r3, r7
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	d9f4      	bls.n	8005c78 <_printf_i+0x114>
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d10b      	bne.n	8005caa <_printf_i+0x146>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	07df      	lsls	r7, r3, #31
 8005c96:	d508      	bpl.n	8005caa <_printf_i+0x146>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	6861      	ldr	r1, [r4, #4]
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	bfde      	ittt	le
 8005ca0:	2330      	movle	r3, #48	@ 0x30
 8005ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ca6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005caa:	1b92      	subs	r2, r2, r6
 8005cac:	6122      	str	r2, [r4, #16]
 8005cae:	464b      	mov	r3, r9
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f8cd a000 	str.w	sl, [sp]
 8005cb8:	aa03      	add	r2, sp, #12
 8005cba:	f7ff fee1 	bl	8005a80 <_printf_common>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d14a      	bne.n	8005d58 <_printf_i+0x1f4>
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc6:	b004      	add	sp, #16
 8005cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	f043 0320 	orr.w	r3, r3, #32
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	2778      	movs	r7, #120	@ 0x78
 8005cd6:	4832      	ldr	r0, [pc, #200]	@ (8005da0 <_printf_i+0x23c>)
 8005cd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	6831      	ldr	r1, [r6, #0]
 8005ce0:	061f      	lsls	r7, r3, #24
 8005ce2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ce6:	d402      	bmi.n	8005cee <_printf_i+0x18a>
 8005ce8:	065f      	lsls	r7, r3, #25
 8005cea:	bf48      	it	mi
 8005cec:	b2ad      	uxthmi	r5, r5
 8005cee:	6031      	str	r1, [r6, #0]
 8005cf0:	07d9      	lsls	r1, r3, #31
 8005cf2:	bf44      	itt	mi
 8005cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf8:	6023      	strmi	r3, [r4, #0]
 8005cfa:	b11d      	cbz	r5, 8005d04 <_printf_i+0x1a0>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	e7ab      	b.n	8005c58 <_printf_i+0xf4>
 8005d00:	4826      	ldr	r0, [pc, #152]	@ (8005d9c <_printf_i+0x238>)
 8005d02:	e7e9      	b.n	8005cd8 <_printf_i+0x174>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	f023 0320 	bic.w	r3, r3, #32
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	e7f6      	b.n	8005cfc <_printf_i+0x198>
 8005d0e:	4616      	mov	r6, r2
 8005d10:	e7bd      	b.n	8005c8e <_printf_i+0x12a>
 8005d12:	6833      	ldr	r3, [r6, #0]
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	1d18      	adds	r0, r3, #4
 8005d18:	6961      	ldr	r1, [r4, #20]
 8005d1a:	6030      	str	r0, [r6, #0]
 8005d1c:	062e      	lsls	r6, r5, #24
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	d501      	bpl.n	8005d26 <_printf_i+0x1c2>
 8005d22:	6019      	str	r1, [r3, #0]
 8005d24:	e002      	b.n	8005d2c <_printf_i+0x1c8>
 8005d26:	0668      	lsls	r0, r5, #25
 8005d28:	d5fb      	bpl.n	8005d22 <_printf_i+0x1be>
 8005d2a:	8019      	strh	r1, [r3, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4616      	mov	r6, r2
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	e7bc      	b.n	8005cae <_printf_i+0x14a>
 8005d34:	6833      	ldr	r3, [r6, #0]
 8005d36:	2100      	movs	r1, #0
 8005d38:	1d1a      	adds	r2, r3, #4
 8005d3a:	6032      	str	r2, [r6, #0]
 8005d3c:	681e      	ldr	r6, [r3, #0]
 8005d3e:	6862      	ldr	r2, [r4, #4]
 8005d40:	4630      	mov	r0, r6
 8005d42:	f000 f859 	bl	8005df8 <memchr>
 8005d46:	b108      	cbz	r0, 8005d4c <_printf_i+0x1e8>
 8005d48:	1b80      	subs	r0, r0, r6
 8005d4a:	6060      	str	r0, [r4, #4]
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	2300      	movs	r3, #0
 8005d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d56:	e7aa      	b.n	8005cae <_printf_i+0x14a>
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	47d0      	blx	sl
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0ad      	beq.n	8005cc2 <_printf_i+0x15e>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	079b      	lsls	r3, r3, #30
 8005d6a:	d413      	bmi.n	8005d94 <_printf_i+0x230>
 8005d6c:	68e0      	ldr	r0, [r4, #12]
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	4298      	cmp	r0, r3
 8005d72:	bfb8      	it	lt
 8005d74:	4618      	movlt	r0, r3
 8005d76:	e7a6      	b.n	8005cc6 <_printf_i+0x162>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4632      	mov	r2, r6
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4640      	mov	r0, r8
 8005d80:	47d0      	blx	sl
 8005d82:	3001      	adds	r0, #1
 8005d84:	d09d      	beq.n	8005cc2 <_printf_i+0x15e>
 8005d86:	3501      	adds	r5, #1
 8005d88:	68e3      	ldr	r3, [r4, #12]
 8005d8a:	9903      	ldr	r1, [sp, #12]
 8005d8c:	1a5b      	subs	r3, r3, r1
 8005d8e:	42ab      	cmp	r3, r5
 8005d90:	dcf2      	bgt.n	8005d78 <_printf_i+0x214>
 8005d92:	e7eb      	b.n	8005d6c <_printf_i+0x208>
 8005d94:	2500      	movs	r5, #0
 8005d96:	f104 0619 	add.w	r6, r4, #25
 8005d9a:	e7f5      	b.n	8005d88 <_printf_i+0x224>
 8005d9c:	08006218 	.word	0x08006218
 8005da0:	08006229 	.word	0x08006229

08005da4 <memmove>:
 8005da4:	4288      	cmp	r0, r1
 8005da6:	b510      	push	{r4, lr}
 8005da8:	eb01 0402 	add.w	r4, r1, r2
 8005dac:	d902      	bls.n	8005db4 <memmove+0x10>
 8005dae:	4284      	cmp	r4, r0
 8005db0:	4623      	mov	r3, r4
 8005db2:	d807      	bhi.n	8005dc4 <memmove+0x20>
 8005db4:	1e43      	subs	r3, r0, #1
 8005db6:	42a1      	cmp	r1, r4
 8005db8:	d008      	beq.n	8005dcc <memmove+0x28>
 8005dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dc2:	e7f8      	b.n	8005db6 <memmove+0x12>
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4402      	add	r2, r0
 8005dc8:	428a      	cmp	r2, r1
 8005dca:	d100      	bne.n	8005dce <memmove+0x2a>
 8005dcc:	bd10      	pop	{r4, pc}
 8005dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dd6:	e7f7      	b.n	8005dc8 <memmove+0x24>

08005dd8 <_sbrk_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d05      	ldr	r5, [pc, #20]	@ (8005df4 <_sbrk_r+0x1c>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fa fed2 	bl	8000b8c <_sbrk>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_sbrk_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_sbrk_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20000470 	.word	0x20000470

08005df8 <memchr>:
 8005df8:	4603      	mov	r3, r0
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	b2c9      	uxtb	r1, r1
 8005dfe:	4402      	add	r2, r0
 8005e00:	4293      	cmp	r3, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	d101      	bne.n	8005e0a <memchr+0x12>
 8005e06:	2000      	movs	r0, #0
 8005e08:	e003      	b.n	8005e12 <memchr+0x1a>
 8005e0a:	7804      	ldrb	r4, [r0, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	428c      	cmp	r4, r1
 8005e10:	d1f6      	bne.n	8005e00 <memchr+0x8>
 8005e12:	bd10      	pop	{r4, pc}

08005e14 <memcpy>:
 8005e14:	440a      	add	r2, r1
 8005e16:	4291      	cmp	r1, r2
 8005e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e1c:	d100      	bne.n	8005e20 <memcpy+0xc>
 8005e1e:	4770      	bx	lr
 8005e20:	b510      	push	{r4, lr}
 8005e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2c:	d1f9      	bne.n	8005e22 <memcpy+0xe>
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <_realloc_r>:
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	4680      	mov	r8, r0
 8005e36:	4615      	mov	r5, r2
 8005e38:	460c      	mov	r4, r1
 8005e3a:	b921      	cbnz	r1, 8005e46 <_realloc_r+0x16>
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	f7ff bc39 	b.w	80056b8 <_malloc_r>
 8005e46:	b92a      	cbnz	r2, 8005e54 <_realloc_r+0x24>
 8005e48:	f7ff fbcc 	bl	80055e4 <_free_r>
 8005e4c:	2400      	movs	r4, #0
 8005e4e:	4620      	mov	r0, r4
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e54:	f000 f81a 	bl	8005e8c <_malloc_usable_size_r>
 8005e58:	4285      	cmp	r5, r0
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	d802      	bhi.n	8005e64 <_realloc_r+0x34>
 8005e5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e62:	d8f4      	bhi.n	8005e4e <_realloc_r+0x1e>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7ff fc26 	bl	80056b8 <_malloc_r>
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d0ec      	beq.n	8005e4c <_realloc_r+0x1c>
 8005e72:	42b5      	cmp	r5, r6
 8005e74:	462a      	mov	r2, r5
 8005e76:	4621      	mov	r1, r4
 8005e78:	bf28      	it	cs
 8005e7a:	4632      	movcs	r2, r6
 8005e7c:	f7ff ffca 	bl	8005e14 <memcpy>
 8005e80:	4621      	mov	r1, r4
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7ff fbae 	bl	80055e4 <_free_r>
 8005e88:	463c      	mov	r4, r7
 8005e8a:	e7e0      	b.n	8005e4e <_realloc_r+0x1e>

08005e8c <_malloc_usable_size_r>:
 8005e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e90:	1f18      	subs	r0, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfbc      	itt	lt
 8005e96:	580b      	ldrlt	r3, [r1, r0]
 8005e98:	18c0      	addlt	r0, r0, r3
 8005e9a:	4770      	bx	lr

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
